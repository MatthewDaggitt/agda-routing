--------------------------------------------------------------------------------
-- Agda routing library
--
-- The top-level results on the convergence of the asynchronous vector-based
-- routing protocols.
--------------------------------------------------------------------------------

open import Data.Nat using (‚Ñï; zero; suc; s‚â§s; z‚â§n; _^_)
open import Level using (Level)

open import RoutingLib.Iteration.Asynchronous.Dynamic.Convergence
  using (completeConvergence)

open import RoutingLib.Routing.Basics.Network.Cycles using (TopologyIsFree; strIncr‚áíalwaysFree)
open import RoutingLib.Routing.Algebra
open import RoutingLib.Routing.Algebra.Certification
open import RoutingLib.Routing.Algebra.Properties.PathAlgebra
open import RoutingLib.Routing.Algebra.Simulation using (_Simulates_)
import RoutingLib.Routing.VectorBased.Asynchronous.Convergence.Proof as Convergence
import RoutingLib.Routing.VectorBased.Convergence.Simulation as Simulation
import RoutingLib.Routing.VectorBased.Synchronous.PathVector.Properties as PathVectorProperties
open import RoutingLib.Routing.VectorBased.Synchronous.PathVector.Convergence.Step6_Proof

module RoutingLib.Routing.VectorBased.Convergence.Results where

private
  variable
    a b c d ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level
    A : RawRoutingAlgebra a b ‚Ñì‚ÇÅ
    B : RawRoutingAlgebra c d ‚Ñì‚ÇÇ

--------------------------------------------------------------------------------
-- Re-export convergence definitions

open import RoutingLib.Routing.VectorBased.Convergence.Definitions public

--------------------------------------------------------------------------------
-- Bisimilarity

-- If an algebra is always convergent then any algebra simulated by it is also
-- convergent

simulate-convergent : A Simulates B ‚Üí Convergent A ‚Üí Convergent B
simulate-convergent = Simulation.convergent

simulate-syncConvergesIn : A Simulates B ‚Üí ‚àÄ f ‚Üí
                           SynchronouslyConvergesIn A f ‚Üí
                           SynchronouslyConvergesIn B f
simulate-syncConvergesIn = Simulation.syncConvergesIn

--------------------------------------------------------------------------------
-- Distance vector protocols

-- If the routing algebra is finite then the asynchronous iteration Œ¥ is
-- guaranteed to converge over any free network.

finite‚áíconvergentOverFreeNetworks : IsRoutingAlgebra A ‚Üí
                                    IsFinite A ‚Üí
                                    PartiallyConvergent A (TopologyIsFree A)
finite‚áíconvergentOverFreeNetworks routingAlg =
  Convergence.finite‚áíconvergentOverFreeNetworks routingAlg

-- If the routing algebra if finite and strictly increasing then the asynchronous
-- iteration Œ¥ is guaranteed to converge over any network.

finite+strictlyIncr‚áíconvergent : IsRoutingAlgebra A ‚Üí
                                 IsFinite A ‚Üí
                                 IsStrictlyIncreasing A ‚Üí
                                 Convergent A
finite+strictlyIncr‚áíconvergent routingAlg finite strIncr N = completeConvergence
  (finite‚áíconvergentOverFreeNetworks routingAlg finite N) _
  (strIncr‚áíalwaysFree _ routingAlg strIncr N)

--------------------------------------------------------------------------------
-- Path vector protocols

module _ (isRoutingAlgebra : IsRoutingAlgebra A)
         (isPathAlgebra : IsPathAlgebra A)
         where

  private
    isCertifiedPathAlgebra = certifiedPathAlgebra isPathAlgebra
    module _ {n : ‚Ñï} where
      open PathVectorProperties isRoutingAlgebra (isCertifiedPathAlgebra n) public
        renaming (ùë™‚Çò‚Ä≤ to Consistent)
    
  -- For any path algebra the asynchronous iteration Œ¥ is always guaranteed
  -- to converge over any free network.
  paths‚áíconvergentOverFreeNetworks : PartiallyConvergent A (TopologyIsFree A)
  paths‚áíconvergentOverFreeNetworks =
    Convergence.paths‚áíconvergentOverFreeNetworks isRoutingAlgebra isPathAlgebra

  -- If the path algebra is increasing (or equivalently strictly increasing) then
  -- the asynchronous iteration Œ¥ is guaranteed to converge over any network.
  incrPaths‚áíconvergent : IsIncreasing A ‚Üí Convergent A
  incrPaths‚áíconvergent incr N = completeConvergence
    (paths‚áíconvergentOverFreeNetworks N) _
    (strIncr‚áíalwaysFree _ isRoutingAlgebra (incr‚áístrIncr isRoutingAlgebra isPathAlgebra incr) N)

  -- If the path algebra is increasing then the synchronous iteration œÉ
  -- is guaranteed to converge in n¬≤ steps over any adjacency matrix.
  incrPaths‚áísyncConvergesIn-n¬≤ : IsIncreasing A ‚Üí SynchronouslyConvergesIn A (Œª n ‚Üí n ^ 2)
  incrPaths‚áísyncConvergesIn-n¬≤ incr n@{suc _} =
    Œª A ‚Üí increasing‚áín¬≤-convergence isRoutingAlgebra (isCertifiedPathAlgebra n) A incr

  -- If the path algebra is increasing *and* distributive then the synchronous iteration
  -- œÉ is guaranteed to converge in n steps over any adjacency matrix when starting from
  -- a state that is consistent with the adjacency matrix.
  incrPaths+distrib‚áísyncConvergesIn-n-whenConsistent : IsIncreasing A ‚Üí
                                                       IsDistributive A ‚Üí
                                                       PartiallySynchronouslyConvergesIn A (Œª n ‚Üí n) Consistent
  incrPaths+distrib‚áísyncConvergesIn-n-whenConsistent incr distrib n@{suc _} =
    Œª A ‚Üí increasing+distrib‚áín-convergence isRoutingAlgebra (isCertifiedPathAlgebra n) A incr distrib
