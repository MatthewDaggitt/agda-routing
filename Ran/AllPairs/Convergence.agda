-- imports
open import Schedule
  using (Schedule; ùïã)
open import Computation
  using (Computation)
open import Data.Fin
  using (Fin; to‚Ñï) renaming (zero to fzero; suc to fsuc; pred to fpred)
open import Relation.Binary
  using (Setoid; Decidable)
open import NatInf
open import NatInf.Properties
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; subst; cong; sym; trans; subst‚ÇÇ)
open import Relation.Unary
  using (Pred; U; _‚àà_; U-Universal; _‚àâ_; ‚àÖ)
open import Level
  using () renaming (zero to lzero; suc to lsuc)
open import Data.Product
  using (_√ó_; _,_; ‚àÉ; proj‚ÇÅ; proj‚ÇÇ)
open import Functions
  using (min‚àû; max; sum)
open import Functions.Properties
  using (min‚àû-monotone; min‚àû-dec; x‚â§sum; sum-inc; sum-inc-strict; sum-limit; max-inc)
open import Data.Nat
  using (‚Ñï; zero; suc; _*_) renaming (_+_ to _+‚Ñï_; _‚â§_ to _‚â§‚Ñï_; _<_ to _<‚Ñï_; z‚â§n to z‚â§‚Ñïn;
        s‚â§s to s‚â§‚Ñïs; _‚âü_ to _‚âü‚Ñï_; _‚â§?_ to _‚â§‚Ñï?_)
open import Data.Nat.Properties
  using (+-suc; <‚áí‚â¢; ‚â§+‚â¢‚áí<; 1+n‚â∞n; *-identityÀ°; *-mono-‚â§; *-identity ≥)
  renaming (+-identity ≥ to +-id ≥‚Ñï; ‚â§-trans to ‚â§‚Ñï-trans; ‚â§-reflexive to ‚â§‚Ñï-reflexive; n‚â§1+n to n‚â§‚Ñï1+n; <‚áí‚â§ to <‚Ñï‚áí‚â§‚Ñï)
open import Data.Sum
  using(_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Nullary
  using (yes; no; ¬¨_; Dec)
open import Relation.Nullary.Negation
  using (contradiction)
open import Function
  using (_‚àò_)
open import Induction.WellFounded
  using (Acc; acc)
open import Induction.Nat
  using (<-well-founded)
open import Data.Fin.Subset
  using (Subset; ‚ä•; _‚à™_; ‚ä§; ‚ÅÖ_‚ÅÜ; _‚äÜ_; ‚ãÉ)
open import Data.Fin.Subset.Properties
  using (‚ä•‚äÜ; ‚äÜ‚ä§; p‚äÜp‚à™q; poset)
open import Data.List
  using (List; []; _‚à∑_; map; allFin; _++_; foldr; filter; length)
open import Algebra.FunctionProperties
  using (Op‚ÇÇ)
open import Relation.Nullary.Decidable
  using (‚åä_‚åã)
open import Data.Fin.Properties
  using (suc-injective)
open import Data.List.Properties
  using (length-filter)

open Setoid
  using (Carrier; _‚âà_)

module AllPairs.Convergence {n}(s : Schedule n)(x‚ÇÄ : Fin n ‚Üí (Fin n ‚Üí ‚Ñï‚àû))
  (C·µ¢,·µ¢ : ‚àÄ (i : Fin n) ‚Üí x‚ÇÄ i i ‚â° N 0) where

  open import AllPairs n
  open import AllPairs.Properties n
  open Schedule.Schedule s
  open import Iteration s all-pairs-comp
    using (async-iter)
  open import Iteration.Properties all-pairs-comp s as iter-prop
    using (y; cong‚âà)
    
  
  D‚ÇÄ : Fin n ‚Üí Pred (Fin n ‚Üí ‚Ñï‚àû) lzero
  D‚ÇÄ i = U

  D‚ÇÄ-subst : ‚àÄ i x y ‚Üí x ‚â°·µ£ y ‚Üí x ‚àà D‚ÇÄ i ‚Üí y ‚àà D‚ÇÄ i
  D‚ÇÄ-subst i _ z _ _ = U-Universal y

  x‚ÇÄ‚ààD‚ÇÄ : ‚àÄ i ‚Üí x‚ÇÄ i ‚àà D‚ÇÄ i
  x‚ÇÄ‚ààD‚ÇÄ i = U-Universal (x‚ÇÄ i)

  closed : ‚àÄ a ‚Üí (‚àÄ i ‚Üí a i ‚àà D‚ÇÄ i) ‚Üí (‚àÄ i ‚Üí f a i ‚àà D‚ÇÄ i)
  closed a a‚ààD‚ÇÄ i = U-Universal (f a i)

  f-monotone : ‚àÄ {a b} ‚Üí (‚àÄ i ‚Üí a i ‚àà D‚ÇÄ i) √ó (‚àÄ i ‚Üí b i ‚àà D‚ÇÄ i) ‚Üí
               (‚àÄ i ‚Üí [ i ] a i ‚âº b i) ‚Üí (‚àÄ i ‚Üí [ i ] f a i ‚âº f b i)
  f-monotone _ a‚âºb i j = min‚àû-monotone ((path-cost-monotone (Œª x y ‚Üí a‚âºb x y) i) j)


  y-dec : ‚àÄ K ‚Üí y x‚ÇÄ (suc K) ‚âº‚Çò y x‚ÇÄ K
  y-dec zero i j = subst (min‚àû (path-cost x‚ÇÄ i j) ‚â§_)
                (sym (trans (sym (+-identityÀ° (x‚ÇÄ i j))) (cong (_+ (x‚ÇÄ i j)) (sym (C·µ¢,·µ¢ i)))))
                (min‚àû-dec (path-cost x‚ÇÄ i j) i)
  y-dec (suc K) i = f-monotone
                ((Œª j ‚Üí U-Universal (y x‚ÇÄ (suc K))) , ((Œª j ‚Üí U-Universal (y x‚ÇÄ K))))
                (Œª j ‚Üí y-dec K j) i

  y-fixed : ‚àÄ t ‚Üí y x‚ÇÄ t ‚â°‚Çò y x‚ÇÄ (suc t) ‚Üí ‚àÄ k ‚Üí y x‚ÇÄ t ‚â°‚Çò y x‚ÇÄ (t +‚Ñï k)
  y-fixed t yt‚â°yst zero i j = subst (y x‚ÇÄ t i j ‚â°_)
      (cong (Œª x ‚Üí y x‚ÇÄ x i j) (sym (+-id ≥‚Ñï t))) refl
  y-fixed t yt‚â°yst (suc k) i j = trans (yt‚â°yst i j)
      (subst (y x‚ÇÄ (suc t) i j ‚â°_)
        (cong (Œª x ‚Üí y x‚ÇÄ x i j) (sym (+-suc t (k))))
        (y-fixed (suc t) (cong‚Çò yt‚â°yst) k i j))

  combine : ‚àÄ {a b c} {A : Set a} {B : Set b} {C : Set c}
         ‚Üí (A ‚Üí B ‚Üí C) ‚Üí List A ‚Üí List B ‚Üí List C
  combine f [] _ = []
  combine f (x ‚à∑ xs) ys = map (f x) ys ++ combine f xs ys

  allFinPairs : ‚àÄ n ‚Üí List (Fin n √ó Fin n)
  allFinPairs n = combine _,_ (allFin n) (allFin n)

  _‚äì·µ¢‚±º_[_] : ‚àÄ (x‚ÇÅ x‚ÇÇ : Fin n √ó Fin n) ‚Üí ‚Ñï ‚Üí Fin n √ó Fin n
  (i‚ÇÅ , j‚ÇÅ) ‚äì·µ¢‚±º (i‚ÇÇ , j‚ÇÇ) [ K ] with ‚äì-sel (y x‚ÇÄ K i‚ÇÅ j‚ÇÅ) (y x‚ÇÄ K i‚ÇÅ j‚ÇÅ)
  ... | inj‚ÇÅ _ = i‚ÇÅ , j‚ÇÅ
  ... | inj‚ÇÇ _ = i‚ÇÅ , j‚ÇÅ

  min-node : ‚Ñï ‚Üí List (Fin n √ó Fin n) ‚Üí Fin n √ó Fin n ‚Üí Fin n √ó Fin n
  min-node K nodes ‚ä§ = foldr _‚äì·µ¢‚±º_[ K ] ‚ä§ nodes

  _‚âü·µ¢_ : ‚àÄ {m} ‚Üí Decidable {A = Fin m} _‚â°_
  fzero ‚âü·µ¢ fzero = yes refl
  fzero ‚âü·µ¢ fsuc j = no (Œª ())
  fsuc i ‚âü·µ¢ fzero = no (Œª ())
  fsuc i ‚âü·µ¢ fsuc j with i ‚âü·µ¢ j
  ... | yes refl = yes refl
  ... | no ¬¨p = no (¬¨p ‚àò (Œª p ‚Üí suc-injective p))

  ‚â°‚Çô-dist : ‚àÄ {m}{i‚ÇÅ j‚ÇÅ i‚ÇÇ j‚ÇÇ : Fin m} ‚Üí (i‚ÇÅ , j‚ÇÅ) ‚â° (i‚ÇÇ , j‚ÇÇ) ‚Üí i‚ÇÅ ‚â° i‚ÇÇ √ó j‚ÇÅ ‚â° j‚ÇÇ
  ‚â°‚Çô-dist refl = refl , refl

  _‚âü‚Çô_ : Decidable {A = Fin n √ó Fin n} _‚â°_
  (i‚ÇÅ , j‚ÇÅ) ‚âü‚Çô (i‚ÇÇ , j‚ÇÇ) with i‚ÇÅ ‚âü·µ¢ i‚ÇÇ | j‚ÇÅ ‚âü·µ¢ j‚ÇÇ
  ... | yes p‚ÇÅ | yes p‚ÇÇ = yes (trans (cong (i‚ÇÅ ,_) p‚ÇÇ) (cong (_, j‚ÇÇ) p‚ÇÅ))
  ... | yes _ | no ¬¨p = no (¬¨p ‚àò Œª x ‚Üí proj‚ÇÇ (‚â°‚Çô-dist x))
  ... | no ¬¨p | _ = no (¬¨p ‚àò Œª x ‚Üí proj‚ÇÅ (‚â°‚Çô-dist x))

  loose-nodes : ‚Ñï ‚Üí List (Fin n √ó Fin n)
  loose-nodes zero = allFinPairs n
  loose-nodes (suc K) = filter
                   (Œª node ‚Üí ‚åä node ‚âü‚Çô min-node K (loose-nodes K) node ‚åã)
                   (loose-nodes K)

  loose-nodes-dec : ‚àÄ K ‚Üí length (loose-nodes (suc K)) ‚â§‚Ñï length (loose-nodes K)
  loose-nodes-dec K = length-filter
                  (Œª node ‚Üí ‚åä node ‚âü‚Çô min-node K (loose-nodes K) node ‚åã)
                  (loose-nodes K)

  {-y‚â¢‚áílength< : ‚àÄ t ‚Üí y x‚ÇÄ (suc t) ‚â¢‚Çò y x‚ÇÄ t ‚Üí
                length (loose-nodes (suc t)) <‚Ñï length (loose-nodes t)
  y‚â¢‚áílength< t yst‚â¢yt = {!!}

  isFixed : ‚àÄ K node ‚Üí Set
  isFixed K (i , j) = ‚àÄ t ‚Üí y x‚ÇÄ K i j ‚â° y x‚ÇÄ (K +‚Ñï t) i j

  fixed-nodes : ‚Ñï ‚Üí Fin n ‚Üí Subset n
  fixed-nodes zero i = ‚ä•
  fixed-nodes (suc K) i = ‚ãÉ ((fixed-nodes K i) ‚à∑ map {!!} (allFin n))

  Z : ‚àÄ K i j ‚Üí y x‚ÇÄ K i j ‚â¢ y x‚ÇÄ (suc K) i j ‚Üí ‚àÉ Œª k ‚Üí y x‚ÇÄ K i j < y x‚ÇÄ K i k
  Z K i j yK‚â¢ysK = {!!}-}





  private
    x‚ÇÄ-sum : ‚Ñï
    x‚ÇÄ-sum = suc (max {n} (Œª i ‚Üí max {n} (Œª j ‚Üí extract‚Ñï (x‚ÇÄ i j))) * n)
    -- x‚ÇÄ-sum = suc (sum {n} (Œª i ‚Üí sum {n} (Œª j ‚Üí extract‚Ñï (x‚ÇÄ i j))))

  extract : ‚àÄ {x} ‚Üí x ‚â¢ ‚àû ‚Üí ‚àÉ Œª m ‚Üí x ‚â° N m
  extract {‚àû} x‚â¢‚àû = contradiction refl x‚â¢‚àû
  extract {N x} x‚â¢‚àû = x , refl

  distance : ‚Ñï ‚Üí Fin n ‚Üí Fin n ‚Üí ‚Ñï
  distance t i j with y x‚ÇÄ t i j ‚âü ‚àû
  ... | yes ‚â°‚àû = x‚ÇÄ-sum 
  ... | no ‚â¢‚àû with extract ‚â¢‚àû
  ... | x , _ = x

  m‚â¢0‚áí1‚â§m : ‚àÄ {m} ‚Üí m ‚â¢ 0 ‚Üí 1 ‚â§‚Ñï m
  m‚â¢0‚áí1‚â§m {zero} m‚â¢0 = contradiction refl m‚â¢0
  m‚â¢0‚áí1‚â§m {suc m} m‚â¢0 = s‚â§‚Ñïs z‚â§‚Ñïn

  x‚ÇÄ‚â°‚àû‚äéx‚ÇÄ<x‚ÇÄ-sum : ‚àÄ i j ‚Üí x‚ÇÄ i j ‚â° ‚àû ‚äé x‚ÇÄ i j < N (x‚ÇÄ-sum)
  x‚ÇÄ‚â°‚àû‚äéx‚ÇÄ<x‚ÇÄ-sum i j with x‚ÇÄ i j ‚âü ‚àû
  ... | yes p = inj‚ÇÅ p
  ... | no ¬¨p with n ‚âü‚Ñï 0
  x‚ÇÄ‚â°‚àû‚äéx‚ÇÄ<x‚ÇÄ-sum () j | no ¬¨p | yes refl
  x‚ÇÄ‚â°‚àû‚äéx‚ÇÄ<x‚ÇÄ-sum i j | no ¬¨p | no n‚â¢0 with ‚â¢‚àû‚áí‚â°N ¬¨p
  ... | x , x‚ÇÄ‚â°x = inj‚ÇÇ (subst (_< N (x‚ÇÄ-sum)) (sym x‚ÇÄ‚â°x) (s‚â§s (‚â§‚Ñï‚áí‚â§
          (‚â§‚Ñï-trans
            (subst (_‚â§‚Ñï max {n} (Œª j‚ÇÅ ‚Üí extract‚Ñï (x‚ÇÄ i j‚ÇÅ)))
              (cong extract‚Ñï x‚ÇÄ‚â°x)
              (max-inc {n} (Œª j‚ÇÅ ‚Üí extract‚Ñï (x‚ÇÄ i j‚ÇÅ)) j))
            (‚â§‚Ñï-trans (max-inc {n} (Œª i‚ÇÅ ‚Üí max {n} (Œª j‚ÇÅ ‚Üí extract‚Ñï (x‚ÇÄ i‚ÇÅ j‚ÇÅ))) i)
            (‚â§‚Ñï-trans
              (‚â§‚Ñï-reflexive (sym (*-identity ≥ (max {n} (Œª i‚ÇÅ ‚Üí max {n} (Œª j‚ÇÅ ‚Üí extract‚Ñï (x‚ÇÄ i‚ÇÅ j‚ÇÅ)))))))
              (*-mono-‚â§ (‚â§‚Ñï-reflexive {max {n} (Œª i‚ÇÅ ‚Üí max {n} (Œª j‚ÇÅ ‚Üí extract‚Ñï (x‚ÇÄ i‚ÇÅ j‚ÇÅ)))} refl) (m‚â¢0‚áí1‚â§m n‚â¢0))))))))

  distance‚Çò : ‚Ñï ‚Üí ‚Ñï
  distance‚Çò t = sum {n} (Œª i ‚Üí sum {n} (Œª j ‚Üí distance t i j))

  Z : ‚àÄ t i j ‚Üí y x‚ÇÄ t i j ‚â¢ ‚àû ‚Üí y x‚ÇÄ t i j < N x‚ÇÄ-sum
  Z zero i j x‚ÇÄ‚â¢‚àû with x‚ÇÄ‚â°‚àû‚äéx‚ÇÄ<x‚ÇÄ-sum i j
  ... | inj‚ÇÅ x‚ÇÄ‚â°‚àû = contradiction x‚ÇÄ‚â°‚àû x‚ÇÄ‚â¢‚àû
  ... | inj‚ÇÇ <sum = <sum
  Z (suc t) i j yst‚â¢‚àû with y x‚ÇÄ t i j ‚âü ‚àû
  ... | yes yt‚â°‚àû = {!!}
  ... | no  yt‚â¢‚àû with extract yst‚â¢‚àû 
  ... | x , yst‚â°x  = subst (_< N x‚ÇÄ-sum) (sym yst‚â°x)
                  (‚â§+<‚áí< (subst (_‚â§ y x‚ÇÄ t i j) yst‚â°x (y-dec t i j)) (Z t i j yt‚â¢‚àû))

  dis-dec : ‚àÄ t i j ‚Üí distance (suc t) i j ‚â§‚Ñï distance t i j
  dis-dec t i j with y x‚ÇÄ (suc t) i j ‚âü ‚àû | y x‚ÇÄ t i j ‚âü ‚àû
  dis-dec t i j | yes p | yes p‚ÇÅ = ‚â§‚Ñï-reflexive refl
  dis-dec t i j | yes p | no ¬¨p with extract ¬¨p
  ... | x , yt‚â°x = contradiction (y-dec t i j) (subst (_‚â∞ y x‚ÇÄ t i j) (sym p)
                                 (subst (‚àû ‚â∞_) (sym yt‚â°x) ‚àû‚â∞))
  dis-dec t i j | no ¬¨p | yes p with extract ¬¨p
  ... | x , yst‚â°x = ‚â§‚áí‚â§‚Ñï (subst (_‚â§ N x‚ÇÄ-sum) yst‚â°x (<‚áí‚â§ (Z (suc t) i j ¬¨p)))
  dis-dec t i j | no ¬¨p | no ¬¨p‚ÇÅ with extract ¬¨p | extract ¬¨p‚ÇÅ
  ... | x‚ÇÅ , yst‚â°x‚ÇÅ | x‚ÇÇ , yt‚â°x‚ÇÇ = ‚â§‚áí‚â§‚Ñï (subst‚ÇÇ _‚â§_ yst‚â°x‚ÇÅ yt‚â°x‚ÇÇ (y-dec t i j))

  y‚â¢‚áídis‚â¢ : ‚àÄ t i j ‚Üí y x‚ÇÄ (suc t) i j ‚â¢ y x‚ÇÄ t i j ‚Üí distance (suc t) i j ‚â¢ distance t i j
  y‚â¢‚áídis‚â¢ t i j yst‚â¢yt with y x‚ÇÄ (suc t) i j ‚âü ‚àû | y x‚ÇÄ t i j ‚âü ‚àû
  y‚â¢‚áídis‚â¢ t i j yst‚â¢yt | yes p | yes p1 = contradiction (trans p (sym p1)) yst‚â¢yt
  y‚â¢‚áídis‚â¢ t i j yst‚â¢yt | yes p | no p1 with extract p1
  ... | x , yt‚â°x = ‚â¢‚áí‚â¢‚Ñï (<+‚â¢‚àû‚áí‚â¢ (subst (_< N x‚ÇÄ-sum) yt‚â°x (Z t i j p1))) ‚àò sym
  y‚â¢‚áídis‚â¢ t i j yst‚â¢yt | no p | yes p1 with extract p
  ... | x , yst‚â°x = ‚â¢‚áí‚â¢‚Ñï (<+‚â¢‚àû‚áí‚â¢ (subst (_< N x‚ÇÄ-sum) yst‚â°x (Z (suc t) i j p)))
  y‚â¢‚áídis‚â¢ t i j yst‚â¢yt | no p | no p1 with extract p | extract p1
  ... | x‚ÇÅ , yst‚â°x‚ÇÅ | x‚ÇÇ , yt‚â°x‚ÇÇ with x‚ÇÅ ‚âü‚Ñï x‚ÇÇ
  ... | yes refl = contradiction (trans yst‚â°x‚ÇÅ (sym yt‚â°x‚ÇÇ)) yst‚â¢yt
  ... | no  ¬¨p = ¬¨p

  dis‚Çò-dec : ‚àÄ t ‚Üí distance‚Çò (suc t) ‚â§‚Ñï distance‚Çò t
  dis‚Çò-dec t = sum-inc (Œª i ‚Üí sum-inc (Œª j ‚Üí dis-dec t i j))

  y‚â¢‚áídis< : ‚àÄ t ‚Üí y x‚ÇÄ (suc t) ‚â¢‚Çò y x‚ÇÄ t ‚Üí distance‚Çò (suc t) <‚Ñï distance‚Çò t
  y‚â¢‚áídis< t yst‚â¢yt with ‚â¢‚Çò-witness yst‚â¢yt
  ... | i' , j' , p = sum-inc-strict (Œª i ‚Üí sum-inc (Œª j ‚Üí dis-dec t i j))
                (i' , sum-inc-strict ((Œª j ‚Üí dis-dec t i' j))
                (j' , ‚â§+‚â¢‚áí< (dis-dec t i' j') (y‚â¢‚áídis‚â¢ t i' j' p)))

  y-fixed-point : ‚àÄ t ‚Üí Acc _<‚Ñï_ (distance‚Çò t) ‚Üí ‚àÉ Œª M ‚Üí ‚àÄ k ‚Üí y x‚ÇÄ M ‚â°‚Çò y x‚ÇÄ (M +‚Ñï k)
  y-fixed-point t (acc rs) with y x‚ÇÄ (suc t) ‚âü‚Çò y x‚ÇÄ t
  ... | yes p = t , y-fixed t (sym‚Çò p)
  ... | no ¬¨p = y-fixed-point (suc t) (rs (distance‚Çò (suc t)) (y‚â¢‚áídis< t ¬¨p))

  y-fixed-point-inc : ‚àÄ t ‚Üí (acc‚Çú : Acc _<‚Ñï_ (distance‚Çò t)) ‚Üí t ‚â§‚Ñï proj‚ÇÅ (y-fixed-point t acc‚Çú)
  y-fixed-point-inc t (acc rs) with y x‚ÇÄ (suc t) ‚âü‚Çò y x‚ÇÄ t
  ... | yes p = ‚â§‚Ñï-reflexive refl
  ... | no ¬¨p = ‚â§‚Ñï-trans (n‚â§‚Ñï1+n t) (y-fixed-point-inc (suc t)
              (rs (distance‚Çò (suc t)) (y‚â¢‚áídis< t ¬¨p)))

  y-fixed-point-acc-irrelevant : ‚àÄ t (a b : Acc _<‚Ñï_ (distance‚Çò t)) ‚Üí
                                 proj‚ÇÅ (y-fixed-point t a) ‚â° proj‚ÇÅ (y-fixed-point t b)
  y-fixed-point-acc-irrelevant t (acc a) (acc b) with y x‚ÇÄ (suc t) ‚âü‚Çò y x‚ÇÄ t
  ... | yes p = refl
  ... | no ¬¨p = y-fixed-point-acc-irrelevant (suc t)
                          (a (distance‚Çò (suc t)) (y‚â¢‚áídis< t ¬¨p))
                          (b (distance‚Çò (suc t)) (y‚â¢‚áídis< t ¬¨p))

  y-fixed-point-mono : ‚àÄ t ‚Üí (acc‚Çú : Acc _<‚Ñï_ (distance‚Çò t)) ‚Üí
                       proj‚ÇÅ (y-fixed-point t acc‚Çú) ‚â§‚Ñï proj‚ÇÅ (y-fixed-point (suc t)
                       (<-well-founded (distance‚Çò (suc t))))
  y-fixed-point-mono t (acc rs) with y x‚ÇÄ (suc t) ‚âü‚Çò y x‚ÇÄ t
  ... | yes p = ‚â§‚Ñï-trans (n‚â§‚Ñï1+n t) (y-fixed-point-inc (suc t)
                (<-well-founded (distance‚Çò (suc t))))
  ... | no ¬¨p = ‚â§‚Ñï-reflexive (y-fixed-point-acc-irrelevant (suc t)
                (rs (distance‚Çò (suc t)) (y‚â¢‚áídis< t ¬¨p))
                (<-well-founded (distance‚Çò (suc t))))

  y-fixed-first : ‚àÄ t ‚Üí proj‚ÇÅ (y-fixed-point 0 (<-well-founded (distance‚Çò 0))) ‚â§‚Ñï
                  proj‚ÇÅ (y-fixed-point t (<-well-founded (distance‚Çò t)))
  y-fixed-first zero = ‚â§‚Ñï-reflexive refl
  y-fixed-first (suc t) = ‚â§‚Ñï-trans (y-fixed-first t)
                     (y-fixed-point-mono t (<-well-founded (distance‚Çò t)))

  ‚â¢‚Çò‚áí‚àÉ‚â¢·µ£ : ‚àÄ t ‚Üí y x‚ÇÄ t ‚â¢‚Çò y x‚ÇÄ (suc t) ‚Üí ‚àÉ Œª i ‚Üí y x‚ÇÄ t i ‚â¢·µ£ y x‚ÇÄ (suc t) i
  ‚â¢‚Çò‚áí‚àÉ‚â¢·µ£ t yt‚â¢yst with ‚â¢‚Çò-witness yt‚â¢yst
  ... | i , j , p = i , ‚â¢·µ£-from-witness (j , p)

  y‚â°‚áídis‚â°t : ‚àÄ t ‚Üí y x‚ÇÄ (suc t) ‚â°‚Çò y x‚ÇÄ t ‚Üí
                   proj‚ÇÅ (y-fixed-point t (<-well-founded (distance‚Çò t))) ‚â° t
  y‚â°‚áídis‚â°t t yst‚â°yt with y x‚ÇÄ (suc t) ‚âü‚Çò y x‚ÇÄ t
  ... | yes p = refl
  ... | no ¬¨p = contradiction yst‚â°yt ¬¨p

  t<M‚áíyt‚â¢yst : ‚àÄ t ‚Üí t <‚Ñï proj‚ÇÅ (y-fixed-point 0 (<-well-founded (distance‚Çò 0))) ‚Üí
               ‚àÉ Œª i ‚Üí y x‚ÇÄ t i ‚â¢·µ£ y x‚ÇÄ (suc t) i
  t<M‚áíyt‚â¢yst t t<M with y x‚ÇÄ (suc t) ‚âü‚Çò y x‚ÇÄ t
  ... | yes p = contradiction (‚â§‚Ñï-trans t<M
        (subst ((proj‚ÇÅ (y-fixed-point 0 (<-well-founded (distance‚Çò 0))))‚â§‚Ñï_)
        (y‚â°‚áídis‚â°t t p) (y-fixed-first t))) 1+n‚â∞n
  ... | no ¬¨p = ‚â¢‚Çò‚áí‚àÉ‚â¢·µ£ t (¬¨p ‚àò sym‚Çò)

  y-converge : ‚àÉ Œª M ‚Üí ((‚àÄ t i ‚Üí ((y x‚ÇÄ M i) ‚â°·µ£ (y x‚ÇÄ (M +‚Ñï t) i))) √ó
               (‚àÄ t ‚Üí t <‚Ñï M ‚Üí ‚àÉ Œª i ‚Üí (y x‚ÇÄ t i) ‚â¢·µ£ (y x‚ÇÄ (suc t) i)))
  y-converge = proj‚ÇÅ (y-fixed-point 0 (<-well-founded (distance‚Çò 0))) ,
               proj‚ÇÇ (y-fixed-point 0 (<-well-founded (distance‚Çò 0))) ,
               t<M‚áíyt‚â¢yst

  open iter-prop.Proposition3 D‚ÇÄ x‚ÇÄ [_]_‚âº_ ‚âº-refl ‚âº-reflexive ‚âº-antisym ‚âº-trans x‚ÇÄ‚ààD‚ÇÄ D‚ÇÄ-subst
                                 closed y-converge y-dec f-monotone
       using (aco; x‚ÇÄ‚ààD0; Œæ)

  open iter-prop.Theorem1 {x‚ÇÄ} aco x‚ÇÄ‚ààD0

  convergence : ùïã
  convergence = proj‚ÇÅ theorem1

  result : Fin n ‚Üí Fin n ‚Üí ‚Ñï‚àû
  result = Œæ
