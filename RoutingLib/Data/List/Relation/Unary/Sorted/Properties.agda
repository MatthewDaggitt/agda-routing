open import Relation.Binary using (DecTotalOrder)

module RoutingLib.Data.List.Relation.Unary.Sorted.Properties
  {a ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} (order : DecTotalOrder a ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) where

open DecTotalOrder order renaming (Carrier to A)
open Eq using () renaming (setoid to S; trans to ‚âà-trans; sym to ‚âà-sym)

open import Data.Nat using (‚Ñï; z‚â§n; s‚â§s; suc; ‚â§-pred) renaming (_<_ to _<‚Ñï_; _‚â§_ to _‚â§‚Ñï_)
open import Data.Nat.Properties using (‚â§+‚â¢‚áí<; ‚â§‚áí‚âØ; <‚áí‚â¢; module ‚â§-Reasoning)
open import Data.Fin as Fin using (zero; suc; cast; to‚Ñï) renaming (_‚â§_ to _‚â§ùîΩ_; _<_ to _<ùîΩ_)
open import Data.Fin.Properties using (to‚Ñï-cast)
open import Data.List
open import Data.List.Relation.Unary.All as All using (All; []; _‚à∑_)
open import Data.List.Relation.Unary.Any as Any using (Any; here; there; index)
open import Data.List.Membership.Setoid.Properties using (‚àà-lookup)
open import Data.List.Relation.Unary.AllPairs using ([]; _‚à∑_)
import Data.List.Relation.Binary.Permutation.Setoid.Properties S as Perm‚Çö
open import Data.List.Properties
open import Data.List.Relation.Unary.All.Properties using (Any¬¨‚áí¬¨All)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ; uncurry‚Ä≤)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary hiding (Decidable)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; cong) renaming (setoid to ‚â°-setoid; refl to ‚â°-refl; sym to ‚â°-sym)
import Relation.Binary.Reasoning.Setoid as SetoidReasoning
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (Pred; Decidable)

open import RoutingLib.Data.List using (insert; count)
open import RoutingLib.Data.List.Relation.Unary.All.Properties as All‚Çö
open import RoutingLib.Data.List.Relation.Binary.Pointwise

open import RoutingLib.Data.List.Relation.Unary.Sorted totalOrder
open import Data.List.Membership.Setoid S using (_‚àà_)
open import Data.List.Relation.Binary.Permutation.Setoid S as Perm using (_‚Ü≠_)
open import RoutingLib.Data.List.Relation.Binary.Permutation.Setoid.Properties S
  using (xs‚Ü≠ys‚áí|xs|‚â°|ys|)
open import Data.List.Relation.Binary.Equality.Setoid S
open import RoutingLib.Data.List.Relation.Binary.Sublist.Setoid.Properties S using (length-mono-<; filter-‚äÇ)

open import RoutingLib.Relation.Binary.Construct.NonStrictToStrict.DecTotalOrder order

private

  lemma : ‚àÄ {x y xs} ‚Üí All (x ‚â§_) xs ‚Üí y ‚àà xs ‚Üí x ‚â§ y
  lemma [] ()
  lemma (px ‚à∑ xs) (here  x‚âàz)  = proj‚ÇÅ ‚â§-resp-‚âà (‚âà-sym x‚âàz) px
  lemma (px ‚à∑ xs) (there y‚ààxs) = lemma xs y‚ààxs
  
  lemma‚Ä≤ : ‚àÄ {p} {P : Pred A p} (P? : Decidable P) {v xs} ‚Üí v <‚Ñï count P? xs ‚Üí Any P xs
  lemma‚Ä≤ P? {_} {x ‚à∑ xs} 0< with P? x
  ... | yes px = here px 
  ... | no  _  = there (lemma‚Ä≤ P? 0<)
  
lookup-mono-‚â§ : ‚àÄ {xs} ‚Üí Sorted xs ‚Üí ‚àÄ {i j} ‚Üí i ‚â§ùîΩ j ‚Üí lookup xs i ‚â§ lookup xs j
lookup-mono-‚â§ {x ‚à∑ xs} (x‚â§xs ‚à∑ xs‚Üó) {zero}  {zero}  z‚â§n = refl
lookup-mono-‚â§ {x ‚à∑ xs} (x‚â§xs ‚à∑ xs‚Üó) {zero}  {suc j} z‚â§n = lemma x‚â§xs (‚àà-lookup S xs j)
lookup-mono-‚â§ {x ‚à∑ xs} (x‚â§xs ‚à∑ xs‚Üó) {suc i} {zero}  ()
lookup-mono-‚â§ {x ‚à∑ xs} (x‚â§xs ‚à∑ xs‚Üó) {suc i} {suc j} (s‚â§s i‚â§j) = lookup-mono-‚â§ xs‚Üó i‚â§j

index-mono-< : ‚àÄ {xs} ‚Üí Sorted xs ‚Üí ‚àÄ {x y} (x‚ààxs : x ‚àà xs) (y‚ààxs : y ‚àà xs) ‚Üí
               x < y ‚Üí index x‚ààxs <ùîΩ index y‚ààxs
index-mono-< (x‚â§xs ‚à∑ xs‚Üó) (here x‚âàz)   (here y‚âàz) (x‚â§y , x‚âây) = contradiction (‚âà-trans x‚âàz (‚âà-sym y‚âàz)) x‚âây
index-mono-< (x‚â§xs ‚à∑ xs‚Üó) (here x‚âàz)   (there y‚ààxs) (x‚â§y , x‚âây) = s‚â§s z‚â§n
index-mono-< (x‚â§xs ‚à∑ xs‚Üó) (there x‚ààxs) (here y‚âàz)    (x‚â§y , x‚âây) = contradiction (antisym x‚â§y (proj‚ÇÇ ‚â§-resp-‚âà (‚âà-sym y‚âàz) (lemma x‚â§xs x‚ààxs))) x‚âây
index-mono-< (x‚â§xs ‚à∑ xs‚Üó) (there x‚ààxs) (there y‚ààxs) x<y = s‚â§s (index-mono-< xs‚Üó x‚ààxs y‚ààxs x<y)

count-lookup2 : ‚àÄ {xs} ‚Üí Sorted xs ‚Üí ‚àÄ i ‚Üí to‚Ñï i <‚Ñï count (_‚â§? lookup xs i) xs
count-lookup2 {x ‚à∑ xs} (x‚â§xs ‚à∑ xs‚Üó) zero    with x ‚â§? x
... | yes _   = s‚â§s z‚â§n
... | no  x‚â∞x = contradiction refl x‚â∞x
count-lookup2 {x ‚à∑ xs} (x‚â§xs ‚à∑ xs‚Üó) (suc i) with x ‚â§? lookup xs i
... | yes _     = s‚â§s (count-lookup2 xs‚Üó i)
... | no  x‚â∞xs·µ¢ = contradiction (All.lookup x‚â§xs (‚àà-lookup (‚â°-setoid A) xs i)) x‚â∞xs·µ¢

  
count-lookup : ‚àÄ {xs} ‚Üí Sorted xs ‚Üí ‚àÄ {v i} ‚Üí to‚Ñï i <‚Ñï count (_‚â§? v) xs ‚Üí lookup xs i ‚â§ v
count-lookup {x ‚à∑ xs} (x‚â§xs ‚à∑ xs‚Üó) {v} {i} i‚â§v with x ‚â§? v
... | no  x‚â∞v = contradiction x‚â§xs (Any¬¨‚áí¬¨All (Any.map (Œª c‚â§v x‚â§c ‚Üí x‚â∞v (trans x‚â§c c‚â§v)) xs·µ¢‚â§v))
  where
  xs·µ¢‚â§v : Any (_‚â§ v) xs
  xs·µ¢‚â§v = lemma‚Ä≤ (_‚â§? v) i‚â§v
... | yes x‚â§v with i
...   | zero  = x‚â§v
...   | suc _ = count-lookup xs‚Üó (‚â§-pred i‚â§v)

------------------------------------------------------------------------

insert‚Üó‚Å∫ : ‚àÄ v {xs} ‚Üí Sorted xs ‚Üí Sorted (insert total v xs)
insert‚Üó‚Å∫ v {_}      []           = [] ‚à∑ []
insert‚Üó‚Å∫ v {x ‚à∑ xs} (x‚â§xs ‚à∑ xs‚Üó) with total v x
... | inj‚ÇÅ v‚â§x = (v‚â§x ‚à∑ All.map (trans v‚â§x) x‚â§xs) ‚à∑ x‚â§xs ‚à∑ xs‚Üó
... | inj‚ÇÇ x‚â§v = (All‚Çö.insert‚Å∫ total x‚â§v x‚â§xs) ‚à∑ insert‚Üó‚Å∫ v xs‚Üó

‚Üó‚Ü≠‚Üó‚áí‚âã : ‚àÄ {xs ys} ‚Üí xs ‚Ü≠ ys ‚Üí Sorted xs ‚Üí Sorted ys ‚Üí xs ‚âã ys
‚Üó‚Ü≠‚Üó‚áí‚âã {xs} {ys} xs‚Ü≠ys xs‚Üó ys‚Üó = lookup‚Åª (xs‚Ü≠ys‚áí|xs|‚â°|ys| xs‚Ü≠ys) lemma2
  where
  open ‚â§-Reasoning
  lemma1 : ‚àÄ {xs ys} ‚Üí xs ‚Ü≠ ys ‚Üí Sorted xs ‚Üí Sorted ys ‚Üí ‚àÄ {i j} ‚Üí to‚Ñï i ‚â° to‚Ñï j ‚Üí lookup xs i ‚â§ lookup ys j
  lemma1 {xs} {ys} xs‚Ü≠ys xs‚Üó ys‚Üó {i} {j} i‚â°j = count-lookup xs‚Üó (begin-strict
    to‚Ñï i                      ‚â°‚ü® i‚â°j ‚ü©
    to‚Ñï j                      <‚ü® count-lookup2 ys‚Üó j ‚ü©
    count (_‚â§? lookup ys j) ys ‚â°‚ü® xs‚Ü≠ys‚áí|xs|‚â°|ys| (Perm‚Çö.filter‚Å∫ (_‚â§? lookup ys j) ‚â§-respÀ°-‚âà (Perm.‚Ü≠-sym xs‚Ü≠ys)) ‚ü©
    count (_‚â§? lookup ys j) xs ‚àé)
  
  lemma2 : ‚àÄ i ‚Üí lookup xs i ‚âà lookup ys (cast _ i)
  lemma2 i = antisym (lemma1 xs‚Ü≠ys xs‚Üó ys‚Üó (‚â°-sym (to‚Ñï-cast _ i))) (lemma1 (Perm.‚Ü≠-sym xs‚Ü≠ys) ys‚Üó xs‚Üó (to‚Ñï-cast _ i))
