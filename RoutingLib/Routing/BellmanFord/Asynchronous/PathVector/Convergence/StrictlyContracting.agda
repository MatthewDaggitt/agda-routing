open import Data.Fin.Subset using (Subset; _‚àà_)
open import Data.Fin.Subset.Properties using (_‚àà?_)
open import Data.Nat hiding (_‚âü_)
open import Data.Nat.Properties hiding (_‚âü_; module ‚â§-Reasoning)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ)
open import Function using (_‚àò_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; sym)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)

open import RoutingLib.Data.Table using (max)
open import RoutingLib.Data.Table.Properties using (max[t]<x; x‚â§max[t])
open import RoutingLib.Data.Nat.Properties using (module ‚â§-Reasoning; n‚â¢0‚áí0<n)
import RoutingLib.Function.Metric.Construct.MaxLift as MaxLift
import RoutingLib.Function.Metric as Metric

open import RoutingLib.Routing.Algebra
open import RoutingLib.Routing.Algebra.CertifiedPathAlgebra
import RoutingLib.Routing.Algebra.RoutingAlgebra.Properties as RoutingAlgebraProperties
import RoutingLib.Routing.Algebra.CertifiedPathAlgebra.Properties as PathAlgebraProperties
import RoutingLib.Routing.Algebra.CertifiedPathAlgebra.Consistency as Consistency
open import RoutingLib.Routing.Model using (AdjacencyMatrix)
open import RoutingLib.Iteration.Asynchronous.Schedule using (Epoch)
open import RoutingLib.Iteration.Asynchronous.Dynamic.Convergence.Conditions

import RoutingLib.Routing.BellmanFord.Asynchronous as AsyncBellmanFord
import RoutingLib.Routing.BellmanFord.Asynchronous.DistanceVector.Properties as AsyncBellmanFordProperties
import RoutingLib.Routing.BellmanFord.Asynchronous.PathVector.Convergence.Metrics as Metrics
import RoutingLib.Routing.BellmanFord.Asynchronous.PathVector.Convergence.Properties as MetricProperties
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Properties as SyncBellmanFordProperties
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Convergence.Metrics as SyncMetrics
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Convergence.Properties as SyncMetricProperties
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Convergence.StrictlyContracting as SyncStrictlyContracting

module RoutingLib.Routing.BellmanFord.Asynchronous.PathVector.Convergence.StrictlyContracting
  {a b ‚Ñì n} {algebra : RawRoutingAlgebra a b ‚Ñì}
  (isPathAlgebra : IsCertifiedPathAlgebra algebra n)
  (isStrictlyIncreasing : IsStrictlyIncreasing algebra)
  (network : Epoch ‚Üí AdjacencyMatrix algebra n)
  (1‚â§n : 1 ‚â§ n)
  where

open IsCertifiedPathAlgebra isPathAlgebra
open AsyncBellmanFord algebra network
open AsyncBellmanFordProperties algebra isRoutingAlgebra network

module _ (e : Epoch) (p : Subset n) where

  open Metrics isPathAlgebra (A‚Çú e p) p public
  open MetricProperties isPathAlgebra (A‚Çú e p) 1‚â§n p public
  open PathAlgebraProperties isPathAlgebra
  open SyncBellmanFordProperties algebra isPathAlgebra (A‚Çú e p)
  open SyncStrictlyContracting isPathAlgebra isStrictlyIncreasing (A‚Çú e p) 1‚â§n
  
  private
    œÉ : RoutingMatrix ‚Üí RoutingMatrix
    œÉ = œÉ‚Çú e p

------------------------------------------------------------------------
-- d‚Çú is contracting in the right ways

  d‚ÇúœÉX·µ¢œÉ¬≤X·µ¢<DÀ¢XœÉX : ‚àÄ {X} ‚Üí WellFormed p X ‚Üí œÉ X ‚ââ‚Çò[ p ] X ‚Üí
                ‚àÄ i ‚Üí d‚Çú·∂ú i (œÉ X i) (œÉ (œÉ X) i) < DÀ¢ X (œÉ X)
  d‚ÇúœÉX·µ¢œÉ¬≤X·µ¢<DÀ¢XœÉX {X} wfX œÉX‚ââX i with i ‚àà? p
  ... | no  _ = Y‚ââ‚ÇöX‚áí0<DÀ¢XY œÉX‚ââX
  ... | yes _ = max[t]<x 0<DÀ¢XY (d·µ£-strContrOrbits 0<DÀ¢XY (d‚â§DÀ¢-wf wfX (œÉ‚Çú-inactive e X)) i)
    where 0<DÀ¢XY = Y‚ââ‚ÇöX‚áí0<DÀ¢XY œÉX‚ââX
    
  d‚ÇúœÉX·µ¢œÉY·µ¢<DÀ¢XY : ‚àÄ {X Y} ‚Üí WellFormed p X ‚Üí WellFormed p Y ‚Üí Y ‚ââ‚Çò[ p ] X ‚Üí
                 ùë™‚Çò X ‚Üí ‚àÄ i ‚Üí d‚Çú·∂ú i (œÉ X i) (œÉ Y i) < DÀ¢ X Y
  d‚ÇúœÉX·µ¢œÉY·µ¢<DÀ¢XY {X} {Y} wfX wfY Y‚ââX X·∂ú i with i ‚àà? p
  ... | no  _ = Y‚ââ‚ÇöX‚áí0<DÀ¢XY Y‚ââX
  ... | yes _ = max[t]<x 0<DÀ¢XY (d·µ£-strContrOnùë™ X·∂ú 0<DÀ¢XY (d‚â§DÀ¢-wf wfX wfY) i)
    where 0<DÀ¢XY = Y‚ââ‚ÇöX‚áí0<DÀ¢XY Y‚ââX

------------------------------------------------------------------------
-- DÀ¢ is contracting in the right ways

  œÉ‚Çú-strContrOnOrbits : ‚àÄ {X} ‚Üí WellFormed p X ‚Üí (œÉ X) ‚ââ‚Çò[ p ] X ‚Üí
                       DÀ¢ (œÉ X) (œÉ (œÉ X)) < DÀ¢ X (œÉ X)
  œÉ‚Çú-strContrOnOrbits {X} wfX œÉX‚ââX = max[t]<x (Y‚ââ‚ÇöX‚áí0<DÀ¢XY œÉX‚ââX) (d‚ÇúœÉX·µ¢œÉ¬≤X·µ¢<DÀ¢XœÉX wfX œÉX‚ââX)
  
  œÉ‚Çú-strContrOnùë™ : ‚àÄ {X Y} ‚Üí WellFormed p X ‚Üí WellFormed p Y ‚Üí Y ‚ââ‚Çò[ p ] X ‚Üí ùë™‚Çò X ‚Üí
                   DÀ¢ (œÉ X) (œÉ Y) < DÀ¢ X Y
  œÉ‚Çú-strContrOnùë™ wfX wfY Y‚ââX X·∂ú = max[t]<x (Y‚ââ‚ÇöX‚áí0<DÀ¢XY Y‚ââX) (d‚ÇúœÉX·µ¢œÉY·µ¢<DÀ¢XY wfX wfY Y‚ââX X·∂ú)

  œÉ‚Çú-strContrOnFP : ‚àÄ {X} ‚Üí WellFormed p X ‚Üí ‚àÄ {X*} ‚Üí œÉ X* ‚âà‚Çò X* ‚Üí X ‚ââ‚Çò[ p ] X* ‚Üí
                   DÀ¢ X* (œÉ X) < DÀ¢ X* X
  œÉ‚Çú-strContrOnFP {X} wfX {X*} œÉX*‚âàX* X‚ââX* = begin
    DÀ¢ X*     (œÉ X) ‚â°‚ü® DÀ¢-cong (‚âà‚Çò-sym œÉX*‚âàX*) (‚âà‚Çò-refl {x = œÉ‚Çú e p X}) ‚ü©
    DÀ¢ (œÉ X*) (œÉ X) <‚ü® œÉ‚Çú-strContrOnùë™ (X*-wf e p œÉX*‚âàX*) wfX X‚ââX* (fixedPoint·∂ú œÉX*‚âàX*) ‚ü©
    DÀ¢ X*     X     ‚àé
    where open ‚â§-Reasoning
 
ultrametricConditions : UltrametricConditions Œ¥‚à•
ultrametricConditions = record
  { d·µ¢                 = Œª e p ‚Üí d‚Çú e p
  ; d·µ¢-cong            = Œª e p ‚Üí d‚Çú-cong e p
  ; x‚âày‚áíd·µ¢‚â°0           = Œª e p ‚Üí x‚âày‚áíd‚Çú‚â°0 e p
  ; d·µ¢‚â°0‚áíx‚âày           = Œª e p ‚Üí d‚Çú‚â°0‚áíx‚âày e p
  ; d·µ¢-bounded         = Œª e p ‚Üí proj‚ÇÅ (d‚Çú-bounded e p) , proj‚ÇÇ (d‚Çú-bounded e p)
  ; element            = I
  
  ; F-strContrOnOrbits = œÉ‚Çú-strContrOnOrbits
  ; F-strContrOnFP     = œÉ‚Çú-strContrOnFP
  ; F-inactive         = œÉ‚Çú-inactive
  }
