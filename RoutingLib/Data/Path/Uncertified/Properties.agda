

module RoutingLib.Data.Path.Uncertified.Properties where

open import Data.List.Any using (any; there; here)
open import Data.Maybe using (just; nothing)
open import Data.Maybe.Properties using (just-injective)
open import Data.Nat
open import Data.Nat.Properties
open import Data.Fin.Properties using (pigeonhole)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Product using (_,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ)
open import Level using (0‚Ñì)
open import Function using (_‚àò_; flip)
open import Data.Product.Properties using (‚â°-dec)
open import Relation.Binary hiding (NonEmpty)
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary.Negation using (¬¨?)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)

open import RoutingLib.Data.Nat.Properties using (<‚áí‚â§suc)
import RoutingLib.Relation.Binary.Construct.NonStrictToStrict.DecTotalOrder
  as ToStrict

open import RoutingLib.Data.Path.Uncertified

open ‚â°-Reasoning

----------------------------------------------------------------------------
-- Edges

_‚âü‚Çë_ : Decidable {A = Edge} _‚â°_
_‚âü‚Çë_ = ‚â°-dec _‚âü_ _‚âü_

ùïç‚Çõ : Setoid _ _
ùïç‚Çõ = setoid Vertex

ùîº‚Çõ : Setoid _ _
ùîº‚Çõ = setoid Edge

----------------------------------------------------------------------------
-- Linking

_‚áø?_ : Decidable _‚áø_
(i , j) ‚áø? [] with i ‚âü j
... | yes i‚â°j = no  Œª{(start i‚â¢j) ‚Üí i‚â¢j i‚â°j}
... | no  i‚â¢j = yes (start i‚â¢j)
(i , j) ‚áø? ((k , l) ‚à∑ p) with i ‚âü j | j ‚âü k
... | yes i‚â°j | _        = no Œª{(continue i‚â¢j) ‚Üí i‚â¢j i‚â°j}
... | no  _   | no  j‚â¢k  = no Œª{(continue _) ‚Üí j‚â¢k refl}
... | no  i‚â¢j | yes refl = yes (continue i‚â¢j)

‚áø-resp-‚âà‚Çö : ‚àÄ {e} ‚Üí (e ‚áø_) Respects _‚âà‚Çö_
‚áø-resp-‚âà‚Çö refl e‚áøp = e‚áøp

‚áø-resp-p‚ÇÄ : ‚àÄ {e p q} ‚Üí source p ‚â° source q ‚Üí e ‚áø p ‚Üí e ‚áø q
‚áø-resp-p‚ÇÄ {e} {[]}    {[]}    eq   e‚áøp            = e‚áøp
‚áø-resp-p‚ÇÄ {e} {[]}    {y ‚à∑ q} ()   e‚áøp
‚áø-resp-p‚ÇÄ {e} {x ‚à∑ p} {[]}    ()   e‚áøp
‚áø-resp-p‚ÇÄ {e} {_ ‚à∑ p} {_ ‚à∑ q} refl (continue i‚â¢j) = continue i‚â¢j

ij‚áøp‚áíi‚â¢j : ‚àÄ {i j p} ‚Üí (i , j) ‚áø p ‚Üí i ‚â¢ j
ij‚áøp‚áíi‚â¢j (start    i‚â¢j) = i‚â¢j
ij‚áøp‚áíi‚â¢j (continue i‚â¢j) = i‚â¢j

‚áø-source‚Å∫ : ‚àÄ {i j p} ‚Üí i ‚â¢ j ‚Üí source p ‚â° just j ‚Üí (i , j) ‚áø p
‚áø-source‚Å∫ {p = []}    i‚â¢j ()
‚áø-source‚Å∫ {p = x ‚à∑ p} i‚â¢j refl = continue i‚â¢j

p‚ÇÄ‚â°n‚áíp‚â°[] : ‚àÄ {p} ‚Üí source p ‚â° nothing ‚Üí p ‚â° []
p‚ÇÄ‚â°n‚áíp‚â°[] {[]}    refl = refl
p‚ÇÄ‚â°n‚áíp‚â°[] {x ‚à∑ p} ()

----------------------------------------------------------------------------
-- Membership

_‚àà‚Çë?_ : Decidable _‚àà‚Çë_
k ‚àà‚Çë? (i , j) with k ‚âü i | k ‚âü j
... | yes refl | _        = yes left
... | _        | yes refl = yes right
... | no  k‚â¢i  | no  k‚â¢j  = no Œª
  { left  ‚Üí k‚â¢i refl
  ; right ‚Üí k‚â¢j refl
  }

_‚àà‚Çö?_ : Decidable _‚àà‚Çö_
k ‚àà‚Çö? p = any (k ‚àà‚Çë?_) p

‚àâ‚Çö-resp-‚âà‚Çö : ‚àÄ {k} ‚Üí (k ‚àâ‚Çö_) Respects _‚â°_
‚àâ‚Çö-resp-‚âà‚Çö refl k‚àâp = k‚àâp

‚àà-source : ‚àÄ {p i} ‚Üí source p ‚â° just i ‚Üí i ‚àà‚Çö p
‚àà-source {[]}    ()
‚àà-source {x ‚à∑ p} refl = here left

----------------------------------------------------------------------------
-- Equality

p‚ââi‚à∑p : ‚àÄ {e p} ‚Üí ¬¨ (p ‚âà‚Çö e ‚à∑ p)
p‚ââi‚à∑p {p}    ()

_‚âü‚Çö_ : Decidable _‚âà‚Çö_
[]      ‚âü‚Çö []      = yes refl
[]      ‚âü‚Çö (k ‚à∑ q) = no Œª()
(i ‚à∑ p) ‚âü‚Çö []      = no Œª()
(i ‚à∑ p) ‚âü‚Çö (k ‚à∑ q) with i ‚âü‚Çë k | p ‚âü‚Çö q
... | no  i‚â¢k  | _        = no (Œª{refl ‚Üí i‚â¢k refl})
... | _        | no  p‚â¢q  = no (Œª{refl ‚Üí p‚â¢q refl})
... | yes refl | yes refl = yes refl

‚â°‚Çö-isDecEquivalence : IsDecEquivalence _‚âà‚Çö_
‚â°‚Çö-isDecEquivalence = record
  { isEquivalence = isEquivalence
  ; _‚âü_           = _‚âü‚Çö_
  }

‚Ñô‚Çõ : Setoid 0‚Ñì 0‚Ñì
‚Ñô‚Çõ = setoid Path

‚Ñô‚Çõ? : DecSetoid 0‚Ñì 0‚Ñì
‚Ñô‚Çõ? = record { isDecEquivalence = ‚â°‚Çö-isDecEquivalence }

----------------------------------------------------------------------------
-- Lexicographic order

‚â§‚Çó‚Çë‚Çì-refl : Reflexive _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-refl {[]}    = stop
‚â§‚Çó‚Çë‚Çì-refl {i ‚à∑ p} = step refl refl ‚â§‚Çó‚Çë‚Çì-refl

‚â§‚Çó‚Çë‚Çì-reflexive : _‚â°_ ‚áí _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-reflexive refl = ‚â§‚Çó‚Çë‚Çì-refl

‚â§‚Çó‚Çë‚Çì-total : Total _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-total p [] = inj‚ÇÇ stop
‚â§‚Çó‚Çë‚Çì-total [] q = inj‚ÇÅ stop
‚â§‚Çó‚Çë‚Çì-total ((i , j) ‚à∑ p) ((l , k) ‚à∑ q) with <-cmp i l
... | tri< i<l _ _ = inj‚ÇÅ (here‚ÇÅ i<l)
... | tri> _ _ l<i = inj‚ÇÇ (here‚ÇÅ l<i)
... | tri‚âà _ i‚â°l _ with <-cmp j k
...   | tri< j<k _ _ = inj‚ÇÅ (here‚ÇÇ i‚â°l j<k)
...   | tri> _ _ j<k = inj‚ÇÇ (here‚ÇÇ (sym i‚â°l) j<k)
...   | tri‚âà _ j‚â°k _ with ‚â§‚Çó‚Çë‚Çì-total p q
...     | inj‚ÇÅ p‚â§q = inj‚ÇÅ (step i‚â°l j‚â°k p‚â§q)
...     | inj‚ÇÇ q‚â§p = inj‚ÇÇ (step (sym i‚â°l) (sym j‚â°k) q‚â§p)

‚â§‚Çó‚Çë‚Çì-trans : Transitive _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-trans stop                  _                     = stop
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (here‚ÇÅ j<k)           = here‚ÇÅ (<-trans i<j j<k)
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (here‚ÇÇ refl j<k)      = here‚ÇÅ i<j
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (step  refl refl q‚â§r) = here‚ÇÅ i<j
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (here‚ÇÅ j<k)           = here‚ÇÅ j<k
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (here‚ÇÇ refl j<k)      = here‚ÇÇ refl (<-trans i<j j<k)
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (step  refl refl q‚â§r) = here‚ÇÇ refl i<j
‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (here‚ÇÅ j<k)           = here‚ÇÅ j<k
‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (here‚ÇÇ refl j<k)      = here‚ÇÇ refl j<k
‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (step  refl refl q‚â§r) = step refl refl (‚â§‚Çó‚Çë‚Çì-trans p‚â§q q‚â§r)

‚â§‚Çó‚Çë‚Çì-antisym : Antisymmetric _‚âà‚Çö_ _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-antisym stop                  stop                  = refl
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (here‚ÇÅ j<i)           = contradiction i<j (<‚áí‚âØ j<i)
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (here‚ÇÇ refl j<i)      = contradiction i<j 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (step  refl refl p‚â§q) = contradiction i<j 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (here‚ÇÅ j<i)           = contradiction j<i 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (here‚ÇÇ refl j<i)      = contradiction i<j (<‚áí‚âØ j<i)
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (step  refl refl p‚â§q) = contradiction i<j 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl i<j) (here‚ÇÅ j<i)           = contradiction j<i 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl _)   (here‚ÇÇ _ j<i)         = contradiction j<i 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl p‚â§q) (step refl refl q‚â§p)  = cong (_ ‚à∑_) (‚â§‚Çó‚Çë‚Çì-antisym p‚â§q q‚â§p)

‚â§‚Çó‚Çë‚Çì-minimum : Minimum _‚â§‚Çó‚Çë‚Çì_ []
‚â§‚Çó‚Çë‚Çì-minimum x = stop

_‚â§‚Çó‚Çë‚Çì?_ : Decidable _‚â§‚Çó‚Çë‚Çì_
[] ‚â§‚Çó‚Çë‚Çì? _ = yes stop
(i ‚à∑ p) ‚â§‚Çó‚Çë‚Çì? []          = no Œª()
((i , j) ‚à∑ p) ‚â§‚Çó‚Çë‚Çì? ((k , l) ‚à∑ q) with <-cmp i k | <-cmp j l | p ‚â§‚Çó‚Çë‚Çì? q
... | tri< i<k _   _ | _              | _       = yes (here‚ÇÅ i<k)
... | tri> i‚âÆk i‚â¢k _ | _              | _       = no Œª
  { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
  ; (here‚ÇÇ i‚â°k _)   ‚Üí i‚â¢k i‚â°k
  ; (step  i‚â°k _ _) ‚Üí i‚â¢k i‚â°k
  }
... | tri‚âà _   i‚â°k _ | tri< j<l _   _ | _       = yes (here‚ÇÇ i‚â°k j<l)
... | tri‚âà i‚âÆk _   _ | tri> j‚âÆl j‚â¢l _ | _       = no Œª
  { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
  ; (here‚ÇÇ _ j<l)   ‚Üí j‚âÆl j<l
  ; (step  _ j‚â°l _) ‚Üí j‚â¢l j‚â°l
  }
... | tri‚âà i‚âÆk _   _ | tri‚âà j‚âÆl _ _   | no  p‚â∞q = no Œª
  { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
  ; (here‚ÇÇ _ j<l)   ‚Üí j‚âÆl j<l
  ; (step  _ _ p‚â§q) ‚Üí p‚â∞q p‚â§q
  }
... | tri‚âà _   i‚â°k _ | tri‚âà _ j‚â°l _   | yes p‚â§q = yes (step i‚â°k j‚â°l p‚â§q)

‚â§‚Çó‚Çë‚Çì-isTotalOrder : IsTotalOrder _‚â°_ _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-isTotalOrder = record
  { isPartialOrder = record
    { isPreorder = record
      { isEquivalence = isEquivalence
      ; reflexive     = ‚â§‚Çó‚Çë‚Çì-reflexive
      ; trans         = ‚â§‚Çó‚Çë‚Çì-trans
      }
    ; antisym    = ‚â§‚Çó‚Çë‚Çì-antisym
    }
  ; total        = ‚â§‚Çó‚Çë‚Çì-total
  }

‚â§‚Çó‚Çë‚Çì-isDecTotalOrder : IsDecTotalOrder _‚â°_ _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-isDecTotalOrder = record
  { isTotalOrder = ‚â§‚Çó‚Çë‚Çì-isTotalOrder
  ; _‚âü_          = _‚âü‚Çö_
  ; _‚â§?_         = _‚â§‚Çó‚Çë‚Çì?_
  }

‚â§‚Çó‚Çë‚Çì-totalOrder : TotalOrder _ _ _
‚â§‚Çó‚Çë‚Çì-totalOrder = record
  { isTotalOrder = ‚â§‚Çó‚Çë‚Çì-isTotalOrder
  }

‚â§‚Çó‚Çë‚Çì-decTotalOrder : DecTotalOrder _ _ _
‚â§‚Çó‚Çë‚Çì-decTotalOrder = record
  { isDecTotalOrder = ‚â§‚Çó‚Çë‚Çì-isDecTotalOrder
  }

open ToStrict ‚â§‚Çó‚Çë‚Çì-decTotalOrder public
  using ()
  renaming
  ( <-trans   to <‚Çó‚Çë‚Çì-trans
  ; <-asym    to <‚Çó‚Çë‚Çì-asym
  ; <-irrefl  to <‚Çó‚Çë‚Çì-irrefl
  ; <-respÀ°-‚âà to <‚Çó‚Çë‚Çì-respÀ°-‚âà‚Çö
  ; <-resp ≥-‚âà to <‚Çó‚Çë‚Çì-resp ≥-‚âà‚Çö
  ; <-cmp     to <‚Çó‚Çë‚Çì-cmp
  ; <‚áí‚â±       to <‚Çó‚Çë‚Çì‚áí‚â±‚Çó‚Çë‚Çì
  ; <‚áí‚â§       to <‚Çó‚Çë‚Çì‚áí‚â§‚Çó‚Çë‚Çì
  )

p‚âÆ‚Çó‚Çë‚Çì[] : ‚àÄ {p} ‚Üí ¬¨ (p <‚Çó‚Çë‚Çì [])
p‚âÆ‚Çó‚Çë‚Çì[] {[]}    (_ , []‚ââ[]) = []‚ââ[] refl
p‚âÆ‚Çó‚Çë‚Çì[] {e ‚à∑ p} (() , _)

‚à∑-mono-‚â§‚Çó‚Çë‚Çì : ‚àÄ e {p q} ‚Üí p ‚â§‚Çó‚Çë‚Çì q ‚Üí (e ‚à∑ p) ‚â§‚Çó‚Çë‚Çì (e ‚à∑ q)
‚à∑-mono-‚â§‚Çó‚Çë‚Çì e {p} {q} p‚â§q =  step refl refl p‚â§q

----------------------------------------------------------------------------
-- length

|p|‚â¢|q|‚áíp‚ââq : ‚àÄ {p q} ‚Üí length p ‚â¢ length q ‚Üí p ‚ââ‚Çö q
|p|‚â¢|q|‚áíp‚ââq {[]}    {[]}    0‚â¢0     = contradiction refl 0‚â¢0
|p|‚â¢|q|‚áíp‚ââq {[]}    {y ‚à∑ q} |p|‚â¢|q| = Œª()
|p|‚â¢|q|‚áíp‚ââq {x ‚à∑ p} {[]}    |p|‚â¢|q| = Œª()
|p|‚â¢|q|‚áíp‚ââq {x ‚à∑ p} {y ‚à∑ q} |p|‚â¢|q| = Œª { refl ‚Üí |p|‚â¢|q| refl }

----------------------------------------------------------------------------
-- inflate

inflate-length : ‚àÄ p n ‚Üí length p ‚â§ length (inflate p n)
inflate-length p       zero    = ‚â§-refl
inflate-length []      (suc n) = ‚â§-refl
inflate-length (x ‚à∑ p) (suc n) = ‚â§-trans (inflate-length (x ‚à∑ p) n) (n‚â§1+n _)

inflate-extract : ‚àÄ p n {i} ‚Üí source p ‚â° just i ‚Üí
                  inflate ((i , i) ‚à∑ p) n ‚â° (i , i) ‚à∑ inflate p n
inflate-extract p       zero    p‚ÇÄ‚â°i = refl
inflate-extract []      (suc n) ()
inflate-extract (x ‚à∑ p) (suc n) refl = cong (_ ‚à∑_) (inflate-extract (x ‚à∑ p) n refl)

inflate-source : ‚àÄ p n {i} ‚Üí source p ‚â° just i ‚Üí
                 source (inflate p n) ‚â° just i
inflate-source p       zero    eq   = eq
inflate-source []      (suc n) ()
inflate-source (x ‚à∑ p) (suc n) refl = refl

inflate-inflate : ‚àÄ p m n ‚Üí inflate (inflate p m) n ‚â° inflate p (m + n)
inflate-inflate p             zero    n       = refl
inflate-inflate []            (suc m) zero    = refl
inflate-inflate []            (suc m) (suc n) = refl
inflate-inflate ((i , j) ‚à∑ p) (suc m) n       = begin
  inflate ((i , i) ‚à∑ inflate ((i , j) ‚à∑ p) m) n ‚â°‚ü® inflate-extract _ n (inflate-source (((i , j) ‚à∑ p)) m refl) ‚ü©
  (i , i) ‚à∑ inflate (inflate ((i , j) ‚à∑ p) m) n ‚â°‚ü® cong ((i , i) ‚à∑_) (inflate-inflate _ m n) ‚ü©
  (i , i) ‚à∑ inflate ((i , j) ‚à∑ p) (m + n)       ‚àé
  where open ‚â°-Reasoning

----------------------------------------------------------------------------
-- deflate

p‚â°[]‚áídeflate[p]‚â°[] : ‚àÄ {p} ‚Üí p ‚â° [] ‚Üí deflate p ‚â° []
p‚â°[]‚áídeflate[p]‚â°[] refl = refl

deflate-source : ‚àÄ p ‚Üí source (deflate p) ‚â° source p
deflate-source []                      = refl
deflate-source ((i , j) ‚à∑ [])          = refl
deflate-source ((i , j) ‚à∑ (k , l) ‚à∑ p) with i ‚âü j | j ‚âü k
... | no  _    | _        = refl
... | yes _    | no  _    = refl
... | yes refl | yes refl = deflate-source ((i , l) ‚à∑ p)

deflate-remove : ‚àÄ p {i j} ‚Üí i ‚â° j ‚Üí just j ‚â° source p ‚Üí deflate ((i , j) ‚à∑ p) ‚â° deflate p
deflate-remove []            refl ()
deflate-remove ((i , j) ‚à∑ p) refl refl with i ‚âü i
... | no i‚â¢i   = contradiction refl i‚â¢i
... | yes refl = refl

deflate-skip : ‚àÄ p {i j} ‚Üí i ‚â¢ j ‚äé just j ‚â¢ source p ‚Üí
               deflate ((i , j) ‚à∑ p) ‚â° (i , j) ‚à∑ deflate p
deflate-skip []            {i} {j} eq = refl
deflate-skip ((k , l) ‚à∑ p) {i} {j} eq with i ‚âü j | j ‚âü k
... | no  _    | _        = refl
... | yes _    | no  _    = refl
... | yes refl | yes refl = contradiction eq Œª
  { (inj‚ÇÅ k‚â¢k)   ‚Üí k‚â¢k refl
  ; (inj‚ÇÇ jk‚â¢jk) ‚Üí jk‚â¢jk (cong just refl)
  }

deflate-inflate : ‚àÄ p n ‚Üí deflate (inflate p n) ‚â° deflate p
deflate-inflate p                       0       = refl
deflate-inflate []                      (suc n) = refl
deflate-inflate p@((i , j) ‚à∑ [])        (suc n) = begin
   deflate ((i , i) ‚à∑ inflate ((i , j) ‚à∑ []) n) ‚â°‚ü® deflate-remove (inflate p n) refl (sym (inflate-source p n refl)) ‚ü©
   deflate (inflate ((i , j) ‚à∑ []) n)           ‚â°‚ü® deflate-inflate p n ‚ü©
   deflate ((i , j) ‚à∑ [])                       ‚àé
deflate-inflate ((i , j) ‚à∑ q@((k , l) ‚à∑ p)) (suc n) with i ‚âü j | j ‚âü k
... | no  i‚â¢j  | _        = begin
  deflate ((i , i) ‚à∑ inflate ((i , j) ‚à∑ q) n) ‚â°‚ü® deflate-remove (inflate ((i , j) ‚à∑ q) n) refl (sym (inflate-source ((i , j) ‚à∑ q) n refl)) ‚ü©
  deflate (inflate ((i , j) ‚à∑ q) n)           ‚â°‚ü® deflate-inflate ((i , j) ‚à∑ q) n ‚ü©
  deflate ((i , j) ‚à∑ q)                       ‚â°‚ü® deflate-skip q (inj‚ÇÅ i‚â¢j) ‚ü©
  (i , j) ‚à∑ deflate q                         ‚àé
... | yes _    | no  j‚â¢k  = begin
  deflate ((i , i) ‚à∑ inflate ((i , j) ‚à∑ q) n) ‚â°‚ü® deflate-remove (inflate ((i , j) ‚à∑ q) n) refl (sym (inflate-source ((i , j) ‚à∑ q) n refl)) ‚ü©
  deflate (inflate ((i , j) ‚à∑ q) n)           ‚â°‚ü® deflate-inflate ((i , j) ‚à∑ q) n ‚ü©
  deflate ((i , j) ‚à∑ q)                       ‚â°‚ü® deflate-skip q (inj‚ÇÇ (j‚â¢k ‚àò just-injective)) ‚ü©
  (i , j) ‚à∑ deflate q                         ‚àé
... | yes refl | yes refl = begin
  deflate ((i , i) ‚à∑ inflate ((i , i) ‚à∑ q) n) ‚â°‚ü® deflate-remove (inflate ((i , i) ‚à∑ q) n) refl (sym (inflate-source ((i , i) ‚à∑ q) n refl)) ‚ü©
  deflate (inflate ((i , i) ‚à∑ q) n)           ‚â°‚ü® deflate-inflate ((i , i) ‚à∑ q) n ‚ü©
  deflate ((i , i) ‚à∑ q)                       ‚â°‚ü® deflate-remove q refl refl ‚ü©
  deflate q                                   ‚àé

deflate-idem : ‚àÄ p ‚Üí deflate (deflate p) ‚â° deflate p
deflate-idem []            = refl
deflate-idem ((i , j) ‚à∑ []) = refl
deflate-idem ((i , j) ‚à∑ q@((k , l) ‚à∑ p)) with i ‚âü j | j ‚âü k
... | no  i‚â¢j | _       = begin
  deflate ((i , j) ‚à∑ deflate q) ‚â°‚ü® deflate-skip (deflate q) (inj‚ÇÅ i‚â¢j) ‚ü©
  (i , j) ‚à∑ deflate (deflate q) ‚â°‚ü® cong (_ ‚à∑_) (deflate-idem q) ‚ü©
  (i , j) ‚à∑ deflate q           ‚àé
... | yes _   | no  j‚â¢k = begin
  deflate ((i , j) ‚à∑ deflate q) ‚â°‚ü® deflate-skip (deflate q) (inj‚ÇÇ (j‚â¢k ‚àò just-injective ‚àò flip trans (deflate-source q))) ‚ü©
  (i , j) ‚à∑ deflate (deflate q) ‚â°‚ü® cong (_ ‚à∑_) (deflate-idem q) ‚ü©
  (i , j) ‚à∑ deflate q           ‚àé
... | yes _   | yes _   = deflate-idem ((k , l) ‚à∑ p)

‚àà-deflate‚Åª : ‚àÄ {v p} ‚Üí v ‚àà‚Çö deflate p ‚Üí v ‚àà‚Çö p
‚àà-deflate‚Åª {v} {[]}                    ()
‚àà-deflate‚Åª {v} {(i , j) ‚à∑ []}          v‚ààij = v‚ààij
‚àà-deflate‚Åª {v} {(i , j) ‚à∑ (k , l) ‚à∑ p} v‚ààp with i ‚âü j | j ‚âü k | v‚ààp
... | no  _ | _     | here  v‚ààij   = here v‚ààij
... | no  _ | _     | there v‚ààkl‚à∑p = there (‚àà-deflate‚Åª v‚ààkl‚à∑p)
... | yes _ | no  _ | here  v‚ààij   = here v‚ààij
... | yes _ | no  _ | there v‚ààkl‚à∑p = there (‚àà-deflate‚Åª v‚ààkl‚à∑p)
... | yes _ | yes _ | v‚ààp'         = there (‚àà-deflate‚Åª v‚ààp')

‚áø-deflate‚Å∫ : ‚àÄ {e p} ‚Üí e ‚áø p ‚Üí e ‚áø deflate p
‚áø-deflate‚Å∫ {e} {[]}                    e‚áøp = e‚áøp
‚áø-deflate‚Å∫ {e} {(i , j) ‚à∑ []}          e‚áøp = e‚áøp
‚áø-deflate‚Å∫ {e} {(i , j) ‚à∑ (k , l) ‚à∑ p} e‚áøp with i ‚âü j | j ‚âü k
... | no  _    | _        = ‚áø-resp-p‚ÇÄ refl e‚áøp
... | yes _    | no  _    = ‚áø-resp-p‚ÇÄ refl e‚áøp
... | yes refl | yes refl = ‚áø-deflate‚Å∫ {e} {(k , l) ‚à∑ p} (‚áø-resp-p‚ÇÄ refl e‚áøp)
