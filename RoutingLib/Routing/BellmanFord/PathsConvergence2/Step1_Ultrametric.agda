open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; _,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ) renaming (map to map‚Çö)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_]‚Ä≤)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (m‚â§m+n; m+n‚à∏m‚â°n; ‚â§+‚â¢‚áí<; suc-injective; ‚â§-trans; ‚â§-refl; ‚â§-reflexive; <-trans ≥; <-transÀ°; <-irrefl; ‚äì-sel; ‚â∞‚áí‚â•; +-comm; +-assoc; +-mono-‚â§; ‚à∏-mono; m‚â§m‚äîn; ‚äî-mono-‚â§; ‚äì-mono-‚â§; m‚äìn‚â§m; ‚äì-idem; ‚äì-assoc; ‚äî-identity ≥; ‚äì-comm; +-cancelÀ°-‚â°; +-distribÀ°-‚äî; n‚â§m‚äîn; +-mono ≥-<; <‚áí‚â§;  module ‚â§-Reasoning)
open import Data.Fin using (Fin) renaming (zero to fzero)
open import Data.Maybe using (Maybe; just; nothing)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (Decidable)
open import Function using (_‚àò_; _$_; id)

open import RoutingLib.Data.Graph.SimplePath using (SimplePath) renaming (length to length‚Çö)
open import RoutingLib.Routing.Definitions
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Data.Graph
open import RoutingLib.Routing.BellmanFord.PathsConvergence2.SufficientConditions
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím+o‚â°n; ‚à∏-distribÀ°-‚äì-‚äî; n‚äì-mono-‚â§; ‚äìn-mono-‚â§; m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; ‚à∏-monoÀ°-<; m‚â§n‚áím‚äìn‚â°m; ‚à∏-cancelÀ°; n<m‚áín‚äìo<m; ‚äì-triangulate; n‚â¢0‚áí0<n; ‚â§-steps ≥)
open import RoutingLib.Data.Matrix using (min‚Å∫; map)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫-cong; min‚Å∫-constant; min‚Å∫[M]‚â§x; min‚Å∫[M]‚â§M)
open import RoutingLib.Data.Matrix.Membership.Propositional.Properties using (min‚Å∫[M]‚ààM)
open import RoutingLib.Function.Distance using (IsUltrametric; MaxTriangleIneq)
import RoutingLib.Routing.BellmanFord.PathsConvergence2.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.GeneralConvergence.Step2_Ultrametric as ConsistentUltrametric

module RoutingLib.Routing.BellmanFord.PathsConvergence2.Step1_Ultrametric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
  
  open ConsistentUltrametric ùì°ùìü·∂ú ùì¢ùìí
    using ()
    renaming
    ( d            to d·∂ú
    ; d‚Çõ·µ§‚Çö         to d·∂ú‚Çõ·µ§‚Çö
    ; d‚â°0‚áíX‚âàY      to d·∂ú‚â°0‚áíX‚âàY
    ; X‚âàY‚áíd‚â°0      to X‚âàY‚áíd·∂ú‚â°0
    ; d-sym        to d·∂ú-sym
    ; d-cong‚ÇÇ      to d·∂ú-cong
    ; d-maxTriIneq to d·∂ú-maxTriIneq
    ; d‚â§d‚Çõ·µ§‚Çö       to d·∂ú‚â§d·∂ú‚Çõ·µ§‚Çö
    ; d‚â§d‚Çò‚Çê‚Çì       to d·∂ú‚â§d·∂ú‚Çò‚Çê‚Çì
    )
    
  ------------------------------------------------------------------------------
  -- Inconsistent length
  ------------------------------------------------------------------------------
  -- The size of inconsistent routes where consistent routes are viewed as
  -- having the maximum size `n-1`
  
  length‚Å± : Route ‚Üí ‚Ñï
  length‚Å± r with ùë™? r
  ... | yes _ = n-1
  ... | no  _ = size r

  length‚Å±‚â°n-1 : ‚àÄ {r} ‚Üí ùë™ r ‚Üí length‚Å± r ‚â° n-1
  length‚Å±‚â°n-1 {r} r·∂ú with ùë™? r
  ... | yes _  = refl
  ... | no  r‚Å± = contradiction r·∂ú r‚Å±

  length‚Å±‚â°size[r] : ‚àÄ {r} ‚Üí ùë∞ r ‚Üí length‚Å± r ‚â° size r
  length‚Å±‚â°size[r] {r} r‚Å± with ùë™? r
  ... | yes r·∂ú = contradiction r·∂ú r‚Å±
  ... | no  _  = refl

  length‚Å±-cong : ‚àÄ {r s} ‚Üí r ‚âà s ‚Üí length‚Å± r ‚â° length‚Å± s
  length‚Å±-cong {r} {s} r‚âàs with ùë™? r | ùë™? s
  ... | yes _  | yes _  = refl
  ... | no  r‚Å± | yes s·∂ú = contradiction (ùë™-cong (‚âà-sym r‚âàs) s·∂ú) r‚Å±
  ... | yes r·∂ú | no  s‚Å± = contradiction (ùë™-cong r‚âàs r·∂ú) s‚Å±
  ... | no  _  | no  _  = size-cong r‚âàs

  length‚Å±‚â§n-1 : ‚àÄ r ‚Üí length‚Å± r ‚â§ n-1
  length‚Å±‚â§n-1 r with ùë™? r
  ... | yes _ = ‚â§-refl
  ... | no  _ = ‚â§-pred (size<n r)

  length‚Å±[r]<n-1‚áír‚Å± : ‚àÄ {r} ‚Üí length‚Å± r < n-1 ‚Üí ùë∞ r
  length‚Å±[r]<n-1‚áír‚Å± {r} |r|<n-1 with ùë™? r
  ... | yes _ = contradiction |r|<n-1 (<-irrefl refl)
  ... | no  r‚Å± = r‚Å±
  
  length‚Å±‚â°|p| : ‚àÄ {r} ‚Üí ùë∞ r ‚Üí ‚àÉ Œª (p : SimplePath n) ‚Üí length‚Å± r ‚â° length‚Çö p
  length‚Å±‚â°|p| {r} r‚Å± with ùë™? r
  ... | yes r·∂ú = contradiction r·∂ú r‚Å±  
  ... | no  _  with r ‚âü 0#
  ...   | yes r‚âà0 = contradiction (ùíÑ-null r‚âà0) r‚Å±
  ...   | no  r‚ââ0 = path r‚ââ0 , refl
  
  ------------------------------------------------------------------------------
  -- Shortest inconsistent route
  ------------------------------------------------------------------------------
  -- The length of the shortest inconsistent route in X
  
  shortest : RMatrix ‚Üí ‚Ñï
  shortest X = min‚Å∫ (map length‚Å± X)

  shortest-cong : ‚àÄ {X Y} ‚Üí X ‚âà‚Çò Y ‚Üí shortest X ‚â° shortest Y
  shortest-cong X‚âàY = min‚Å∫-cong (Œª i j ‚Üí length‚Å±-cong (X‚âàY i j))

  shX<n : ‚àÄ X ‚Üí shortest X < n
  shX<n X = s‚â§s (min‚Å∫[M]‚â§x (map length‚Å± X) (fzero , fzero , length‚Å±‚â§n-1 (X fzero fzero)))

  X·∂ú‚áíshX‚â°n-1 : ‚àÄ {X} ‚Üí ùë™‚Çò X ‚Üí shortest X ‚â° n-1
  X·∂ú‚áíshX‚â°n-1 X·∂ú = min‚Å∫-constant (Œª i j ‚Üí length‚Å±‚â°n-1 (X·∂ú i j))

  Y·∂ú‚áíshX‚â§shY : ‚àÄ X {Y} ‚Üí ùë™‚Çò Y ‚Üí shortest X ‚â§ shortest Y
  Y·∂ú‚áíshX‚â§shY X Y·∂ú = ‚â§-trans (‚â§-pred (shX<n X)) (‚â§-reflexive (sym (X·∂ú‚áíshX‚â°n-1 Y·∂ú)))

  Y·∂ú‚áíshX‚äìshY‚â°shX : ‚àÄ X {Y} ‚Üí ùë™‚Çò Y ‚Üí shortest X ‚äì shortest Y ‚â° shortest X
  Y·∂ú‚áíshX‚äìshY‚â°shX X Y·∂ú = m‚â§n‚áím‚äìn‚â°m (Y·∂ú‚áíshX‚â§shY X Y·∂ú)
    
  X·∂ú‚áíshX‚äìshY‚â°shY : ‚àÄ {X} Y ‚Üí ùë™‚Çò X ‚Üí shortest X ‚äì shortest Y ‚â° shortest Y
  X·∂ú‚áíshX‚äìshY‚â°shY Y X·∂ú = trans (‚äì-comm _ (shortest Y)) (Y·∂ú‚áíshX‚äìshY‚â°shX Y X·∂ú)

  shX‚äìshY<n : ‚àÄ X Y ‚Üí shortest X ‚äì shortest Y < n
  shX‚äìshY<n X Y = n<m‚áín‚äìo<m (shortest Y) (shX<n X)
  
  shX‚Å±‚â°|X‚Å±·µ¢‚±º| : ‚àÄ {X} ‚Üí ùë∞‚Çò X ‚Üí ‚àÉ‚ÇÇ Œª i j ‚Üí shortest X ‚â° size (X i j) √ó ùë∞ (X i j)
  shX‚Å±‚â°|X‚Å±·µ¢‚±º| {X} X‚Å±  with ùë∞‚Çò-witness X‚Å±
  ... | k , l , X‚Çñ‚Çó‚Å± with shortest X ‚âü‚Ñï length‚Å± (X k l)
  ...   | yes shX‚â°length‚Å±X‚Çñ‚Çó = k , l , trans shX‚â°length‚Å±X‚Çñ‚Çó (length‚Å±‚â°size[r] X‚Çñ‚Çó‚Å±) , X‚Çñ‚Çó‚Å±
  ...   | no  shX‚â¢length‚Å±X‚Çñ‚Çó with min‚Å∫[M]‚ààM (map length‚Å± X)
  ...     | i , j , shX‚â°|X·µ¢‚±º| = i , j , trans shX‚â°|X·µ¢‚±º| (length‚Å±‚â°size[r] X·µ¢‚±º‚Å±) , X·µ¢‚±º‚Å±
    where    
    X·µ¢‚±º‚Å± : ùë∞ (X i j)
    X·µ¢‚±º‚Å± = length‚Å±[r]<n-1‚áír‚Å± (<-transÀ° (‚â§+‚â¢‚áí< (‚â§-trans (‚â§-reflexive (sym shX‚â°|X·µ¢‚±º|)) (min‚Å∫[M]‚â§M (map length‚Å± X) k l)) (shX‚â¢length‚Å±X‚Çñ‚Çó ‚àò (trans shX‚â°|X·µ¢‚±º|))) (length‚Å±‚â§n-1 (X k l)))

  shX‚Å±‚â°|p| : ‚àÄ {X} ‚Üí ùë∞‚Çò X ‚Üí ‚àÉ Œª (p : SimplePath n) ‚Üí shortest X ‚â° length‚Çö p
  shX‚Å±‚â°|p| {X} X‚Å± with shX‚Å±‚â°|X‚Å±·µ¢‚±º| X‚Å±
  ... | i , j , shX‚â°|X·µ¢‚±º| , X·µ¢‚±º‚Å± with length‚Å±‚â°|p| X·µ¢‚±º‚Å±
  ...   | (p , |X·µ¢‚±º|‚â°|p|) with ùë™? (X i j)
  ...     | yes X·µ¢‚±º·∂ú = contradiction X·µ¢‚±º·∂ú X·µ¢‚±º‚Å±
  ...     | no  _   = p , trans shX‚â°|X·µ¢‚±º| |X·µ¢‚±º|‚â°|p|
  
  shX‚äìshY‚â°|p| : ‚àÄ X Y ‚Üí ùë∞‚Çò X ‚äé ùë∞‚Çò Y ‚Üí
                 ‚àÉ Œª (p : SimplePath n) ‚Üí shortest X ‚äì shortest Y ‚â° length‚Çö p
  shX‚äìshY‚â°|p| X Y X‚Å±‚äéY‚Å± with ùë™‚Çò? X | ùë™‚Çò? Y
  ... | yes X·∂ú | yes Y·∂ú = contradiction X‚Å±‚äéY‚Å± (Œª {(inj‚ÇÅ X‚Å±) ‚Üí X‚Å± X·∂ú; (inj‚ÇÇ Y‚Å±) ‚Üí Y‚Å± Y·∂ú})
  ... | yes X·∂ú | no  Y‚Å± = map‚Çö id (trans (X·∂ú‚áíshX‚äìshY‚â°shY Y X·∂ú)) (shX‚Å±‚â°|p| Y‚Å±)
  ... | no  X‚Å± | yes Y·∂ú = map‚Çö id (trans (Y·∂ú‚áíshX‚äìshY‚â°shX X Y·∂ú)) (shX‚Å±‚â°|p| X‚Å±)
  ... | no  X‚Å± | no  Y‚Å± with ‚äì-sel (shortest X) (shortest Y)
  ...   | inj‚ÇÅ shX‚äìshY‚â°shX = map‚Çö id (trans shX‚äìshY‚â°shX) (shX‚Å±‚â°|p| X‚Å±)
  ...   | inj‚ÇÇ shX‚äìshY‚â°shY = map‚Çö id (trans shX‚äìshY‚â°shY) (shX‚Å±‚â°|p| Y‚Å±)
  
  ------------------------------------------------------------------------------
  -- Mapping length into the right range
  ------------------------------------------------------------------------------
  -- Maps a path length to the corresponding distance
  
  invert : ‚Ñï ‚Üí ‚Ñï
  invert x = d·∂ú‚Çõ·µ§‚Çö + (n ‚à∏ x)

  invert-‚â§ : ‚àÄ {x y} ‚Üí y ‚â§ x ‚Üí invert x ‚â§ invert y
  invert-‚â§ y‚â§x = +-mono-‚â§ {d·∂ú‚Çõ·µ§‚Çö} ‚â§-refl (‚à∏-mono ‚â§-refl y‚â§x)
  
  invert-< : ‚àÄ {x y} ‚Üí y < x ‚Üí x < n ‚Üí invert x < invert y
  invert-< y<x x<n = +-mono ≥-< {d·∂ú‚Çõ·µ§‚Çö} ‚â§-refl (‚à∏-monoÀ°-< y<x x<n)

  invert-<sh : ‚àÄ {X Y} ‚Üí shortest Y < shortest X ‚Üí invert (shortest X) < invert (shortest Y)
  invert-<sh {X} shY<shX = invert-< shY<shX (shX<n X)
  
  invert-¬¨cong : ‚àÄ {x y} ‚Üí x ‚â§ n ‚Üí y ‚â§ n ‚Üí x ‚â¢ y ‚Üí invert x ‚â¢ invert y
  invert-¬¨cong x‚â§n y‚â§n x‚â¢y ix‚â°iy = x‚â¢y (‚à∏-cancelÀ° x‚â§n y‚â§n (+-cancelÀ°-‚â° d·∂ú‚Çõ·µ§‚Çö ix‚â°iy))

  invert-distr2 : ‚àÄ x y ‚Üí invert (x ‚äì y) ‚â° invert x ‚äî invert y
  invert-distr2 x y = begin
    d·∂ú‚Çõ·µ§‚Çö + (n ‚à∏ (x ‚äì y))       ‚â°‚ü® cong (d·∂ú‚Çõ·µ§‚Çö +_) (‚à∏-distribÀ°-‚äì-‚äî n x y) ‚ü©
    d·∂ú‚Çõ·µ§‚Çö + ((n ‚à∏ x) ‚äî (n ‚à∏ y)) ‚â°‚ü® +-distribÀ°-‚äî d·∂ú‚Çõ·µ§‚Çö _ _ ‚ü©
    invert x ‚äî invert y ‚àé
    where open ‚â°-Reasoning
    
  invert-distr : ‚àÄ X Y Z ‚Üí invert (shortest X ‚äì shortest Y ‚äì shortest Z) ‚â°
                           invert (shortest X ‚äì shortest Y) ‚äî invert (shortest Y ‚äì shortest Z)
  invert-distr X Y Z = begin
    invert (sh X ‚äì sh Y ‚äì sh Z)                  ‚â°‚ü® cong invert (‚äì-triangulate (sh X) _ _) ‚ü©
    invert ((sh X ‚äì sh Y) ‚äì (sh Y ‚äì sh Z))       ‚â°‚ü® invert-distr2 (sh X ‚äì sh Y) (sh Y ‚äì sh Z) ‚ü©
    invert (sh X ‚äì sh Y) ‚äî invert (sh Y ‚äì sh Z)  ‚àé
    where open ‚â°-Reasoning ; sh = shortest

  
  ------------------------------------------------------------------------------
  -- Distance metric for inconsistent IMatrices
  ------------------------------------------------------------------------------

  d‚Å± : RMatrix ‚Üí RMatrix ‚Üí ‚Ñï
  d‚Å± X Y = invert (shortest X ‚äì shortest Y)

  d‚Å±-sym : ‚àÄ X Y ‚Üí d‚Å± X Y ‚â° d‚Å± Y X
  d‚Å±-sym X Y = cong invert (‚äì-comm (shortest X) (shortest Y))

  d‚Å±-cong : ‚àÄ {W X Y Z} ‚Üí W ‚âà‚Çò Y ‚Üí X ‚âà‚Çò Z ‚Üí d‚Å± W X ‚â° d‚Å± Y Z
  d‚Å±-cong W‚âàY X‚âàZ = cong invert
    (cong‚ÇÇ _‚äì_ (shortest-cong W‚âàY) (shortest-cong X‚âàZ))

  d‚Å±-maxTriangleIneq : MaxTriangleIneq ‚ÑùùïÑ‚Çõ d‚Å±
  d‚Å±-maxTriangleIneq X Y Z = begin
    invert (sh X ‚äì sh Z)                        ‚â§‚ü® invert-‚â§ (‚äì-mono-‚â§ (m‚äìn‚â§m (shortest X) _) ‚â§-refl) ‚ü©
    invert (sh X ‚äì sh Y ‚äì sh Z)                 ‚â°‚ü® cong invert (‚äì-triangulate (sh X) _ _) ‚ü©
    invert ((sh X ‚äì sh Y) ‚äì (sh Y ‚äì sh Z))      ‚â°‚ü® invert-distr2 (sh X ‚äì sh Y) (sh Y ‚äì sh Z) ‚ü©
    invert (sh X ‚äì sh Y) ‚äî invert (sh Y ‚äì sh Z) ‚àé
    where open ‚â§-Reasoning ; sh = shortest

  d·∂ú<d‚Å± : ‚àÄ W X Y Z ‚Üí d·∂ú W X < d‚Å± Y Z
  d·∂ú<d‚Å± W X Y Z = s‚â§s (‚â§-steps ≥ _ (d·∂ú‚â§d·∂ú‚Çò‚Çê‚Çì W X))
  
  X·∂ú‚áíd‚Å±XZ‚â§d‚Å±YZ : ‚àÄ {X} ‚Üí ùë™‚Çò X ‚Üí ‚àÄ Y Z ‚Üí d‚Å± X Z ‚â§ d‚Å± Y Z
  X·∂ú‚áíd‚Å±XZ‚â§d‚Å±YZ X·∂ú Y Z = invert-‚â§ (‚äìn-mono-‚â§ (shortest Z) (Y·∂ú‚áíshX‚â§shY Y X·∂ú))

  Y·∂ú‚áíd‚Å±XY‚â§d‚Å±XZ : ‚àÄ X {Y} ‚Üí ùë™‚Çò Y ‚Üí ‚àÄ Z ‚Üí d‚Å± X Y ‚â§ d‚Å± X Z
  Y·∂ú‚áíd‚Å±XY‚â§d‚Å±XZ X Y·∂ú Z = invert-‚â§ (n‚äì-mono-‚â§ (shortest X) (Y·∂ú‚áíshX‚â§shY Z Y·∂ú))

  ------------------------------------------------------------------------------
  -- Pseudo-distance function
  ------------------------------------------------------------------------------
  -- A pseudo-distance function over RMatrices
  -- (doesn't obey the equality metric axioms)
  
  d‚Çï : RMatrix ‚Üí RMatrix ‚Üí ‚Ñï
  d‚Çï X Y with ùë™‚Çò? X | ùë™‚Çò? Y
  ... | no _   | _     = d‚Å± X Y
  ... | _      | no _  = d‚Å± X Y
  ... | yes X·∂ú | yes Y·∂ú = d·∂ú (toCMatrix X·∂ú) (toCMatrix Y·∂ú)

  d‚Çï-sym : ‚àÄ X Y ‚Üí d‚Çï X Y ‚â° d‚Çï Y X
  d‚Çï-sym X Y with ùë™‚Çò? X | ùë™‚Çò? Y
  ... | no  _ | no  _ = d‚Å±-sym X Y
  ... | no  _ | yes _ = d‚Å±-sym X Y
  ... | yes _ | no  _ = d‚Å±-sym X Y
  ... | yes _ | yes _ = d·∂ú-sym _ _
  
  d‚Çï-cong : ‚àÄ {W X Y Z} ‚Üí W ‚âà‚Çò Y ‚Üí X ‚âà‚Çò Z ‚Üí d‚Çï W X ‚â° d‚Çï Y Z
  d‚Çï-cong {W} {X} {Y} {Z} W‚âàY X‚âàZ with ùë™‚Çò? W | ùë™‚Çò? X | ùë™‚Çò? Y | ùë™‚Çò? Z
  ... | yes W·∂ú | _      | no  Y‚Å± | _      = contradiction (ùë™‚Çò-cong W‚âàY W·∂ú) Y‚Å±
  ... | no  W‚Å± | _      | yes Y·∂ú | _      = contradiction (ùë™‚Çò-cong (‚âà‚Çò-sym W‚âàY) Y·∂ú) W‚Å±
  ... | _      | yes X·∂ú | _      | no  Z‚Å± = contradiction (ùë™‚Çò-cong X‚âàZ X·∂ú) Z‚Å±
  ... | _      | no  X‚Å± | _      | yes Z·∂ú = contradiction (ùë™‚Çò-cong (‚âà‚Çò-sym X‚âàZ) Z·∂ú) X‚Å±
  ... | yes _  | yes _  | yes _  | yes _  = d·∂ú-cong W‚âàY X‚âàZ
  ... | yes _  | no  _  | yes _  | no  _  = d‚Å±-cong W‚âàY X‚âàZ
  ... | no  _  | yes _  | no  _  | yes _  = d‚Å±-cong W‚âàY X‚âàZ
  ... | no  _  | no  _  | no  _  | no  _  = d‚Å±-cong W‚âàY X‚âàZ

  d‚Çï-maxTriIneq : MaxTriangleIneq ‚ÑùùïÑ‚Çõ d‚Çï
  d‚Çï-maxTriIneq X Y Z with ùë™‚Çò? X | ùë™‚Çò? Y | ùë™‚Çò? Z
  ... | yes _  | yes _ | yes _  = d·∂ú-maxTriIneq _ _ _
  ... | yes X·∂ú | yes _ | no  _  = m‚â§o‚áím‚â§n‚äîo (d·∂ú _ _) (X·∂ú‚áíd‚Å±XZ‚â§d‚Å±YZ X·∂ú Y Z)
  ... | no  _  | yes _ | yes Z·∂ú = m‚â§n‚áím‚â§n‚äîo (d·∂ú _ _) (Y·∂ú‚áíd‚Å±XY‚â§d‚Å±XZ X Z·∂ú Y)
  ... | yes _  | no  _ | yes _  = m‚â§n‚áím‚â§n‚äîo (d‚Å± Y Z) (<‚áí‚â§ (d·∂ú<d‚Å± _ _ X Y))
  ... | yes _  | no  _ | no  _  = d‚Å±-maxTriangleIneq X Y Z
  ... | no  _  | yes _ | no  _  = d‚Å±-maxTriangleIneq X Y Z
  ... | no  _  | no  _ | yes _  = d‚Å±-maxTriangleIneq X Y Z
  ... | no  _  | no  _ | no  _  = d‚Å±-maxTriangleIneq X Y Z

  X‚ââY‚áíd‚Çï‚â¢0 : ‚àÄ {X Y} ‚Üí X ‚ââ‚Çò Y ‚Üí d‚Çï X Y ‚â¢ 0
  X‚ââY‚áíd‚Çï‚â¢0 {X} {Y} X‚ââY d‚Çï‚â°0 with ùë™‚Çò? X | ùë™‚Çò? Y
  ... | no  _ | _     = contradiction d‚Çï‚â°0 Œª()
  ... | yes _ | no  _ = contradiction d‚Çï‚â°0 Œª()
  ... | yes _ | yes _ = contradiction (d·∂ú‚â°0‚áíX‚âàY d‚Çï‚â°0) X‚ââY

  
  postulate d‚Çï‚â°d‚Å± : ‚àÄ X Y ‚Üí ùë∞‚Çò X ‚äé ùë∞‚Çò Y ‚Üí d‚Çï X Y ‚â° d‚Å± X Y
  {-
  d‚Çï‚â°d‚Å± X Y ¬¨X·∂ú‚äé¬¨Y·∂ú with ùë™‚Çò? X | ùë™‚Çò? Y
  ... | no  _  | _     = refl
  ... | yes _  | no  _ = refl
  ... | yes X·∂ú | yes Y·∂ú = ? --contradiction ¬¨X·∂ú‚äé¬¨Y·∂ú [ _$ X·∂ú , _$ Y·∂ú ]‚Ä≤
  -}
  
  postulate X‚ââY‚áí0<d‚Çï : ‚àÄ {X Y} ‚Üí X ‚ââ‚Çò Y ‚Üí zero < d‚Çï X Y
{-
  X‚ââY‚áí0<d‚Çï {X} {Y} X‚ââY with ùë™‚Çò? X | ùë™‚Çò? Y
  ... | no  _  | _      = s‚â§s z‚â§n
  ... | yes _  | no  _  = s‚â§s z‚â§n
  ... | yes X·∂ú | yes Y·∂ú  = {!!}
  with d·∂ú (Œª i j ‚Üí X i j , X·∂ú i j) (Œª i j ‚Üí Y i j , Y·∂ú i j) ‚âü‚Ñï 0
  ...   | yes d·∂ú‚â°0 = contradiction (d·∂ú‚â°0‚áíX‚âàY d·∂ú‚â°0) ? --(fromI‚Çò-¬¨cong X·∂ú Y·∂ú X‚ââY)
  ...   | no  d·∂ú‚â¢0 = n‚â¢0‚áí0<n d·∂ú‚â¢0
-}

  ------------------------------------------------------------------------------
  -- Distance function
  ------------------------------------------------------------------------------
  -- A true distance function over IMatrices
  d : RMatrix ‚Üí RMatrix ‚Üí ‚Ñï
  d X Y with X ‚âü‚Çò Y
  ... | yes _ = zero
  ... | no  _ = d‚Çï X Y

  d-sym : ‚àÄ X Y ‚Üí d X Y ‚â° d Y X
  d-sym X Y with X ‚âü‚Çò Y | Y ‚âü‚Çò X
  ... | yes _   | yes _   = refl
  ... | no  X‚ââY | yes Y‚âàX = contradiction (‚âà‚Çò-sym Y‚âàX) X‚ââY
  ... | yes X‚âàY | no  Y‚ââX = contradiction (‚âà‚Çò-sym X‚âàY) Y‚ââX
  ... | no  _   | no  _   = d‚Çï-sym X Y

  d-cong : d Preserves‚ÇÇ _‚âà‚Çò_ ‚ü∂ _‚âà‚Çò_ ‚ü∂ _‚â°_
  d-cong {W} {X} {Y} {Z} W‚âàX Y‚âàZ with W ‚âü‚Çò Y | X ‚âü‚Çò Z
  ... | no  _   | no _    = d‚Çï-cong W‚âàX Y‚âàZ
  ... | no  W‚ââY | yes X‚âàZ = contradiction (‚âà‚Çò-trans (‚âà‚Çò-trans W‚âàX X‚âàZ) (‚âà‚Çò-sym Y‚âàZ)) W‚ââY
  ... | yes W‚âàY | no  X‚ââZ = contradiction (‚âà‚Çò-trans (‚âà‚Çò-trans (‚âà‚Çò-sym W‚âàX) W‚âàY) Y‚âàZ) X‚ââZ
  ... | yes _   | yes _   = refl

  d-maxTriIneq : MaxTriangleIneq ‚ÑùùïÑ‚Çõ d
  d-maxTriIneq X Y Z with X ‚âü‚Çò Z | X ‚âü‚Çò Y | Y ‚âü‚Çò Z
  ... | yes _   | _       | _       = z‚â§n
  ... | no  X‚ââZ | yes X‚âàY | yes Y‚âàZ = contradiction (‚âà‚Çò-trans X‚âàY Y‚âàZ) X‚ââZ
  ... | no  _   | yes X‚âàY | no  _   = ‚â§-reflexive (d‚Çï-cong X‚âàY ‚âà‚Çò-refl)
  ... | no  _   | no  _   | no  _   = d‚Çï-maxTriIneq X Y Z
  ... | no  _   | no  _   | yes Y‚âàZ =
    m‚â§n‚áím‚â§n‚äîo zero (‚â§-reflexive (d‚Çï-cong ‚âà‚Çò-refl (‚âà‚Çò-sym Y‚âàZ)))
  
  X‚âàY‚áíd‚â°0 : ‚àÄ {X Y} ‚Üí X ‚âà‚Çò Y ‚Üí d X Y ‚â° 0
  X‚âàY‚áíd‚â°0 {X} {Y} X‚âàY with X ‚âü‚Çò Y
  ... | yes _   = refl
  ... | no  X‚ââY = contradiction X‚âàY X‚ââY

  d‚â°0‚áíX‚âàY : ‚àÄ {X Y} ‚Üí d X Y ‚â° 0 ‚Üí X ‚âà‚Çò Y
  d‚â°0‚áíX‚âàY {X} {Y} d‚â°0 with X ‚âü‚Çò Y
  ... | yes X‚âàY = X‚âàY
  ... | no  X‚ââY = contradiction d‚â°0 (X‚ââY‚áíd‚Çï‚â¢0 X‚ââY)

  d‚â°d‚Çï : ‚àÄ {X Y} ‚Üí X ‚ââ‚Çò Y ‚Üí d X Y ‚â° d‚Çï X Y
  d‚â°d‚Çï {X} {Y} X‚ââY with X ‚âü‚Çò Y
  ... | yes X‚âàY = contradiction X‚âàY X‚ââY
  ... | no  _   = refl
    
  d‚â°d‚Å± : ‚àÄ {X Y} ‚Üí X ‚ââ‚Çò Y ‚Üí ùë∞‚Çò X ‚äé ùë∞‚Çò Y ‚Üí
                      d X Y ‚â° invert (shortest X ‚äì shortest Y)
  d‚â°d‚Å± X‚ââY ¬¨X·∂ú‚äé¬¨Y·∂ú = trans (d‚â°d‚Çï X‚ââY) (d‚Çï‚â°d‚Å± _ _ ¬¨X·∂ú‚äé¬¨Y·∂ú)
    
  postulate d‚â°inv|p| : ‚àÄ {X Y} ‚Üí X ‚ââ‚Çò Y ‚Üí ùë∞‚Çò X ‚äé ùë∞‚Çò Y ‚Üí
                ‚àÉ Œª (p : SimplePath n) ‚Üí d X Y ‚â° invert (length‚Çö p)
                
{-
  d‚â°inv|p| {X} {Y} X‚ââY X‚Å±‚äéY‚Å± = {!!}
  with shX‚äìshY‚â°|p| X Y X‚Å±‚äéY‚Å±
  ... | p , shX‚äìshY‚â°|p| = p , trans (d‚â°d‚Å± X‚ââY X‚Å±‚äéY‚Å±) (cong invert shX‚äìshY‚â°|p|)
-}

{-
  d‚â°d·∂ú : ‚àÄ X Y ‚Üí d (toI‚Çò X) (toI‚Çò Y) ‚â° d·∂ú X Y
  d‚â°d·∂ú X Y with toI‚Çò X ‚âü‚Å±‚Çò toI‚Çò Y
  ... | yes toX‚âàtoY = ‚â°-sym (X‚âàY‚áíd·∂ú‚â°0 (toI‚Çò-injective toX‚âàtoY))
  ... | no  toX‚ââtoY with ùë™‚Çò? (toI‚Çò X) | ùë™‚Çò? (toI‚Çò Y)
  ...   | no  toX‚Å± | _        = contradiction (toI‚Çò·∂ú X) toX‚Å±
  ...   | yes _   | no  toY‚Å± = contradiction (toI‚Çò·∂ú Y) toY‚Å±
  ...   | yes toX·∂ú | yes toY·∂ú  = d·∂ú-cong (fromI‚Çò-toI‚Çò toX·∂ú) (fromI‚Çò-toI‚Çò toY·∂ú)
-}

  d-isUltrametric : IsUltrametric ‚ÑùùïÑ‚Çõ d
  d-isUltrametric = record 
    { eq‚áí0        = X‚âàY‚áíd‚â°0
    ; 0‚áíeq        = d‚â°0‚áíX‚âàY
    ; sym         = d-sym
    ; maxTriangle = d-maxTriIneq
    }
