open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (‚â§-trans; ‚â§-refl; ‚â§-reflexive; m‚â§m+n; m+n‚à∏m‚â°n; +-mono-‚â§; ‚à∏-mono;  ‚äì-mono-<; m‚â§m‚äîn; m‚äìn‚â§m; ‚â∞‚áí‚â•; n‚â§m‚äîn; m‚äìn‚â§n; <-transÀ°; <-trans ≥; +-distribÀ°-‚äî)
open import Data.Fin using (Fin)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; subst; subst‚ÇÇ; cong‚ÇÇ)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_)

open import RoutingLib.Routing.Definitions
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Data.Graph
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions using () renaming (SufficientConditions to GeneralSufficientConditions)
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; n<m‚áín‚äìo<m; n‚â§m‚áín‚äìo‚â§m; m<n‚áín‚â¢0; ‚â§-steps ≥; +-mono ≥-‚â§; +-mono ≥-<; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Data.Matrix using (Any; map; min‚Å∫)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫[M]<min‚Å∫[N])
open import RoutingLib.Data.Table using (Table)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
open import RoutingLib.Function.Distance using (Ultrametric; IsUltrametric; MaxTriangleIneq; Bounded)
import RoutingLib.Function.Distance.MaxLift as MaxLift

import RoutingLib.Routing.BellmanFord.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.Step2_InconsistentRouteMetric as Step2

module RoutingLib.Routing.BellmanFord.PathVector.Step3_InconsistentTableMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
  open Step2 ùìüùì¢ùìí

  d‚Çú‚Å±-ultrametric : Ultrametric _
  d‚Çú‚Å±-ultrametric = MaxLift.ultrametric {n = n} (Œª _ ‚Üí _) (Œª _ ‚Üí d·µ£‚Å±-ultrametric)

  open Ultrametric d‚Çú‚Å±-ultrametric public using ()
    renaming
    ( d    to d‚Çú‚Å±
    ; 0‚áíeq to d‚Çú‚Å±‚â°0‚áíX‚âàY
    ; eq‚áí0 to X‚âàY‚áíd‚Çú‚Å±‚â°0
    ; sym  to d‚Çú‚Å±-sym
    )

  d‚Çú‚Å±-bounded : Bounded ‚Ñùùïã‚Çõ d‚Çú‚Å±
  d‚Çú‚Å±-bounded = MaxLift.bounded (Œª _ ‚Üí S) d·µ£‚Å± d·µ£‚Å±-bounded
  
  X‚Å±Y·∂úZ·∂ú‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±XY : ‚àÄ {X Y Z} ‚Üí ùë∞‚Çú X ‚Üí ùë™‚Çú Y ‚Üí ùë™‚Çú Z ‚Üí d‚Çú‚Å± X Z ‚â§ d‚Çú‚Å± X Y
  X‚Å±Y·∂úZ·∂ú‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±XY X‚Å± Y·∂ú Z·∂ú = {!!} --‚â§-reflexive (trans (X‚Å±Y·∂ú‚áíD‚Å±XY‚â°D‚Å±X X‚Å± Z·∂ú) (sym (X‚Å±Y·∂ú‚áíD‚Å±XY‚â°D‚Å±X X‚Å± Y·∂ú)))
    
  X·∂úY·∂úZ‚Å±‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±YZ : ‚àÄ {X Y Z} ‚Üí ùë™‚Çú X ‚Üí ùë™‚Çú Y ‚Üí ùë∞‚Çú Z ‚Üí d‚Çú‚Å± X Z ‚â§ d‚Çú‚Å± Y Z
  X·∂úY·∂úZ‚Å±‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±YZ {X} {Y} {Z} X·∂ú Y·∂ú Z‚Å± = subst‚ÇÇ _‚â§_ (d‚Çú‚Å±-sym Z X) (d‚Çú‚Å±-sym Z Y) (X‚Å±Y·∂úZ·∂ú‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±XY Z‚Å± Y·∂ú X·∂ú)



  d‚Çú‚Å±-strContr : ‚àÄ {k l X Y} ‚Üí X l ‚ââ‚Çú Y l ‚Üí œÉ X k ‚ââ‚Çú œÉ Y k ‚Üí
                 ùë∞‚Çú (X l) ‚äé ùë∞‚Çú (Y l) ‚Üí ùë∞‚Çú (œÉ X k) ‚äé ùë∞‚Çú (œÉ Y k) ‚Üí
                 --(‚àÄ i ‚Üí d‚Çú (œÉ X i) (œÉ Y i) ‚â§ H·∂ú + d‚Çú‚Å± (œÉ X k) (œÉ Y k)) ‚Üí
                 --(‚àÄ i ‚Üí d‚Çú (X i)   (Y i)   ‚â§ H·∂ú + d‚Çú‚Å± (X l)   (Y l)) ‚Üí
                 d‚Çú‚Å± (œÉ X k) (œÉ Y k) < d‚Çú‚Å± (X l) (Y l)
  d‚Çú‚Å±-strContr {k} {l} {X} {Y} X‚Çó‚ââY‚Çó œÉX‚Çñ‚ââœÉY‚Çñ X‚Çó‚Å±‚äéY‚Çó‚Å± œÉX‚Çñ‚Å±‚äéœÉY‚Çñ‚Å± with max[t]‚ààt 0 (Œª j ‚Üí d·µ£‚Å± (X l j) (Y l j))
  ... | inj‚ÇÅ d‚Çú‚Å±X‚ÇóK‚Çó‚â°0           = {!!}
  ... | inj‚ÇÇ (m , d‚Çú‚Å±‚â°d·µ£X‚Çó‚ÇòY‚Çó‚Çò)  = {!!}
