open import Level using () renaming (zero to lzero; _‚äî_ to _‚äî‚Çó_)
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (DecTotalOrder; Setoid; _Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; cong; cong‚ÇÇ; subst; subst‚ÇÇ) renaming (setoid to ‚â°-setoid; refl to ‚â°-refl; sym to ‚â°-sym; trans to ‚â°-trans)
open import Data.Fin using (Fin) renaming (zero to fzero)
open import Data.Fin.Properties using () renaming (_‚âü_ to _‚âüùîΩ_)
open import Data.Nat using (‚Ñï; suc; zero; z‚â§n; s‚â§s; decTotalOrder; _‚äî_; _*_; _‚à∏_; module ‚â§-Reasoning) renaming (_‚â§_ to _‚â§‚Ñï_; _‚â•_ to _‚â•‚Ñï_; _<_ to _<‚Ñï_; _‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (n‚â§1+n; 1+n‚â∞n; m‚â§m‚äîn; ‚äî-sel; n‚à∏m‚â§n; ‚â§-step; ‚à∏-mono; +-‚à∏-assoc)
open import Data.List using ([]; _‚à∑_; List; foldr; map; zipWith)
open import Data.List.Properties using (map-cong)
open import Data.List.All using (All; []; _‚à∑_) renaming (map to All-map; lookup to All-lookup; tabulate to All-tabulate)
open import Data.List.All.Properties using (map-All)
open import Data.List.Any as Any using (here; there)
open import Data.Product using (_√ó_; ‚àÉ‚ÇÇ; _,_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Function using (_‚àò_)

open import RoutingLib.Data.List using (max; allFinPairs)
open import RoutingLib.Data.List.Properties using (foldr-√ópreserves; foldr-forces√ó; max[xs]‚â§x; max[xs]‚â°x)
open import RoutingLib.Data.List.All.Properties using (All-map‚Å∫‚ÇÇ)
open import RoutingLib.Data.Nat.Properties using (‚Ñï‚Çõ; ‚äî-comm; n‚â§m‚äîn; ‚äî-mono-‚â§; 0-id·µ£-‚äî; m‚äîn‚â°m‚áín‚â§m; o‚à∏n‚â§o‚à∏m‚àßm‚â§o‚áím‚â§n; m<n‚áín‚â°1+o; <‚áí‚â§; <‚áí‚â¢; ‚äî-preserves-‚â°x; ‚äî-forces√ó-‚â§x; ‚äî-√ópreserves-‚â§x; ‚äî-‚äépreserves‚Çó-x‚â§; m<n‚áí0<n‚à∏m; n‚â§m‚áím‚äîn‚â°m) renaming (‚â§-reflexive to ‚â§‚Ñï-reflexive; ‚â§-refl to ‚â§‚Ñï-refl; ‚â§-trans to ‚â§‚Ñï-trans; ‚â§-antisym to ‚â§‚Ñï-antisym)
open import RoutingLib.Routing.Definitions using (RoutingProblem; RoutingAlgebra)
open import RoutingLib.Data.List.Membership.Properties using (‚àà-map‚Åª; foldr-‚àà)
open import RoutingLib.Data.List.Membership.Propositional using (_‚àà_; ‚àà-map‚Å∫; ‚àà-allFinPairs‚Å∫)
open import RoutingLib.Function.Distance using (IsUltrametric; MaxTriangleIneq)

open import RoutingLib.Routing.BellmanFord.GeneralConvergence.SufficientConditions

module RoutingLib.Routing.BellmanFord.GeneralConvergence.Step2_Ultrametric
  {a b ‚Ñì n-1}
  {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  (ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)) 
  (sc : SufficientConditions ùì°ùìê)
  where
  
  open import RoutingLib.Routing.BellmanFord.GeneralConvergence.Step1_HeightFunction ùì°ùìü sc
  
  open RoutingProblem ùì°ùìü
  open SufficientConditions sc
  

  private
    n : ‚Ñï
    n = suc n-1

    ùîΩ¬≤‚Çõ : Setoid lzero lzero
    ùîΩ¬≤‚Çõ = ‚â°-setoid (Fin n √ó Fin n)

  ----------------------------------------
  -- Constructing the distance function --
  ----------------------------------------
  -- Using the height function over Route, we can now generate 
  -- a distance function over the RMatrices

  -- maximum distance value
  d‚Çò‚Çê‚Çì : ‚Ñï
  d‚Çò‚Çê‚Çì = h‚Çò‚Çê‚Çì

  d‚Çõ·µ§‚Çö : ‚Ñï
  d‚Çõ·µ§‚Çö = suc d‚Çò‚Çê‚Çì
  
  abstract

    -- an intermediate helper function
    d‚Çï : Route ‚Üí Route ‚Üí ‚Ñï
    d‚Çï x y = (d‚Çõ·µ§‚Çö ‚à∏ h x) ‚äî (d‚Çõ·µ§‚Çö ‚à∏ h y)

    -- the elementwise distance measures the distance between two routes 
    d‚Çë : Route ‚Üí Route ‚Üí ‚Ñï
    d‚Çë x y with x ‚âü y
    ... | yes _ = zero
    ... | no  _ = d‚Çï x y

    -- collates all the elementwise distances between two matrices
    allDistances : RMatrix ‚Üí RMatrix ‚Üí List ‚Ñï
    allDistances X Y = map (Œª {(i , j) ‚Üí d‚Çë (X i j) (Y i j)}) (allFinPairs n)

    -- the overall distance between two iterations
    d : RMatrix ‚Üí RMatrix ‚Üí ‚Ñï
    d X Y = max 0 (allDistances X Y)

    ----------------
    -- Properties --
    ----------------
    -- Proof that the functions above have the required properties to
    -- be a similarity function

    h‚â§d‚Çõ·µ§‚Çö : ‚àÄ {x} ‚Üí h x ‚â§‚Ñï d‚Çõ·µ§‚Çö
    h‚â§d‚Çõ·µ§‚Çö = ‚â§‚Ñï-trans h‚â§h‚Çò‚Çê‚Çì (n‚â§1+n h‚Çò‚Çê‚Çì)

    0<d‚Çò‚Çê‚Çì‚à∏h : ‚àÄ {x} ‚Üí 0 <‚Ñï (suc d‚Çò‚Çê‚Çì ‚à∏ h x) 
    0<d‚Çò‚Çê‚Çì‚à∏h = m<n‚áí0<n‚à∏m (s‚â§s h‚â§h‚Çò‚Çê‚Çì)

    d‚Çõ·µ§‚Çö‚à∏h‚â§d‚Çò‚Çê‚Çì : ‚àÄ {x} ‚Üí (suc d‚Çò‚Çê‚Çì) ‚à∏ h x ‚â§‚Ñï d‚Çò‚Çê‚Çì
    d‚Çõ·µ§‚Çö‚à∏h‚â§d‚Çò‚Çê‚Çì {x} with m<n‚áín‚â°1+o (1‚â§h x)
    ... | (o , h‚â°1+o) = subst (Œª v ‚Üí d‚Çõ·µ§‚Çö ‚à∏ v ‚â§‚Ñï d‚Çò‚Çê‚Çì) (‚â°-sym h‚â°1+o) (n‚à∏m‚â§n o d‚Çò‚Çê‚Çì)

    -- d‚Çï

    0<d‚Çï : ‚àÄ {x y} ‚Üí 0 <‚Ñï d‚Çï x y
    0<d‚Çï = ‚äî-‚äépreserves‚Çó-x‚â§ _ 0<d‚Çò‚Çê‚Çì‚à∏h

    d‚Çï<d‚Çò‚Çê‚Çì : ‚àÄ x y ‚Üí d‚Çï x y ‚â§‚Ñï d‚Çò‚Çê‚Çì
    d‚Çï<d‚Çò‚Çê‚Çì x y = ‚äî-√ópreserves-‚â§x d‚Çõ·µ§‚Çö‚à∏h‚â§d‚Çò‚Çê‚Çì d‚Çõ·µ§‚Çö‚à∏h‚â§d‚Çò‚Çê‚Çì
    
    d‚Çï-sym : ‚àÄ x y ‚Üí d‚Çï x y ‚â° d‚Çï y x
    d‚Çï-sym x y = ‚äî-comm (d‚Çõ·µ§‚Çö ‚à∏ h x) (d‚Çõ·µ§‚Çö ‚à∏ h y)

    d‚Çï-cong‚ÇÇ : d‚Çï Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
    d‚Çï-cong‚ÇÇ x‚âày u‚âàv = cong‚ÇÇ _‚äî_ (cong (d‚Çõ·µ§‚Çö ‚à∏_) (h-resp-‚âà x‚âày)) (cong (d‚Çõ·µ§‚Çö ‚à∏_) (h-resp-‚âà u‚âàv))

    d‚Çï-mono-‚â§ : d‚Çï Preserves‚ÇÇ _‚â§_ ‚ü∂ _‚â§_ ‚ü∂ _‚â•‚Ñï_
    d‚Çï-mono-‚â§ x‚â§y u‚â§v = ‚äî-mono-‚â§ (‚à∏-mono ‚â§‚Ñï-refl (h-resp-‚â§ x‚â§y)) (‚à∏-mono ‚â§‚Ñï-refl (h-resp-‚â§ u‚â§v))
    
    d‚Çï-maxTriIneq : MaxTriangleIneq S d‚Çï
    d‚Çï-maxTriIneq x y z = ‚äî-mono-‚â§ (m‚â§m‚äîn (d‚Çõ·µ§‚Çö ‚à∏ h x) (d‚Çõ·µ§‚Çö ‚à∏ h y)) (n‚â§m‚äîn (d‚Çõ·µ§‚Çö ‚à∏ h y) (d‚Çõ·µ§‚Çö ‚à∏ h z))


    -- Elementwise distance

    d‚Çë‚â§d‚Çò‚Çê‚Çì : ‚àÄ x y ‚Üí d‚Çë x y ‚â§‚Ñï d‚Çò‚Çê‚Çì
    d‚Çë‚â§d‚Çò‚Çê‚Çì x y with x ‚âü y
    ... | yes _ = z‚â§n
    ... | no  _ = d‚Çï<d‚Çò‚Çê‚Çì x y

    x‚âày‚áíd‚Çë‚â°0 : ‚àÄ {x y} ‚Üí x ‚âà y ‚Üí d‚Çë x y ‚â° 0
    x‚âày‚áíd‚Çë‚â°0 {x} {y} x‚âày with x ‚âü y
    ... | yes _    = ‚â°-refl
    ... | no  x·µ¢‚±º‚âây·µ¢‚±º = contradiction x‚âày x·µ¢‚±º‚âây·µ¢‚±º

    d‚Çë‚â°0‚áíx‚âày : ‚àÄ {x y} ‚Üí d‚Çë x y ‚â° 0 ‚Üí x ‚âà y
    d‚Çë‚â°0‚áíx‚âày {x} {y} d‚Çë‚â°0 with x ‚âü y 
    ... | yes x‚âày = x‚âày
    ... | no  _   = contradiction (‚â°-sym d‚Çë‚â°0) (<‚áí‚â¢ 0<d‚Çï)

    x‚âây‚áíd‚Çõ·µ§‚Çö‚à∏hx‚â§d‚Çë : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí d‚Çõ·µ§‚Çö ‚à∏ h x ‚â§‚Ñï d‚Çë x y
    x‚âây‚áíd‚Çõ·µ§‚Çö‚à∏hx‚â§d‚Çë {x} {y} x‚âây with x ‚âü y
    ... | yes x‚âày = contradiction x‚âày x‚âây
    ... | no  _   = m‚â§m‚äîn (d‚Çõ·µ§‚Çö ‚à∏ h x) (d‚Çõ·µ§‚Çö ‚à∏ h y)

    d‚Çë‚â°d‚Çõ·µ§‚Çö‚à∏hx‚áíhx‚â§hy : ‚àÄ {x y} ‚Üí d‚Çë x y ‚â° d‚Çõ·µ§‚Çö ‚à∏ h x ‚Üí h x ‚â§‚Ñï h y
    d‚Çë‚â°d‚Çõ·µ§‚Çö‚à∏hx‚áíhx‚â§hy {x} {y} d‚Çë‚â°d‚Çò‚Çê‚Çì‚à∏hx with x ‚âü y
    ... | yes x‚âày = contradiction (‚â°-trans d‚Çë‚â°d‚Çò‚Çê‚Çì‚à∏hx (+-‚à∏-assoc 1 h‚â§h‚Çò‚Çê‚Çì)) Œª()
    ... | no  x‚âây = o‚à∏n‚â§o‚à∏m‚àßm‚â§o‚áím‚â§n (m‚äîn‚â°m‚áín‚â§m d‚Çë‚â°d‚Çò‚Çê‚Çì‚à∏hx) h‚â§d‚Çõ·µ§‚Çö

    hx‚â§hy‚áíd‚Çë‚â°d‚Çõ·µ§‚Çö‚à∏hx : ‚àÄ {x y} ‚Üí h x <‚Ñï h y ‚Üí d‚Çë x y ‚â° d‚Çõ·µ§‚Çö ‚à∏ h x
    hx‚â§hy‚áíd‚Çë‚â°d‚Çõ·µ§‚Çö‚à∏hx {x} {y} hx<hy with x ‚âü y
    ... | yes x‚âày = contradiction (h-resp-‚âà x‚âày) (<‚áí‚â¢ hx<hy)
    ... | no  x‚âây = n‚â§m‚áím‚äîn‚â°m (‚à∏-mono (‚â§‚Ñï-refl {d‚Çõ·µ§‚Çö}) (<‚áí‚â§ hx<hy))
    
    d‚Çëxy=hx‚äéhy : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí (d‚Çë x y ‚â° d‚Çõ·µ§‚Çö ‚à∏ h x) ‚äé (d‚Çë x y ‚â° d‚Çõ·µ§‚Çö ‚à∏ h y)
    d‚Çëxy=hx‚äéhy {x} {y} x‚âây with x ‚âü y
    ... | yes x‚âày = contradiction x‚âày x‚âây
    ... | no  _   = ‚äî-sel (d‚Çõ·µ§‚Çö ‚à∏ h x) (d‚Çõ·µ§‚Çö ‚à∏ h y)

    0<d‚Çë‚áíx‚âây : ‚àÄ {x y} ‚Üí 0 <‚Ñï d‚Çë x y ‚Üí x ‚ââ y
    0<d‚Çë‚áíx‚âây {x} {y} 0<d‚Çë with x ‚âü y 
    ... | yes x‚âày‚±º = contradiction 0<d‚Çë 1+n‚â∞n 
    ... | no  x‚âây = x‚âây

    d‚Çë-sym : ‚àÄ x y ‚Üí d‚Çë x y ‚â° d‚Çë y x
    d‚Çë-sym x y with x ‚âü y | y ‚âü x
    ... | yes _   | yes _   = ‚â°-refl
    ... | no  x‚âây | yes y‚âàx = contradiction (sym y‚âàx) x‚âây 
    ... | yes x‚âày | no  y‚ââx = contradiction (sym x‚âày) y‚ââx 
    ... | no  _   | no  _   = d‚Çï-sym x y

    d‚Çë-cong‚ÇÇ : d‚Çë Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
    d‚Çë-cong‚ÇÇ {x} {y} {u} {v} x‚âày u‚âàv with x ‚âü u | y ‚âü v
    ... | yes _   | yes _   = ‚â°-refl
    ... | yes x‚âàu | no  y‚ââv = contradiction (trans (trans (sym x‚âày) x‚âàu) u‚âàv) y‚ââv
    ... | no  x‚ââu | yes y‚âàv = contradiction (trans (trans x‚âày y‚âàv) (sym u‚âàv)) x‚ââu
    ... | no  _   | no  _   = d‚Çï-cong‚ÇÇ x‚âày u‚âàv

    d‚Çë-maxTriIneq : MaxTriangleIneq S d‚Çë
    d‚Çë-maxTriIneq x y z with x ‚âü y | y ‚âü z | x ‚âü z
    ... | _       | _       | yes _  = z‚â§n
    ... | yes x‚âày | yes y‚âàz | no x‚ââz = contradiction (trans x‚âày y‚âàz) x‚ââz
    ... | yes x‚âày | no  _   | no _   = subst (d‚Çï x z ‚â§‚Ñï_) (d‚Çï-cong‚ÇÇ x‚âày refl) ‚â§‚Ñï-refl
    ... | no  _   | yes y‚âàz | no _   = subst (_‚â§‚Ñï d‚Çï x y ‚äî 0) (‚â°-trans (‚äî-comm (d‚Çï x y) 0) (d‚Çï-cong‚ÇÇ refl y‚âàz)) ‚â§‚Ñï-refl
    ... | no  _   | no  _   | no _   = d‚Çï-maxTriIneq x y z


    -- All distances

    0‚â§allDistances : ‚àÄ X Y ‚Üí All (0 ‚â§‚Ñï_) (allDistances X Y)
    0‚â§allDistances X Y = All-map‚Å∫‚ÇÇ (Œª _ ‚Üí z‚â§n) (allFinPairs n)

    allDistances‚â§d‚Çò‚Çê‚Çì : ‚àÄ X Y ‚Üí All (_‚â§‚Ñï d‚Çò‚Çê‚Çì) (allDistances X Y)
    allDistances‚â§d‚Çò‚Çê‚Çì X Y = All-map‚Å∫‚ÇÇ (Œª {(i , j) ‚Üí d‚Çë‚â§d‚Çò‚Çê‚Çì (X i j) (Y i j)}) (allFinPairs n)

    X‚âàY‚áíalldistances‚â°0 : ‚àÄ {X} {Y} ‚Üí X ‚âà‚Çò Y ‚Üí All (_‚â° 0) (allDistances X Y)
    X‚âàY‚áíalldistances‚â°0 {X} {Y} X‚âàY = All-map‚Å∫‚ÇÇ (Œª {(i , j) ‚Üí x‚âày‚áíd‚Çë‚â°0 (X‚âàY i j)}) (allFinPairs n)

    allDistances-cong‚ÇÇ : allDistances Preserves‚ÇÇ _‚âà‚Çò_ ‚ü∂ _‚âà‚Çò_ ‚ü∂ _‚â°_
    allDistances-cong‚ÇÇ X‚âàY U‚âàV = map-cong (Œª {(i , j) ‚Üí d‚Çë-cong‚ÇÇ (X‚âàY i j) (U‚âàV i j)}) (allFinPairs n)

    allDistances-sym : ‚àÄ X Y ‚Üí allDistances X Y ‚â° allDistances Y X
    allDistances-sym X Y = map-cong (Œª {(i , j) ‚Üí d‚Çë-sym (X i j) (Y i j)}) (allFinPairs n)

    allDistances‚â§d : ‚àÄ X Y ‚Üí All (_‚â§‚Ñï d X Y) (allDistances X Y)
    allDistances‚â§d X Y = foldr-forces√ó ‚äî-forces√ó-‚â§x 0 (allDistances X Y) ‚â§‚Ñï-refl

    ‚àà-allDistances : ‚àÄ X Y i j ‚Üí d‚Çë (X i j) (Y i j) ‚àà allDistances X Y
    ‚àà-allDistances X Y i j = ‚àà-map‚Å∫ (Œª {(i , j) ‚Üí d‚Çë (X i j) (Y i j)}) (‚àà-allFinPairs‚Å∫ i j)

    -- Similarity

    d-sym : ‚àÄ X Y ‚Üí d X Y ‚â° d Y X
    d-sym X Y = cong (max 0) (allDistances-sym X Y)

    d-cong‚ÇÇ : d Preserves‚ÇÇ _‚âà‚Çò_ ‚ü∂ _‚âà‚Çò_ ‚ü∂ _‚â°_
    d-cong‚ÇÇ X‚âàY U‚âàV = cong (max 0) (allDistances-cong‚ÇÇ X‚âàY U‚âàV)
    
    d‚Çë‚â§d : ‚àÄ X Y i j ‚Üí d‚Çë (X i j) (Y i j) ‚â§‚Ñï d X Y
    d‚Çë‚â§d X Y i j = All-lookup (map-All (allDistances‚â§d X Y)) (‚àà-allFinPairs‚Å∫ i j)

    d‚â§d‚Çò‚Çê‚Çì : ‚àÄ X Y ‚Üí d X Y ‚â§‚Ñï d‚Çò‚Çê‚Çì
    d‚â§d‚Çò‚Çê‚Çì X Y = max[xs]‚â§x (allDistances‚â§d‚Çò‚Çê‚Çì X Y) z‚â§n

    d<d‚Çõ·µ§‚Çö : ‚àÄ X Y ‚Üí d X Y <‚Ñï d‚Çõ·µ§‚Çö
    d<d‚Çõ·µ§‚Çö X Y = s‚â§s (d‚â§d‚Çò‚Çê‚Çì X Y)
    
    d‚â§d‚Çõ·µ§‚Çö : ‚àÄ X Y ‚Üí d X Y ‚â§‚Ñï d‚Çõ·µ§‚Çö
    d‚â§d‚Çõ·µ§‚Çö X Y = <‚áí‚â§ (d<d‚Çõ·µ§‚Çö X Y)
    
    X·µ¢‚±º‚ââY·µ¢‚±º‚áíd‚Çõ·µ§‚Çö‚à∏hX·µ¢‚±º‚â§d : ‚àÄ {X Y i j} ‚Üí X i j ‚ââ Y i j ‚Üí d‚Çõ·µ§‚Çö ‚à∏ h (X i j) ‚â§‚Ñï d X Y 
    X·µ¢‚±º‚ââY·µ¢‚±º‚áíd‚Çõ·µ§‚Çö‚à∏hX·µ¢‚±º‚â§d {X} {Y} {i} {j} X·µ¢‚±º‚ââY·µ¢‚±º = ‚â§‚Ñï-trans (x‚âây‚áíd‚Çõ·µ§‚Çö‚à∏hx‚â§d‚Çë X·µ¢‚±º‚ââY·µ¢‚±º) (d‚Çë‚â§d X Y i j)

    X·µ¢‚±º‚ââY·µ¢‚±º‚áíd‚Çõ·µ§‚Çö‚à∏hY·µ¢‚±º‚â§d : ‚àÄ {X Y i j} ‚Üí X i j ‚ââ Y i j ‚Üí d‚Çõ·µ§‚Çö ‚à∏ h (Y i j) ‚â§‚Ñï d X Y
    X·µ¢‚±º‚ââY·µ¢‚±º‚áíd‚Çõ·µ§‚Çö‚à∏hY·µ¢‚±º‚â§d {X} {Y} X·µ¢‚±º‚ââY·µ¢‚±º = subst (_ ‚â§‚Ñï_) (d-sym Y X) (X·µ¢‚±º‚ââY·µ¢‚±º‚áíd‚Çõ·µ§‚Çö‚à∏hX·µ¢‚±º‚â§d (X·µ¢‚±º‚ââY·µ¢‚±º ‚àò sym))
    
    X‚âàY‚áíd‚â°0 : ‚àÄ {X Y} ‚Üí X ‚âà‚Çò Y ‚Üí d X Y ‚â° 0
    X‚âàY‚áíd‚â°0 {X} {Y} X‚âàY = foldr-√ópreserves ‚äî-preserves-‚â°x (X‚âàY‚áíalldistances‚â°0 X‚âàY) ‚â°-refl

    d‚â°0‚áíX‚âàY : ‚àÄ {X Y} ‚Üí d X Y ‚â° 0 ‚Üí X ‚âà‚Çò Y
    d‚â°0‚áíX‚âàY {X} {Y} d‚â°0 i j = d‚Çë‚â°0‚áíx‚âày (‚â§‚Ñï-antisym (subst (d‚Çë (X i j) (Y i j) ‚â§‚Ñï_) d‚â°0 (d‚Çë‚â§d X Y i j)) z‚â§n)

    d‚â°d‚Çë : ‚àÄ X Y ‚Üí ‚àÉ‚ÇÇ Œª i j ‚Üí d X Y ‚â° d‚Çë (X i j) (Y i j)
    d‚â°d‚Çë X Y with foldr-‚àà ‚Ñï‚Çõ ‚äî-sel 0 (allDistances X Y)
    ... | inj‚ÇÅ d‚â°0 = fzero , fzero , (‚â°-trans d‚â°0 (‚â°-sym (x‚âày‚áíd‚Çë‚â°0 (d‚â°0‚áíX‚âàY d‚â°0 fzero fzero))))
    ... | inj‚ÇÇ d‚ààallDistances with ‚àà-map‚Åª ùîΩ¬≤‚Çõ ‚Ñï‚Çõ d‚ààallDistances
    ...   | (i , j) , _ , d‚â°d‚ÇëX·µ¢‚±ºY·µ¢‚±º = i , j , d‚â°d‚ÇëX·µ¢‚±ºY·µ¢‚±º

    d‚â°d‚Çõ·µ§‚Çö‚à∏X·µ¢‚±º : ‚àÄ {X Y i j} ‚Üí (‚àÄ k l ‚Üí d‚Çë (X k l) (Y k l) ‚â§‚Ñï d‚Çë (X i j) (Y i j)) ‚Üí h (X i j) <‚Ñï h (Y i j) ‚Üí d X Y ‚â° d‚Çõ·µ§‚Çö ‚à∏ h (X i j) 
    d‚â°d‚Çõ·µ§‚Çö‚à∏X·µ¢‚±º {X} {Y} {i} {j} d‚Çë‚Çñ‚Çó‚â§d‚Çë·µ¢‚±º hX·µ¢‚±º<hY·µ¢‚±º = max[xs]‚â°x (subst (_‚àà _) (hx‚â§hy‚áíd‚Çë‚â°d‚Çõ·µ§‚Çö‚à∏hx hX·µ¢‚±º<hY·µ¢‚±º) (‚àà-allDistances X Y i j)) (All-map‚Å∫‚ÇÇ (Œª {(k , l) ‚Üí subst (_ ‚â§‚Ñï_) (hx‚â§hy‚áíd‚Çë‚â°d‚Çõ·µ§‚Çö‚à∏hx hX·µ¢‚±º<hY·µ¢‚±º) (d‚Çë‚Çñ‚Çó‚â§d‚Çë·µ¢‚±º k l)}) (allFinPairs n)) z‚â§n

    d‚â°d‚Çõ·µ§‚Çö‚à∏Y·µ¢‚±º : ‚àÄ {X Y i j} ‚Üí (‚àÄ k l ‚Üí d‚Çë (X k l) (Y k l) ‚â§‚Ñï d‚Çë (X i j) (Y i j)) ‚Üí h (Y i j) <‚Ñï h (X i j) ‚Üí d X Y ‚â° d‚Çõ·µ§‚Çö ‚à∏ h (Y i j)
    d‚â°d‚Çõ·µ§‚Çö‚à∏Y·µ¢‚±º d‚Çë‚Çñ‚Çó‚â§d‚Çë·µ¢‚±º hY·µ¢‚±º<hX·µ¢‚±º = ‚â°-trans (d-sym _ _) (d‚â°d‚Çõ·µ§‚Çö‚à∏X·µ¢‚±º (Œª k l ‚Üí subst‚ÇÇ _‚â§‚Ñï_ (d‚Çë-sym _ _) (d‚Çë-sym _ _) (d‚Çë‚Çñ‚Çó‚â§d‚Çë·µ¢‚±º k l)) hY·µ¢‚±º<hX·µ¢‚±º)

    d-maxTriIneq : MaxTriangleIneq ‚ÑùùïÑ‚Çõ d
    d-maxTriIneq X Y Z with d‚â°d‚Çë X Z
    ... | i , j , dÀ£·∂ª‚â°ij = 
      begin
        d X Z                                   ‚â°‚ü® dÀ£·∂ª‚â°ij ‚ü©
        d‚Çë (X i j) (Z i j)                      ‚â§‚ü® d‚Çë-maxTriIneq (X i j) (Y i j) (Z i j) ‚ü©
        d‚Çë (X i j) (Y i j) ‚äî d‚Çë (Y i j) (Z i j) ‚â§‚ü® ‚äî-mono-‚â§ (d‚Çë‚â§d X Y i j) (d‚Çë‚â§d Y Z i j) ‚ü©
        d X Y ‚äî d Y Z
      ‚àé
      where open ‚â§-Reasoning

    d-findWorstDisagreement : ‚àÄ {X Y} ‚Üí X ‚ââ‚Çò Y 
                              ‚Üí ‚àÉ‚ÇÇ Œª i j 
                                 ‚Üí X i j ‚ââ Y i j
                                   √ó d X Y ‚â° d‚Çë (X i j) (Y i j)
                                   √ó (d‚Çë (X i j) (Y i j) ‚â° d‚Çõ·µ§‚Çö ‚à∏ h (X i j) ‚äé d‚Çë (X i j) (Y i j) ‚â° d‚Çõ·µ§‚Çö ‚à∏ h (Y i j))
    d-findWorstDisagreement {X} {Y} X‚ââY with d X Y ‚âü‚Ñï 0 | d‚â°d‚Çë X Y 
    ... | yes d‚â°0 | _ = contradiction (d‚â°0‚áíX‚âàY d‚â°0) X‚ââY
    ... | no  d‚â¢0 | i , j , d‚â°d‚ÇëX·µ¢‚±ºY·µ¢‚±º with Œª X·µ¢‚±º‚âàY·µ¢‚±º ‚Üí d‚â¢0 (‚â°-trans d‚â°d‚ÇëX·µ¢‚±ºY·µ¢‚±º (x‚âày‚áíd‚Çë‚â°0 X·µ¢‚±º‚âàY·µ¢‚±º))
    ...   | X·µ¢‚±º‚ââY·µ¢‚±º  = i , j , X·µ¢‚±º‚ââY·µ¢‚±º , d‚â°d‚ÇëX·µ¢‚±ºY·µ¢‚±º , d‚Çëxy=hx‚äéhy X·µ¢‚±º‚ââY·µ¢‚±º
    
    -----------------
    -- Ultrametric --
    -----------------
    -- We have now shown that d is an ultrametric

    d-isUltrametric : IsUltrametric ‚ÑùùïÑ‚Çõ d
    d-isUltrametric = record 
      { eq‚áí0        = X‚âàY‚áíd‚â°0 
      ; 0‚áíeq        = d‚â°0‚áíX‚âàY 
      ; sym         = d-sym 
      ; maxTriangle = d-maxTriIneq 
      }
