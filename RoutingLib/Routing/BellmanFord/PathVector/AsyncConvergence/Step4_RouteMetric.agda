open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚âÆ_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties
  using (‚â§-trans; ‚â§-refl; ‚â§-reflexive; m‚â§m+n; n‚â§1+n; m+n‚à∏m‚â°n; n‚â§m+n; +-mono-‚â§;
        ‚à∏-mono;  ‚äì-mono-<;+-cancelÀ°-‚â§;  m‚â§m‚äîn; m‚äìn‚â§m; ‚â∞‚áí‚â•; <‚áí‚â±; <‚áí‚âØ; n‚â§m‚äîn;
        m‚äìn‚â§n; <-transÀ°; <-trans ≥; +-distribÀ°-‚äî; <‚áí‚â§; +-comm; ‚â§-steps ≥; +-mono ≥-‚â§; +-mono ≥-<)
open import Data.Fin using (Fin)
open import Data.Fin.Properties using () renaming (_‚âü_ to _‚âüùîΩ_)
open import Data.Fin.Subset using (Subset; _‚àà_; _‚àâ_; ‚ä§; ‚ÅÖ_‚ÅÜ)
open import Data.Fin.Subset.Properties using (x‚ààp‚à©q‚Å∫; x‚àà‚ÅÖx‚ÅÜ; ‚àà‚ä§)
open import Data.Fin.Dec using (_‚àà?_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; sym; trans; cong; subst; subst‚ÇÇ; cong‚ÇÇ)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_)
open import Induction.WellFounded using (Acc; acc)
open import Induction.Nat using (<-wellFounded)

open import RoutingLib.Routing.Definitions
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions using () renaming (SufficientConditions to GeneralSufficientConditions)
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; n<m‚áín‚äìo<m; n‚â§m‚áín‚äìo‚â§m; m<n‚áín‚â¢0; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Data.Matrix using (Any; map; min‚Å∫)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫[M]<min‚Å∫[N])
open import RoutingLib.Data.Table using (Table)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
open import RoutingLib.Data.Fin.Subset using (_\\_) renaming (size to size‚Çõ)
open import RoutingLib.Data.Fin.Subset.Properties using (size[p\\q]<size[p]; i‚àâp\\q‚áíi‚àâp; i‚àâ‚ÅÖj‚ÅÜ)
import RoutingLib.Function.Metric as Metric
import RoutingLib.Function.Metric.MaxLift as MaxLift

import RoutingLib.Routing.BellmanFord.PathVector.AsyncConvergence.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.AsyncConvergence.Step2_InconsistentRouteMetric as Step2
import RoutingLib.Routing.BellmanFord.PathVector.AsyncConvergence.Step3_ConsistentRouteMetric as Step3

module RoutingLib.Routing.BellmanFord.PathVector.AsyncConvergence.Step4_RouteMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
  open Step2 ùìüùì¢ùìí
  open Step3 ùìüùì¢ùìí
  open Metric S using (Ultrametric; IsUltrametric; Bounded; MaxTriangleIneq)

  abstract
  
    H·∂ú : ‚Ñï
    H·∂ú = suc (proj‚ÇÅ d·µ£·∂ú-bounded)

    H‚Å± : ‚Ñï
    H‚Å± = proj‚ÇÅ d·µ£‚Å±-bounded

    d·µ£·∂ú<H·∂ú : ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí d·µ£·∂ú x·∂ú y·∂ú < H·∂ú
    d·µ£·∂ú<H·∂ú x·∂ú y·∂ú = s‚â§s (proj‚ÇÇ d·µ£·∂ú-bounded x·∂ú y·∂ú)
    
    d·µ£·∂ú<H·∂ú+x : ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) z ‚Üí d·µ£·∂ú x·∂ú y·∂ú < H·∂ú + z
    d·µ£·∂ú<H·∂ú+x x·∂ú y·∂ú z = s‚â§s (‚â§-trans (proj‚ÇÇ d·µ£·∂ú-bounded x·∂ú y·∂ú) (m‚â§m+n _ z))

    H·∂ú<H·∂ú+d·µ£‚Å± : ‚àÄ x y ‚Üí H·∂ú < H·∂ú + d·µ£‚Å± x y
    H·∂ú<H·∂ú+d·µ£‚Å± x y = begin
      1 + H·∂ú       ‚â°‚ü® +-comm 1 H·∂ú ‚ü©
      H·∂ú + 1       ‚â§‚ü® +-mono ≥-‚â§ H·∂ú (1‚â§d·µ£‚Å± x y) ‚ü©
      H·∂ú + d·µ£‚Å± x y ‚àé
      where open ‚â§-Reasoning

    --------------------------------
    -- An ultrametric over tables --
    --------------------------------

    d·µ£ : Route ‚Üí Route ‚Üí ‚Ñï
    d·µ£ x y with x ‚âü y | ùë™? x | ùë™? y
    ... | yes _ | _      | _      = zero
    ... | no  _ | yes x·∂ú | yes y·∂ú = d·µ£·∂ú x·∂ú y·∂ú
    ... | no  _ | _      | _      = H·∂ú + d·µ£‚Å± x y
  
    d·µ£-cong : d·µ£ Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
    d·µ£-cong {W} {X} {Y} {Z} W‚âàX Y‚âàZ with W ‚âü Y | X ‚âü Z 
    ... | yes _   | yes _   = refl
    ... | yes W‚âàY | no  X‚ââZ = contradiction (‚âà-trans (‚âà-trans (‚âà-sym W‚âàX) W‚âàY) Y‚âàZ) X‚ââZ
    ... | no  W‚ââY | yes X‚âàZ = contradiction (‚âà-trans (‚âà-trans W‚âàX X‚âàZ) (‚âà-sym Y‚âàZ)) W‚ââY
    ... | no _    | no _    with ùë™? W | ùë™? X | ùë™? Y | ùë™? Z
    ...   | no  W‚Å± | yes X·∂ú | _      | _      = contradiction (ùë™-cong (‚âà-sym W‚âàX) X·∂ú) W‚Å±
    ...   | yes W·∂ú | no  X‚Å± | _      |  _     = contradiction (ùë™-cong W‚âàX W·∂ú) X‚Å±
    ...   | _      | _      | yes Y·∂ú | no  Z‚Å± = contradiction (ùë™-cong Y‚âàZ Y·∂ú) Z‚Å±
    ...   | _      | _      | no  Y‚Å± | yes Z·∂ú = contradiction (ùë™-cong (‚âà-sym Y‚âàZ) Z·∂ú) Y‚Å±
    ...   | no _   | no _   | _      | _      = cong (H·∂ú +_) (d·µ£‚Å±-cong W‚âàX Y‚âàZ)
    ...   | yes _  | yes _  | no  _  | no  _  = cong (H·∂ú +_) (d·µ£‚Å±-cong W‚âàX Y‚âàZ)
    ...   | yes w·∂ú | yes x·∂ú | yes y·∂ú | yes z·∂ú = d·µ£·∂ú-cong w·∂ú y·∂ú x·∂ú z·∂ú W‚âàX Y‚âàZ
  
    x‚âày‚áíd·µ£‚â°0 : ‚àÄ {X Y} ‚Üí X ‚âà Y ‚Üí d·µ£ X Y ‚â° 0
    x‚âày‚áíd·µ£‚â°0 {X} {Y} X‚âàY with X ‚âü Y
    ... | yes _   = refl
    ... | no  X‚ââY = contradiction X‚âàY X‚ââY

    d·µ£‚â°0‚áíx‚âày : ‚àÄ {X Y} ‚Üí d·µ£ X Y ‚â° 0 ‚Üí X ‚âà Y
    d·µ£‚â°0‚áíx‚âày {X} {Y} d·µ£‚â°0 with X ‚âü Y
    ... | yes X‚âàY = X‚âàY
    ... | no  _   with ùë™? X | ùë™? Y
    ...   | yes X·∂ú | yes Y·∂ú  = d·µ£·∂ú‚â°0‚áíx‚âày X·∂ú Y·∂ú d·µ£‚â°0
    ...   | no  X‚Å± | _      = contradiction d·µ£‚â°0 Œª()
    ...   | yes X·∂ú | no  Y‚Å± = contradiction d·µ£‚â°0 Œª()
  
    d·µ£-sym : ‚àÄ X Y ‚Üí d·µ£ X Y ‚â° d·µ£ Y X
    d·µ£-sym X Y with X ‚âü Y | Y ‚âü X
    ... | yes _   | yes _   = refl
    ... | yes X‚âàY | no  Y‚ââX = contradiction (‚âà-sym X‚âàY) Y‚ââX
    ... | no  X‚ââY | yes Y‚âàX = contradiction (‚âà-sym Y‚âàX) X‚ââY
    ... | no _    | no _    with ùë™? X | ùë™? Y
    ...   | yes X·∂ú | yes Y·∂ú = d·µ£·∂ú-sym X·∂ú Y·∂ú
    ...   | no  _  | no  _  = cong (H·∂ú +_) (d·µ£‚Å±-sym X Y)
    ...   | no  _  | yes _  = cong (H·∂ú +_) (d·µ£‚Å±-sym X Y)
    ...   | yes _  | no  _  = cong (H·∂ú +_) (d·µ£‚Å±-sym X Y)

    d·µ£-maxTriIneq-lemma : ‚àÄ X Y Z ‚Üí H·∂ú + d·µ£‚Å± X Z ‚â§ (H·∂ú + d·µ£‚Å± X Y) ‚äî (H·∂ú + d·µ£‚Å± Y Z)
    d·µ£-maxTriIneq-lemma X Y Z = begin
      H·∂ú + d·µ£‚Å± X Z                    ‚â§‚ü® +-mono ≥-‚â§ H·∂ú (d·µ£‚Å±-maxTriIneq X Y Z) ‚ü©
      H·∂ú + (d·µ£‚Å± X Y ‚äî d·µ£‚Å± Y Z)        ‚â°‚ü® +-distribÀ°-‚äî H·∂ú _ _ ‚ü©
      (H·∂ú + d·µ£‚Å± X Y) ‚äî (H·∂ú + d·µ£‚Å± Y Z) ‚àé
      where open ‚â§-Reasoning
  
    d·µ£-maxTriIneq : MaxTriangleIneq d·µ£
    d·µ£-maxTriIneq x y z with x ‚âü z | x ‚âü y | y ‚âü z
    d·µ£-maxTriIneq x y z | yes _   | _       | _       = z‚â§n
    d·µ£-maxTriIneq x y z | no  x‚ââz | yes x‚âày | yes y‚âàz = contradiction (‚âà-trans x‚âày y‚âàz) x‚ââz
    d·µ£-maxTriIneq x y z | no  _   | yes x‚âày | no  _   with ùë™? x | ùë™? y | ùë™? z
    ... | yes x·∂ú | yes y·∂ú | yes z·∂ú = ‚â§-reflexive (d·µ£·∂ú-cong x·∂ú z·∂ú y·∂ú z·∂ú x‚âày ‚âà-refl)
    ... | yes x·∂ú | no  y‚Å± | _     = contradiction (ùë™-cong x‚âày x·∂ú) y‚Å±
    ... | no  x‚Å± | yes y·∂ú | _     = contradiction (ùë™-cong (‚âà-sym x‚âày) y·∂ú) x‚Å±
    ... | yes _  | yes _  | no  _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong x‚âày ‚âà-refl))
    ... | no  _  | no  _  | yes _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong x‚âày ‚âà-refl))
    ... | no  _  | no  _  | no  _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong x‚âày ‚âà-refl))
    d·µ£-maxTriIneq x y z | no  _   | no  _   | yes y‚âàz with ùë™? x | ùë™? y | ùë™? z
    ... | yes x·∂ú | yes y·∂ú | yes z·∂ú = m‚â§n‚áím‚â§n‚äîo 0 (‚â§-reflexive (d·µ£·∂ú-cong x·∂ú z·∂ú x·∂ú y·∂ú ‚âà-refl (‚âà-sym y‚âàz)))
    ... | _      | yes y·∂ú | no  z‚Å± = contradiction (ùë™-cong y‚âàz y·∂ú) z‚Å±
    ... | _      | no  y‚Å± | yes z·∂ú = contradiction (ùë™-cong (‚âà-sym y‚âàz) z·∂ú) y‚Å±
    ... | no  _  | yes _  | yes _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong ‚âà-refl (‚âà-sym y‚âàz))))
    ... | yes _  | no  _  | no  _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong ‚âà-refl (‚âà-sym y‚âàz))))
    ... | no  _  | no  _  | no  _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong ‚âà-refl (‚âà-sym y‚âàz))))
    d·µ£-maxTriIneq x y z | no  _   | no  _   | no  _   with ùë™? x | ùë™? y | ùë™? z
    ... | yes x·∂ú | yes y·∂ú | yes z·∂ú = d·µ£·∂ú-maxTriIneq x·∂ú y·∂ú z·∂ú
    ... | yes x·∂ú | yes y·∂ú | no  z‚Å± = m‚â§o‚áím‚â§n‚äîo (d·µ£·∂ú x·∂ú y·∂ú) (+-mono ≥-‚â§ H·∂ú (x·∂úy·∂úz‚Å±‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±yz x·∂ú y·∂ú z‚Å±))
    ... | no  x‚Å± | yes y·∂ú | yes z·∂ú = m‚â§n‚áím‚â§n‚äîo (d·µ£·∂ú y·∂ú z·∂ú) (+-mono ≥-‚â§ H·∂ú (x‚Å±y·∂úz·∂ú‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±xy x‚Å± y·∂ú z·∂ú))
    ... | yes x·∂ú | no  y‚Å± | yes z·∂ú = m‚â§n‚áím‚â§n‚äîo (H·∂ú + d·µ£‚Å± y z) (<‚áí‚â§ (d·µ£·∂ú<H·∂ú+x x·∂ú z·∂ú _))
    ... | yes _  | no  _  | no  _  = d·µ£-maxTriIneq-lemma x y z
    ... | no  _  | yes _  | no  _  = d·µ£-maxTriIneq-lemma x y z
    ... | no  _  | no  _  | yes _  = d·µ£-maxTriIneq-lemma x y z
    ... | no  _  | no  _  | no  _  = d·µ£-maxTriIneq-lemma x y z


    d·µ£‚â§H·∂ú+H‚Å± : ‚àÄ x y ‚Üí d·µ£ x y ‚â§ H·∂ú + H‚Å±
    d·µ£‚â§H·∂ú+H‚Å± x y with x ‚âü y
    ... | yes _ = z‚â§n
    ... | no  _ with ùë™? x | ùë™? y
    ...   | yes x·∂ú | yes y·∂ú = ‚â§-trans (proj‚ÇÇ d·µ£·∂ú-bounded x·∂ú y·∂ú) (‚â§-trans (n‚â§1+n _) (m‚â§m+n H·∂ú H‚Å±))
    ...   | no  _  | no  _  = +-mono ≥-‚â§ H·∂ú (proj‚ÇÇ d·µ£‚Å±-bounded x y)
    ...   | no  _  | yes _  = +-mono ≥-‚â§ H·∂ú (proj‚ÇÇ d·µ£‚Å±-bounded x y)
    ...   | yes _  | no  _  = +-mono ≥-‚â§ H·∂ú (proj‚ÇÇ d·µ£‚Å±-bounded x y)
  
    d·µ£-bounded : Bounded d·µ£
    d·µ£-bounded = H·∂ú + H‚Å± , d·µ£‚â§H·∂ú+H‚Å±
  
    d·µ£-isUltrametric : IsUltrametric d·µ£
    d·µ£-isUltrametric = record
      { cong        = d·µ£-cong
      ; eq‚áí0        = x‚âày‚áíd·µ£‚â°0
      ; 0‚áíeq        = d·µ£‚â°0‚áíx‚âày
      ; sym         = d·µ£-sym
      ; maxTriangle = d·µ£-maxTriIneq
      }

  d·µ£-ultrametric : Ultrametric
  d·µ£-ultrametric = record
    { d             = d·µ£
    ; isUltrametric = d·µ£-isUltrametric
    }


  abstract
  
    private

      H<d·µ£ : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí ùë∞ x ‚äé ùë∞ y ‚Üí H·∂ú < d·µ£ x y 
      H<d·µ£ {x} {y} x‚âây x‚Å±‚äéy‚Å± with x ‚âü y
      ... | yes x‚âày = contradiction x‚âày x‚âây
      ... | no  _   with ùë™? x | ùë™? y | x‚Å±‚äéy‚Å±
      ... | yes x·∂ú | yes y·∂ú | inj‚ÇÅ x‚Å± = contradiction x·∂ú x‚Å±
      ... | yes x·∂ú | yes y·∂ú | inj‚ÇÇ y‚Å± = contradiction y·∂ú y‚Å± 
      ... | no  _  | _      | _       = H·∂ú<H·∂ú+d·µ£‚Å± x y
      ... | yes _  | no  _  | _       = H·∂ú<H·∂ú+d·µ£‚Å± x y
      
      d·µ£·∂ú<d·µ£ : ‚àÄ {w x y z} (w·∂ú : ùë™ w) (x·∂ú : ùë™ x) ‚Üí y ‚ââ z ‚Üí ùë∞ y ‚äé ùë∞ z  ‚Üí d·µ£·∂ú w·∂ú x·∂ú < d·µ£ y z
      d·µ£·∂ú<d·µ£ w·∂ú x·∂ú y‚ââz y‚Å±‚äéz‚Å± = <-trans ≥ (<‚áí‚â§ (d·µ£·∂ú<H·∂ú w·∂ú x·∂ú)) (H<d·µ£ y‚ââz y‚Å±‚äéz‚Å±)

      d·µ£·∂ú‚â§d·µ£ : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí d·µ£·∂ú x·∂ú y·∂ú ‚â§ d·µ£ x y
      d·µ£·∂ú‚â§d·µ£ {x} {y} x‚âây x·∂ú y·∂ú with x ‚âü y
      ... | yes x‚âày = contradiction x‚âày x‚âây
      ... | no  _   with ùë™? x | ùë™? y
      ...   | yes _  | yes _  = ‚â§-reflexive (d·µ£·∂ú-cong _ _ _ _ ‚âà-refl ‚âà-refl)
      ...   | no  x‚Å± | _      = contradiction x·∂ú x‚Å±
      ...   | yes _  | no  y‚Å± = contradiction y·∂ú y‚Å±
      
      H+d·µ£‚Å±‚â§d·µ£ : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí ùë∞ x ‚äé ùë∞ y ‚Üí H·∂ú + d·µ£‚Å± x y ‚â§ d·µ£ x y
      H+d·µ£‚Å±‚â§d·µ£ {x} {y} x‚âây x‚Å±‚äéy‚Å± with x ‚âü y
      ... | yes x‚âày = contradiction x‚âày x‚âây
      ... | no  _   with ùë™? x | ùë™? y | x‚Å±‚äéy‚Å±
      ... | yes x·∂ú | yes y·∂ú | inj‚ÇÅ x‚Å± = contradiction x·∂ú x‚Å±
      ... | yes x·∂ú | yes y·∂ú | inj‚ÇÇ y‚Å± = contradiction y·∂ú y‚Å± 
      ... | no  _  | _      | _       = ‚â§-refl
      ... | yes _  | no  _  | _       = ‚â§-refl

      d·µ£-force-d·µ£‚Å± : ‚àÄ (X Y : RMatrix) {r s} ‚Üí 
                    (‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ H·∂ú + d·µ£‚Å± (X r s) (Y r s)) ‚Üí
                    (‚àÄ {u v} ‚Üí X u v ‚ââ Y u v ‚Üí ùë∞ (X u v) ‚äé ùë∞ (Y u v) ‚Üí
                      d·µ£‚Å± (X u v) (Y u v) ‚â§ d·µ£‚Å± (X r s) (Y r s))
      d·µ£-force-d·µ£‚Å± X Y {r} {s} d·µ£‚â§H·∂ú+d·µ£‚Å±X‚ÇóY‚Çó {u} {v} X·µ§·µ•‚ââY·µ§·µ• X·µ§·µ•‚Å±‚äéY·µ§·µ•‚Å± =
        +-cancelÀ°-‚â§ H·∂ú (‚â§-trans (H+d·µ£‚Å±‚â§d·µ£ X·µ§·µ•‚ââY·µ§·µ• X·µ§·µ•‚Å±‚äéY·µ§·µ•‚Å±) (d·µ£‚â§H·∂ú+d·µ£‚Å±X‚ÇóY‚Çó u v))


    d·µ£-strContrOrbits‚Å± : ‚àÄ {X i j r s} ‚Üí
                       (‚àÄ u v ‚Üí d·µ£ (X u v) (œÉ X u v) ‚â§ H·∂ú + d·µ£‚Å± (X r s) (œÉ X r s)) ‚Üí
                       d·µ£ (œÉ X i j) (œÉ (œÉ X) i j) < H·∂ú + d·µ£‚Å± (X r s) (œÉ X r s)
    d·µ£-strContrOrbits‚Å± {X} {i} {j} {r} {s} d·µ£‚â§H·∂ú+d·µ£‚Å± with œÉ X i j ‚âü œÉ (œÉ X) i j
    ... | yes œÉX‚Çñ‚âàœÉY‚Çñ = s‚â§s z‚â§n
    ... | no  œÉX‚Çñ‚ââœÉY‚Çñ with ùë™? (œÉ X i j) | ùë™? (œÉ (œÉ X) i j)
    ...   | yes œÉX·µ¢‚±º·∂ú | yes œÉ¬≤X·µ¢‚±º·∂ú = d·µ£·∂ú<H·∂ú+x œÉX·µ¢‚±º·∂ú œÉ¬≤X·µ¢‚±º·∂ú _
    ...   | no  œÉX·µ¢‚±º‚Å± | _          = +-mono ≥-< H·∂ú (d·µ£‚Å±-strContrOrbits X (d·µ£-force-d·µ£‚Å± X (œÉ X) d·µ£‚â§H·∂ú+d·µ£‚Å±) (inj‚ÇÅ œÉX·µ¢‚±º‚Å±))
    ...   | yes _     | no  œÉ¬≤X·µ¢‚±º‚Å± = +-mono ≥-< H·∂ú (d·µ£‚Å±-strContrOrbits X (d·µ£-force-d·µ£‚Å± X (œÉ X) d·µ£‚â§H·∂ú+d·µ£‚Å±) (inj‚ÇÇ œÉ¬≤X·µ¢‚±º‚Å±))


    chain‚ÇÇ : ‚àÄ X i j k ‚Üí ùë∞ (œÉ X i j) ‚Üí œÉ X i j ‚âà A i k ‚ñ∑ X k j ‚Üí
             X k j ‚âà œÉ X k j ‚Üí size (œÉ X k j) < size (œÉ X i j)
    chain‚ÇÇ X i j k œÉX·µ¢‚±º‚Å± œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º X‚Çñ‚±º‚âàœÉX‚Çñ‚±º
      with ‚âà-trans œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º (‚ñ∑-cong (A i k) X‚Çñ‚±º‚âàœÉX‚Çñ‚±º)
    ... | œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º = begin
        size (œÉ X k j)         <‚ü® ‚â§-reflexive (size-incr (ùë∞-cong œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º œÉX·µ¢‚±º‚Å±)) ‚ü©
        size (A i k ‚ñ∑ œÉ X k j) ‚â°‚ü® sym (size-cong œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º) ‚ü©
        size (œÉ X i j)         ‚àé
        where open ‚â§-Reasoning


    reduction : ‚àÄ X l j ‚Üí ùë∞ (œÉ X l j) ‚Üí Acc _<_ (size (œÉ X l j)) ‚Üí
                ‚àÉ Œª k ‚Üí H·∂ú < d·µ£ (X k j) (œÉ X k j)  
    reduction X l j œÉX‚Çó‚±º‚Å± (acc rec) with œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º X _ _ œÉX‚Çó‚±º‚Å±
    ... | (k , œÉX‚Çó‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º , X‚Çñ‚±º‚Å±) with X k j ‚âü œÉ X k j
    ...   | no  X‚Çñ‚±º‚ââœÉX‚Çñ‚±º = k , H<d·µ£ X‚Çñ‚±º‚ââœÉX‚Çñ‚±º (inj‚ÇÅ X‚Çñ‚±º‚Å±)
    ...   | yes X‚Çñ‚±º‚âàœÉX‚Çñ‚±º with chain‚ÇÇ X l j k œÉX‚Çó‚±º‚Å± œÉX‚Çó‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º X‚Çñ‚±º‚âàœÉX‚Çñ‚±º
    ...     | |œÉX‚Çñ‚±º|<|œÉX‚Çó‚±º| = reduction X k j
        (ùë∞-cong X‚Çñ‚±º‚âàœÉX‚Çñ‚±º X‚Çñ‚±º‚Å±) (rec (size (œÉ X k j)) |œÉX‚Çñ‚±º|<|œÉX‚Çó‚±º|)

    force-X·∂ú : ‚àÄ X ‚Üí (‚àÄ u v ‚Üí d·µ£ (X u v) (œÉ X u v) < H·∂ú) ‚Üí ùë™‚Çò X
    force-X·∂ú X d·µ£<H i j with ùë™? (X i j)
    ... | yes X·µ¢‚±º·∂ú = X·µ¢‚±º·∂ú
    ... | no  X·µ¢‚±º‚Å± with X i j ‚âü œÉ X i j
    ...   | no  X·µ¢‚±º‚ââœÉX·µ¢‚±º = contradiction (<‚áí‚â§ (H<d·µ£ X·µ¢‚±º‚ââœÉX·µ¢‚±º (inj‚ÇÅ X·µ¢‚±º‚Å±))) (<‚áí‚â± (d·µ£<H i j))
    ...   | yes X·µ¢‚±º‚âàœÉX·µ¢‚±º with reduction X i j (ùë∞-cong X·µ¢‚±º‚âàœÉX·µ¢‚±º X·µ¢‚±º‚Å±) (<-wellFounded (size (œÉ X i j)))
    ...     | k , H·∂ú<d·µ£X‚Çñ‚±ºœÉX‚Çñ‚±º = contradiction H·∂ú<d·µ£X‚Çñ‚±ºœÉX‚Çñ‚±º (<‚áí‚âØ (d·µ£<H k j))




    d·µ£-strContrOrbits·∂ú : ‚àÄ {X r s i j} ‚Üí X r s ‚ââ œÉ X r s ‚Üí (X·µ£‚Çõ·∂ú : ùë™ (X r s)) (œÉX·µ£‚Çõ·∂ú : ùë™ (œÉ X r s)) ‚Üí 
                         (‚àÄ u v ‚Üí d·µ£ (X u v) (œÉ X u v) ‚â§ d·µ£·∂ú X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú) ‚Üí
                         d·µ£ (œÉ X i j) (œÉ (œÉ X) i j) < d·µ£·∂ú X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú
    d·µ£-strContrOrbits·∂ú {X} {r} {s} {i} {j}  X·µ£‚Çõ‚ââœÉX·µ£‚Çõ X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú d·µ£‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ with œÉ X i j ‚âü œÉ (œÉ X) i j
    ... | yes œÉX·µ¢‚±º‚âàœÉ¬≤X·µ¢‚±º = n‚â¢0‚áí0<n (X·µ£‚Çõ‚ââœÉX·µ£‚Çõ ‚àò d·µ£·∂ú‚â°0‚áíx‚âày X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú)
    ... | no  œÉX·µ¢‚±º‚ââœÉ¬≤X·µ¢‚±º with force-X·∂ú X (Œª u v ‚Üí <-trans ≥ (d·µ£‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ u v) (d·µ£·∂ú<H·∂ú _ _)) 
    ...   | X·∂ú with œÉ-pres-ùë™‚Çò X·∂ú
    ...     | œÉX·∂ú with œÉ-pres-ùë™‚Çò œÉX·∂ú
    ...       | œÉ¬≤X·∂ú with ùë™? (œÉ X i j) | ùë™? (œÉ (œÉ X) i j)
    ...         | no  œÉX·µ¢‚±º‚Å± | _           = contradiction (œÉX·∂ú i j) œÉX·µ¢‚±º‚Å± 
    ...         | yes _     | no  œÉ¬≤X·µ¢‚±º‚Å±  = contradiction (œÉ¬≤X·∂ú i j) œÉ¬≤X·µ¢‚±º‚Å±
    ...         | yes œÉX·µ¢‚±º·∂ú  | yes œÉ¬≤X·µ¢‚±º·∂ú  = begin
      d·µ£·∂ú œÉX·µ¢‚±º·∂ú œÉ¬≤X·µ¢‚±º·∂ú          ‚â°‚ü® d·µ£·∂ú-cong _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
      d·µ£·∂ú (œÉX·∂ú i j) (œÉ¬≤X·∂ú i j) <‚ü® d·µ£·∂ú-strContr X·µ£‚Çõ‚ââœÉX·µ£‚Çõ X·∂ú œÉX·∂ú œÉX·∂ú œÉ¬≤X·∂ú d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ i j ‚ü©
      d·µ£·∂ú (X·∂ú r s) (œÉX·∂ú r s)   ‚â°‚ü® d·µ£·∂ú-cong _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
      d·µ£·∂ú X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú           ‚àé
      where

      open ‚â§-Reasoning

      d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ : ‚àÄ {u v} ‚Üí X u v ‚ââ œÉ X u v ‚Üí d·µ£·∂ú (X·∂ú u v) (œÉX·∂ú u v) ‚â§ d·µ£·∂ú (X·∂ú r s) (œÉX·∂ú r s)
      d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ {u} {v} X·µ§·µ•‚ââœÉX·µ§·µ• = begin
        d·µ£·∂ú (X·∂ú u v) (œÉX·∂ú u v) ‚â§‚ü® d·µ£·∂ú‚â§d·µ£ X·µ§·µ•‚ââœÉX·µ§·µ• _ _ ‚ü©
        d·µ£ (X u v) (œÉ X u v)  ‚â§‚ü® d·µ£‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ u v ‚ü©
        d·µ£·∂ú X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú         ‚â°‚ü® d·µ£·∂ú-cong _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
        d·µ£·∂ú (X·∂ú r s) (œÉX·∂ú r s) ‚àé
  
    d·µ£-strContrOrbits : ‚àÄ {X r s} ‚Üí X r s ‚ââ œÉ X r s ‚Üí 
                        (‚àÄ u v ‚Üí d·µ£ (X u v) (œÉ X u v) ‚â§ d·µ£ (X r s) (œÉ X r s)) ‚Üí
                        ‚àÄ i j ‚Üí d·µ£ (œÉ X i j) (œÉ (œÉ X) i j) < d·µ£ (X r s) (œÉ X r s)
    d·µ£-strContrOrbits {X} {r} {s} X·µ£‚Çõ‚ââœÉX·µ£‚Çõ d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ i j with X r s ‚âü œÉ X r s
    ... | yes X·µ£‚Çõ‚âàœÉX·µ£‚Çõ = contradiction X·µ£‚Çõ‚âàœÉX·µ£‚Çõ X·µ£‚Çõ‚ââœÉX·µ£‚Çõ
    ... | no  _        with ùë™? (X r s) | ùë™? (œÉ X r s)
    ...   | yes X·µ£‚Çõ·∂ú | yes œÉX·µ£‚Çõ·∂ú = d·µ£-strContrOrbits·∂ú X·µ£‚Çõ‚ââœÉX·µ£‚Çõ X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ
    ...   | no  _    | _        = d·µ£-strContrOrbits‚Å± d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ
    ...   | yes _    | no  _    = d·µ£-strContrOrbits‚Å± d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ




  
    -- Strictly contracting when one of the arguments is consistent


    force-Y·∂ú : ‚àÄ {X Y r s} ‚Üí ùë™‚Çò X ‚Üí
               (X·µ£‚Çõ·∂ú : ùë™ (X r s)) (Y·µ£‚Çõ·∂ú : ùë™ (Y r s)) ‚Üí
               (‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ d·µ£·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú)
               ‚Üí ùë™‚Çò Y
    force-Y·∂ú {X} {Y} X·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú d·µ£‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ i j with X i j ‚âü Y i j
    ... | yes X·µ¢‚±º‚âàY·µ¢‚±º = ùë™-cong X·µ¢‚±º‚âàY·µ¢‚±º (X·∂ú i j)
    ... | no  X·µ¢‚±º‚ââY·µ¢‚±º with ùë™? (Y i j)
    ...   | yes Y·µ¢‚±º·∂ú = Y·µ¢‚±º·∂ú
    ...   | no  Y·µ¢‚±º‚Å± = contradiction (d·µ£‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ i j) (<‚áí‚â± (d·µ£·∂ú<d·µ£ X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú X·µ¢‚±º‚ââY·µ¢‚±º (inj‚ÇÇ Y·µ¢‚±º‚Å±)))
    
    d·µ£-strContr·∂ú·∂ú : ‚àÄ {X Y r s} ‚Üí X r s ‚ââ Y r s ‚Üí ùë™‚Çò X ‚Üí
                    (X·µ£‚Çõ·∂ú : ùë™ (X r s)) (Y·µ£‚Çõ·∂ú : ùë™ (Y r s)) ‚Üí 
                    (‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ d·µ£·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú) ‚Üí
                    ‚àÄ i j ‚Üí d·µ£ (œÉ X i j) (œÉ Y i j) < d·µ£·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú
    d·µ£-strContr·∂ú·∂ú {X} {Y} {r} {s}  X·µ£‚Çõ‚ââY·µ£‚Çõ X·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú d·µ£‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ i j
      with œÉ X i j ‚âü œÉ Y i j
    ... | yes œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º = n‚â¢0‚áí0<n (X·µ£‚Çõ‚ââY·µ£‚Çõ ‚àò d·µ£·∂ú‚â°0‚áíx‚âày X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú)
    ... | no  œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º with force-Y·∂ú X·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú d·µ£‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ 
    ...   | Y·∂ú with œÉ-pres-ùë™‚Çò X·∂ú |  œÉ-pres-ùë™‚Çò Y·∂ú
    ...       | œÉX·∂ú | œÉY·∂ú with ùë™? (œÉ X i j) | ùë™? (œÉ Y i j)
    ...         | no  œÉX·µ¢‚±º‚Å± | _         = contradiction (œÉX·∂ú i j) œÉX·µ¢‚±º‚Å± 
    ...         | yes _     | no  œÉY·µ¢‚±º‚Å± = contradiction (œÉY·∂ú i j) œÉY·µ¢‚±º‚Å±
    ...         | yes œÉX·µ¢‚±º·∂ú | yes œÉY·µ¢‚±º·∂ú = begin
      d·µ£·∂ú œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú         ‚â°‚ü® d·µ£·∂ú-cong _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
      d·µ£·∂ú (œÉX·∂ú i j) (œÉY·∂ú i j) <‚ü® d·µ£·∂ú-strContr X·µ£‚Çõ‚ââY·µ£‚Çõ X·∂ú Y·∂ú œÉX·∂ú œÉY·∂ú d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ i j ‚ü©
      d·µ£·∂ú (X·∂ú r s) (Y·∂ú r s)   ‚â°‚ü® d·µ£·∂ú-cong _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
      d·µ£·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú           ‚àé
      where

      open ‚â§-Reasoning

      d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ : ‚àÄ {u v} ‚Üí X u v ‚ââ Y u v ‚Üí
                       d·µ£·∂ú (X·∂ú u v) (Y·∂ú u v) ‚â§ d·µ£·∂ú (X·∂ú r s) (Y·∂ú r s)
      d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ {u} {v} X·µ§·µ•‚ââY·µ§·µ• = begin
        d·µ£·∂ú (X·∂ú u v) (Y·∂ú u v) ‚â§‚ü® d·µ£·∂ú‚â§d·µ£ X·µ§·µ•‚ââY·µ§·µ• _ _ ‚ü©
        d·µ£  (X u v)  (Y u v)  ‚â§‚ü® d·µ£‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ u v ‚ü©
        d·µ£·∂ú X·µ£‚Çõ·∂ú     Y·µ£‚Çõ·∂ú     ‚â°‚ü® d·µ£·∂ú-cong _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
        d·µ£·∂ú (X·∂ú r s) (Y·∂ú r s) ‚àé
       
    d·µ£-strContr·∂ú‚Å± : ‚àÄ {X Y : RMatrix} {r s} ‚Üí ùë™‚Çò X ‚Üí ùë∞ (Y r s)
                    ‚Üí (‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ H·∂ú + d·µ£‚Å± (X r s) (Y r s))
                    ‚Üí ‚àÄ i j ‚Üí d·µ£ (œÉ X i j) (œÉ Y i j) < H·∂ú + d·µ£‚Å± (X r s) (Y r s)
    d·µ£-strContr·∂ú‚Å± {X} {Y} {r} {s} X·∂ú Y·µ£‚Çõ‚Å± d·µ£‚â§H·∂ú+d·µ£‚Å± i j with œÉ X i j ‚âü œÉ Y i j
    ... | yes œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º = s‚â§s z‚â§n
    ... | no  œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º with ùë™? (œÉ X i j) | ùë™? (œÉ Y i j)
    ...   | yes œÉX·µ¢‚±º·∂ú | yes œÉY·µ¢‚±º·∂ú = d·µ£·∂ú<H·∂ú+x œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú _
    ...   | yes _     | no  œÉY·µ¢‚±º‚Å± = +-mono ≥-< H·∂ú (d·µ£‚Å±-strContr·∂ú X Y X·∂ú (d·µ£-force-d·µ£‚Å± X Y d·µ£‚â§H·∂ú+d·µ£‚Å±) œÉY·µ¢‚±º‚Å±)
    ...   | no  œÉX·µ¢‚±º‚Å± | _         = contradiction (œÉ-pres-ùë™‚Çò X·∂ú i j) œÉX·µ¢‚±º‚Å±
    
      --(d·µ£‚Å±-strContrOrbits X (d·µ£-force-d·µ£‚Å± X d·µ£‚â§H·∂ú+d·µ£‚Å±) (inj‚ÇÇ œÉ¬≤X·µ¢‚±º‚Å±))
    
    d·µ£-strContr·∂ú : ‚àÄ {X Y r s} ‚Üí ùë™‚Çò X ‚Üí X r s ‚ââ Y r s ‚Üí 
                  (‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ d·µ£ (X r s) (Y r s)) ‚Üí
                  ‚àÄ i j ‚Üí d·µ£ (œÉ X i j) (œÉ Y i j) < d·µ£ (X r s) (Y r s)
    d·µ£-strContr·∂ú {X} {Y} {r} {s} X·∂ú X·µ£‚Çõ‚ââY·µ£‚Çõ d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ with X r s ‚âü Y r s
    ... | yes X·µ£‚Çõ‚âàY·µ£‚Çõ = contradiction X·µ£‚Çõ‚âàY·µ£‚Çõ X·µ£‚Çõ‚ââY·µ£‚Çõ
    ... | no  _        with ùë™? (X r s) | ùë™? (Y r s)
    ...   | yes X·µ£‚Çõ·∂ú | yes Y·µ£‚Çõ·∂ú = d·µ£-strContr·∂ú·∂ú X·µ£‚Çõ‚ââY·µ£‚Çõ X·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ
    ...   | yes _    | no  Y·µ£‚Çõ‚Å± = d·µ£-strContr·∂ú‚Å± X·∂ú Y·µ£‚Çõ‚Å± d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ
    ...   | no  X·µ£‚Çõ‚Å± | _        = contradiction (X·∂ú r s) X·µ£‚Çõ‚Å±
