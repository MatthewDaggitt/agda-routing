open import Data.Fin using (Fin; zero)
open import Data.List using (List)
open import Data.List.Any.Membership.Propositional using (_‚àà_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Nat using (‚Ñï; suc; zero; z‚â§n; s‚â§s; _‚äî_; _*_; _‚à∏_; _‚â§_; _<_)
open import Data.Nat.Properties as ‚Ñï‚Çö using (‚äî-mono-‚â§) renaming (‚â§-trans to ‚â§‚Ñï-trans; ‚â§-antisym to ‚â§‚Ñï-antisym; ‚â§-decTotalOrder to ‚â§‚Ñï-decTotalOrder)
open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.List using (upTo)
open import Function using (_‚àò_)
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; sym; trans; cong; subst; module ‚â°-Reasoning)
import Relation.Binary.PartialOrderReasoning as PO-Reasoning

open import RoutingLib.Data.List using (between)
open import RoutingLib.Data.List.Uniqueness.Propositional using (Unique)
open import RoutingLib.Data.List.Membership.Propositional.Properties using (‚àà-upTo‚Å∫)
open import RoutingLib.Data.List.Sorting using (Sorted)
open import RoutingLib.Data.Table using (Table; max‚Å∫; zipWith)
open import RoutingLib.Data.Table.Properties using (max[t]<x)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
open import RoutingLib.Data.Nat.Properties as R‚Ñï‚Çö using (‚Ñï‚Çõ; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Function.Distance using (IsUltrametric; MaxTriangleIneq)
open import RoutingLib.Data.Matrix using (Matrix)
open import RoutingLib.Data.Matrix.Properties using (max‚Å∫-cong; M‚â§max‚Å∫[M]; max‚Å∫[M]‚â°x; max‚Å∫[M]‚â§x; max‚Å∫-constant; zipWith-sym)
open import RoutingLib.Data.Matrix.Membership.Propositional.Properties using (max‚Å∫[M]‚ààM)
open import RoutingLib.Data.Matrix.Relation.Pointwise using (zipWith-cong)
import RoutingLib.Function.Distance.MaxLift as MaxLift

open import RoutingLib.Routing.Definitions using (RoutingProblem; RoutingAlgebra)
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions
open import RoutingLib.Function.Distance using (Ultrametric; Bounded)
import RoutingLib.Routing.BellmanFord.DistanceVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.DistanceVector.Step2_RouteMetric as Step2
open import RoutingLib.Function.Image using (FiniteImage)

module RoutingLib.Routing.BellmanFord.DistanceVector.Step3_StateMetric
  {a b ‚Ñì n-1}
  {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  (ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)) 
  (ùì¢ùìí : SufficientConditions ùì°ùìê)
  where
  
  open Prelude ùì°ùìü ùì¢ùìí
  open Step2 ùì°ùìü ùì¢ùìí using
    ( d
    ; d-cong
    ; x‚âày‚áíd‚â°0
    ; d‚â°0‚áíx‚âày
    ; d-sym
    ; d-maxTriIneq
    ; d‚â§H
    ; d-ultrametric
    ; d-bounded
    
    ; d-strContr
    )


  -------------------------------------
  -- Ultrametric over routing tables --
  -------------------------------------

  d·µ¢-ultrametric : Ultrametric _
  d·µ¢-ultrametric = MaxLift.ultrametric {n = n} (Œª _ ‚Üí S) (Œª _ ‚Üí d-ultrametric)

  open Ultrametric d·µ¢-ultrametric public using ()
    renaming
    ( d to d·µ¢
    ; cong to d·µ¢-cong
    ; sym  to d·µ¢-sym
    ; eq‚áí0 to x‚âày‚áíd·µ¢‚â°0
    ; 0‚áíeq to d·µ¢‚â°0‚áíx‚âày
    ; maxTriangle to d·µ¢-maxTriIneq 
    ; isUltrametric to d·µ¢-isUltrametric
    )

  d·µ¢-bounded : Bounded ‚Ñùùïã‚Çõ d·µ¢
  d·µ¢-bounded = MaxLift.bounded (Œª _ ‚Üí S) d d-bounded

  -------------------------------------
  -- Ultrametric over routing states --
  -------------------------------------
  
  D-ultrametric : Ultrametric _
  D-ultrametric = MaxLift.ultrametric {n = n} (Œª _ ‚Üí _) (Œª _ ‚Üí d·µ¢-ultrametric)

  open Ultrametric D-ultrametric public using ()
    renaming
    ( d to D
    ; 0‚áíeq to D‚â°0‚áíX‚âàY
    ; eq‚áí0 to X‚âàY‚áíD‚â°0
    ; sym to D-sym
    ; cong to D-cong
    )

  D-bounded : Bounded ‚ÑùùïÑ‚Çõ D
  D-bounded = MaxLift.bounded (Œª _ ‚Üí ‚Ñùùïã‚Çõ) _ d·µ¢-bounded

  d‚â§D : ‚àÄ X Y i j ‚Üí d (X i j) (Y i j) ‚â§ D X Y
  d‚â§D X Y i j = ‚â§‚Ñï-trans (MaxLift.d·µ¢‚â§d (Œª _ ‚Üí S) (Œª {i} ‚Üí d) (X i) (Y i) j) (MaxLift.d·µ¢‚â§d (Œª _ ‚Üí ‚Ñùùïã‚Çõ) (Œª {i} ‚Üí d·µ¢) X Y i)



  open import RoutingLib.Function.Distance ‚ÑùùïÑ‚Çõ using (_StrContrOver_; _StrContrOnOrbitsOver_)
  open import RoutingLib.Function.Distance.Properties using (strContr‚áístrContrOnOrbits)

  œÉ-strContr : œÉ StrContrOver D
  œÉ-strContr {X} {Y} Y‚ââX with max[t]‚ààt 0 (Œª i ‚Üí d·µ¢ (X i) (Y i))
  ... | inj‚ÇÅ dXY‚â°0              = contradiction (D‚â°0‚áíX‚âàY dXY‚â°0) (Y‚ââX ‚àò ‚âà‚Çò-sym)
  ... | inj‚ÇÇ (r , DXY‚â°d‚ÇúX·µ£Y·µ£) with max[t]‚ààt 0 (Œª i ‚Üí d (X r i) (Y r i))
  ...   | inj‚ÇÅ dX·µ£Y·µ£‚â°0               = contradiction (D‚â°0‚áíX‚âàY (trans DXY‚â°d‚ÇúX·µ£Y·µ£ dX·µ£Y·µ£‚â°0)) (Y‚ââX ‚àò ‚âà‚Çò-sym)
  ...   | inj‚ÇÇ (s , dX·µ£Y·µ£‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ) = begin
    D  (œÉ X)   (œÉ Y)   <‚ü® test ‚ü©
    d (X r s) (Y r s) ‚â°‚ü® sym DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ ‚ü©
    D  X       Y       ‚àé
    where
    open ‚â§-Reasoning

    DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ : D X Y ‚â° d (X r s) (Y r s)
    DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ = trans DXY‚â°d‚ÇúX·µ£Y·µ£ dX·µ£Y·µ£‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ
    
    X·µ£‚Çõ‚ââY·µ£‚Çõ : X r s ‚ââ Y r s
    X·µ£‚Çõ‚ââY·µ£‚Çõ X·µ£‚Çõ‚âàY·µ£‚Çõ = Y‚ââX (‚âà‚Çò-sym (D‚â°0‚áíX‚âàY (trans DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ (x‚âày‚áíd‚â°0 X·µ£‚Çõ‚âàY·µ£‚Çõ))))

    d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ : ‚àÄ u v ‚Üí X u v ‚ââ Y u v ‚Üí d (X u v) (Y u v) ‚â§ d (X r s) (Y r s)
    d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ u v _ = begin
      d (X u v) (Y u v) ‚â§‚ü® MaxLift.d·µ¢‚â§d (Œª _ ‚Üí S) d (X u) (Y u) v ‚ü©
      d·µ¢ (X u)   (Y u)   ‚â§‚ü® MaxLift.d·µ¢‚â§d (Œª _ ‚Üí ‚Ñùùïã‚Çõ) d·µ¢ X (Y) u ‚ü©
      D X (Y)           ‚â°‚ü® DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ ‚ü©
      d (X r s) (Y r s) ‚àé

    0<d·µ£X·µ£‚ÇõY·µ£‚Çõ : 0 < d (X r s) (Y r s)
    0<d·µ£X·µ£‚ÇõY·µ£‚Çõ = n‚â¢0‚áí0<n (X·µ£‚Çõ‚ââY·µ£‚Çõ ‚àò d‚â°0‚áíx‚âày)
    
    test : D (œÉ X) (œÉ Y) < d (X r s) (Y r s)
    test = max[t]<x {t = zipWith d·µ¢ (œÉ X) (œÉ Y)}
             (Œª i ‚Üí max[t]<x {t = zipWith d (œÉ X i) (œÉ Y i)}
               (Œª j ‚Üí d-strContr X·µ£‚Çõ‚ââY·µ£‚Çõ d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ i j)
               0<d·µ£X·µ£‚ÇõY·µ£‚Çõ)
             0<d·µ£X·µ£‚ÇõY·µ£‚Çõ
