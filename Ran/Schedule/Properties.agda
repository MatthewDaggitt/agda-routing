-- imports
open import Schedule
  using (ùïã; Schedule)
open import Data.Nat
  using (‚Ñï; zero; suc; _<_; _+_; _‚â§_; s‚â§s; z‚â§n; _‚âü_; _>_; pred; _‚à∏_; _‚â§?_)
open import Data.Fin.Subset
  using (Subset; _‚àà_)
open import Data.Product
  using (_,_; ‚àÉ; _√ó_; proj‚ÇÅ; proj‚ÇÇ)
open import Induction.WellFounded
  using (Acc; acc)
open import Data.Nat.Properties
  using (+-identity ≥; m‚â§m+n; ‚â§-trans; ‚â§-reflexive; +-suc; n‚â§1+n; m+n‚à∏m‚â°n;
        <-trans; ‚â§+‚â¢‚áí<; pred-mono; ‚â§-antisym; +-mono-‚â§; <‚áí‚â§; +-comm)
open import Relation.Binary.PropositionalEquality
  using (subst‚ÇÇ; cong; refl; _‚â°_; trans; sym; _‚â¢_; cong‚ÇÇ; subst)
open import Induction.Nat
  using (<-well-founded)
open import Data.Fin
  using (Fin; to‚Ñï; from‚Ñï; inject‚ÇÅ) renaming (zero to fzero; suc to fsuc)
open import Functions
  using (max)
open import Functions.Properties
  using(max-inc=n; max<; max‚â§; max-inc)
open import Data.Fin.Dec
  using (_‚àà?_)
open import Relation.Nullary
  using (yes; no)
open import Function
  using (_‚àò_)
open import Data.Fin.Properties
  using (prop-to‚Ñï-‚â§; inject‚ÇÅ-lemma; to-from)
open import Relation.Nullary.Product
  using (_√ó-dec_)
open import Relation.Nullary.Negation
  using (contradiction)
open import Data.Fin.Subset.Properties
  using (‚àà‚ä§)

open Data.Nat.Properties.‚â§-Reasoning
  using (_‚â§‚ü®_‚ü©_; begin_; _‚àé)
    
module Schedule.Properties {n : ‚Ñï}(s : Schedule n) where
  open Schedule.Schedule s
  open Schedule.Timing s

  -- general property
  ‚àÄ‚â¢‚áí< : (t k : ùïã) ‚Üí (‚àÄ (t' : Fin (suc t)) ‚Üí k ‚â¢ (to‚Ñï t')) ‚Üí t < k
  ‚àÄ‚â¢‚áí< zero k p = ‚â§+‚â¢‚áí< z‚â§n ((p fzero) ‚àò sym)
  ‚àÄ‚â¢‚áí< (suc t) k p = ‚â§+‚â¢‚áí<
       (‚àÄ‚â¢‚áí< t k (Œª t' ‚Üí subst (k ‚â¢_) (inject‚ÇÅ-lemma t') (p (inject‚ÇÅ t'))))
       (subst (k ‚â¢_) (to-from (suc t)) (p (from‚Ñï (suc t))) ‚àò sym)

  -- Properties of finite
  finite-inc : ‚àÄ t i ‚Üí t ‚â§ t + proj‚ÇÅ (finite t i)
  finite-inc t i = m‚â§m+n t (proj‚ÇÅ (finite t i))
  
  finite-fin : ‚àÄ t k i ‚Üí (t' : Fin (suc t)) ‚Üí
              (to‚Ñï t') + proj‚ÇÅ (finite (to‚Ñï t') i) ‚â§ k ‚Üí Œ≤ k i ‚â¢ to‚Ñï t'
  finite-fin t k i t' p  with finite (to‚Ñï t') i
  ... | (m , q) = subst (_‚â¢ to‚Ñï t')
        (cong (Œª x ‚Üí Œ≤ x i) (m+n‚à∏m‚â°n p))
        (q (k ‚à∏ (to‚Ñï t' + m)))

  -- Properties of nextActive'
  nextActive'-inc : ‚àÄ t k i (p : i ‚àà Œ± (t + suc k))(rs : Acc _<_ k) ‚Üí
                    t ‚â§ proj‚ÇÅ (nextActive' t k i p rs)
  nextActive'-inc t zero i p _ = n‚â§1+n t
  nextActive'-inc t (suc k) i p (acc rs) with i ‚àà? Œ± t
  ... | yes i‚ààŒ± = ‚â§-reflexive refl
  ... | no  i‚àâŒ± = ‚â§-trans (n‚â§1+n t)
                  (nextActive'-inc (suc t) k i (‚àà-Œ±-comm t (suc k) i p)
                    (rs k (‚â§-reflexive refl)))

  -- Properties of nextActive
  nextActive-inc : ‚àÄ t i ‚Üí t ‚â§ nextActive t i
  nextActive-inc zero i = z‚â§n
  nextActive-inc (suc t) i with nonstarvation (suc t) i
  ... | k , p = nextActive'-inc (suc t) k i p (<-well-founded k)

  nextActive-active : ‚àÄ t i ‚Üí i ‚àà Œ± (nextActive t i)
  nextActive-active zero i = subst (i ‚àà_) (sym Œ±‚ÇÄ) ‚àà‚ä§
  nextActive-active (suc t) i with nonstarvation (suc t) i
  ... | k , p with nextActive' (suc t) k i p (<-well-founded k)
  ... | _ , active = active


  -- Properties of expiry
  expiry-inc : ‚àÄ t i ‚Üí t ‚â§ expiry t i
  expiry-inc t i = max-inc=n
        (Œª x ‚Üí (to‚Ñï x) + proj‚ÇÅ (finite (to‚Ñï x) i))
        (Œª j ‚Üí finite-inc (to‚Ñï j) i)

  expiry‚Çú‚â§k‚áít‚â§Œ≤k : ‚àÄ t k i ‚Üí expiry t i ‚â§ k ‚Üí t ‚â§ Œ≤ k i
  expiry‚Çú‚â§k‚áít‚â§Œ≤k t k i p = <‚áí‚â§
            (‚àÄ‚â¢‚áí< t (Œ≤ k i)
            (Œª t' ‚Üí  finite-fin t k i t'
            (‚â§-trans
              (max-inc (Œª x ‚Üí (to‚Ñï x) + proj‚ÇÅ (finite (to‚Ñï x) i)) t')
              p)
            ))

  -- Properties of œÜ
  œÜ‚â§expiry-nextActive-œÜ : ‚àÄ t i ‚Üí œÜ t ‚â§ expiry (nextActive (œÜ t) i ) i
  œÜ‚â§expiry-nextActive-œÜ t i = begin
    œÜ t        ‚â§‚ü® nextActive-inc (œÜ t) i ‚ü©
    nextActive (œÜ t) i  ‚â§‚ü® expiry-inc (nextActive (œÜ t) i) i ‚ü©
    expiry (nextActive (œÜ t) i) i
    ‚àé

  œÜ-inc : ‚àÄ t ‚Üí t ‚â§ œÜ t
  œÜ-inc zero = z‚â§n
  œÜ-inc (suc t) = s‚â§s (max‚â§ {f = (Œª i ‚Üí expiry (nextActive (œÜ t) i) i)}
        (Œª i ‚Üí ‚â§-trans (œÜ-inc t) (œÜ‚â§expiry-nextActive-œÜ t i)))

  œÜ<œÜs : ‚àÄ t ‚Üí œÜ t < œÜ (suc t)
  œÜ<œÜs t = s‚â§s (max‚â§ (œÜ‚â§expiry-nextActive-œÜ t))

  nextActiveœÜ<œÜs : ‚àÄ t i ‚Üí nextActive (œÜ t) i < œÜ (suc t)
  nextActiveœÜ<œÜs t i = s‚â§s (
    begin nextActive (œÜ t) i        ‚â§‚ü® expiry-inc (nextActive (œÜ t) i) i ‚ü©
      expiry (nextActive (œÜ t) i) i  ‚â§‚ü® max-inc (Œª j ‚Üí expiry (nextActive (œÜ t) j) j) i ‚ü©
      max (Œª j ‚Üí expiry (nextActive (œÜ t) j) j)
      ‚àé
    )

  -- Propeties of œÑ
  œÜ‚â§œÑ : ‚àÄ t i ‚Üí œÜ t ‚â§ œÑ t i
  œÜ‚â§œÑ t i = nextActive-inc (œÜ t) i

  œÑ-inc : ‚àÄ t i ‚Üí t ‚â§ œÑ t i
  œÑ-inc t i = ‚â§-trans (œÜ-inc t) (nextActive-inc (œÜ t) i)

  -- Proposition 1
  prop1-i : œÜ zero ‚â° zero
  prop1-i = refl

  prop1-ii : ‚àÄ t i ‚Üí ‚àÉ Œª k ‚Üí (i ‚àà Œ± k) √ó (œÜ t ‚â§ k) √ó (k < œÜ (suc t))
  prop1-ii t i = nextActive (œÜ t) i ,
                 nextActive-active (œÜ t) i ,
                 nextActive-inc (œÜ t) i ,
                 nextActiveœÜ<œÜs t i

  prop1-iii : ‚àÄ t i k  ‚Üí (œÜ t ‚â§ œÑ t i) √ó (œÑ t i ‚â§ Œ≤ (œÜ (suc t) + k) i)
  prop1-iii t i k = œÜ‚â§œÑ t i , (begin
                œÑ t i      ‚â§‚ü® ‚â§-reflexive refl ‚ü©
                nextActive (œÜ t) i  ‚â§‚ü®
                  expiry‚Çú‚â§k‚áít‚â§Œ≤k (nextActive (œÜ t) i) (œÜ (suc t) + k) i
                  (begin
                    expiry (nextActive (œÜ t) i) i  ‚â§‚ü® max-inc (Œª j ‚Üí expiry (nextActive (œÜ t) j) j) i ‚ü©
                    max (Œª j ‚Üí expiry (nextActive (œÜ t) j) j)
                                     ‚â§‚ü® n‚â§1+n (max (Œª j ‚Üí expiry (nextActive (œÜ t) j) j)) ‚ü©
                    œÜ (suc t)        ‚â§‚ü® m‚â§m+n (œÜ (suc t)) k ‚ü©
                    œÜ (suc t) + k ‚àé)
                ‚ü©
                Œ≤ (œÜ (suc t) + k) i
                ‚àé )
