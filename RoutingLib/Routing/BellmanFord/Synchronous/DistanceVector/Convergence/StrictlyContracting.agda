open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (_Preserves_‚ü∂_; _Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; sym; trans; cong; cong‚ÇÇ; subst‚ÇÇ; module ‚â°-Reasoning)
open import Data.List using (List; _‚à∑_)
open import Data.List.Membership.Propositional using (_‚àà_)
open import Data.Nat using (‚Ñï; suc; zero; z‚â§n; s‚â§s; _‚äî_; _‚â§_; _‚â•_; _<_)
open import Data.Nat.Properties using (m‚â§m‚äîn; n‚â§m‚äîn; <‚áí‚â¢; <‚áí‚â§; <‚áí‚â±; ‚â§+‚â¢‚áí<; ‚äî-comm; ‚äî-identity ≥; ‚äî-mono-‚â§; ‚äî-mono-<; ‚â§-total; ‚â§-reflexive; ‚â§-refl; ‚â§-trans; m‚â§n‚áín‚äîm‚â°n)
open import Data.Product using (‚àÉ; _,_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Fin.Properties using () renaming (_‚âü_ to _‚âüùîΩ_)
open import Function using (_‚àò_)
import RoutingLib.Relation.Binary.Reasoning.PartialOrder as PO-Reasoning

open import RoutingLib.Data.List.Uniqueness.Propositional using (Unique)
open import RoutingLib.Data.List.Sorting using (Sorted)
open import RoutingLib.Data.Matrix using (SquareMatrix; Matrix; zipWith; max‚Å∫)
open import RoutingLib.Data.Table.Properties using (max[t]<x)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
open import RoutingLib.Data.Nat.Properties using (‚Ñï‚Çõ; m‚â§n‚áím‚â§n‚äîo; n‚â§m√óo‚â§m‚áín‚äîo‚â§m; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Function.Metric using (Ultrametric; IsUltrametric; Bounded; MaxTriangleIneq)

open import RoutingLib.Routing.Algebra
open import RoutingLib.Routing.Algebra.RoutingAlgebra
import RoutingLib.Routing.Algebra.RoutingAlgebra.Properties as RoutingAlgebraProperties
open import RoutingLib.Routing.Model using (AdjacencyMatrix)
open import RoutingLib.Routing.BellmanFord.ConvergenceConditions
import RoutingLib.Routing.BellmanFord.Synchronous as BellmanFord
import RoutingLib.Routing.BellmanFord.Synchronous.DistanceVector.Properties as BellmanFordProperties
import RoutingLib.Routing.BellmanFord.Synchronous.DistanceVector.Convergence.Properties as MetricProperties
import RoutingLib.Routing.BellmanFord.Synchronous.DistanceVector.Convergence.Metrics as Metrics

module RoutingLib.Routing.BellmanFord.Synchronous.DistanceVector.Convergence.StrictlyContracting
  {a b ‚Ñì n} {algebra : RawRoutingAlgebra a b ‚Ñì}
  (isRoutingAlgebra : IsRoutingAlgebra algebra)
  (isFinite : IsFinite algebra)
  (isStrictlyIncreasing : IsStrictlyIncreasing algebra)
  (A : AdjacencyMatrix algebra n)
  where

open RawRoutingAlgebra algebra
open IsRoutingAlgebra isRoutingAlgebra
open RoutingAlgebraProperties isRoutingAlgebra
open Metrics isRoutingAlgebra isFinite
open MetricProperties isRoutingAlgebra isFinite

open BellmanFord algebra A
open BellmanFordProperties algebra isRoutingAlgebra A

open import RoutingLib.Function.Metric ‚ÑùùïÑ‚Çõ
  using (_StrContrOver_; _StrContrOnOrbitsOver_; _StrContrOnFixedPointOver_)

------------------------------------------------------------------------
-- Properties of D

œÉX·µ¢‚±º‚ââI·µ¢‚±º : ‚àÄ X {i j} x ‚Üí i ‚â¢ j ‚Üí œÉ X i j <‚Çä x ‚Üí œÉ X i j ‚ââ I i j
œÉX·µ¢‚±º‚ââI·µ¢‚±º X {i} {j} x i‚â¢j œÉX·µ¢‚±º<x = <‚Çä‚áí‚ââ (begin
  œÉ X i j <‚ü® œÉX·µ¢‚±º<x ‚ü©
  x       ‚â§‚ü® ‚äï-identityÀ° x ‚ü©
  ‚àû       ‚â°‚ü® sym (I·µ¢‚±º‚â°‚àû (i‚â¢j ‚àò sym)) ‚ü©
  I i j   ‚àé)
  where open PO-Reasoning ‚â§‚Çä-poset

Y‚ââX‚áí0<DXY : ‚àÄ {X Y : RoutingMatrix} ‚Üí Y ‚ââ‚Çò X ‚Üí 0 < D X Y
Y‚ââX‚áí0<DXY Y‚ââX = n‚â¢0‚áí0<n (Y‚ââX ‚àò ‚âà‚Çò-sym ‚àò D‚â°0‚áíX‚âàY)

hœÉX·µ¢‚±º‚äîœÉY·µ¢‚±º<DXY : ‚àÄ {X Y i j} ‚Üí œÉ X i j <‚Çä œÉ Y i j ‚Üí h (œÉ X i j) ‚äî h (œÉ Y i j) < D X Y
hœÉX·µ¢‚±º‚äîœÉY·µ¢‚±º<DXY {X} {Y} {i} {j} œÉX·µ¢‚±º<œÉY·µ¢‚±º@(œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º) with i ‚âüùîΩ j
... | yes i‚â°j = contradiction (œÉX·µ¢·µ¢‚âàœÉY·µ¢·µ¢ X Y i‚â°j) œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º
... | no  i‚â¢j with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º X i j
...   | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º = contradiction œÉX·µ¢‚±º‚âàI·µ¢‚±º (œÉX·µ¢‚±º‚ââI·µ¢‚±º X (œÉ Y i j) i‚â¢j œÉX·µ¢‚±º<œÉY·µ¢‚±º)
...   | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º) = begin
  h (œÉ X i j) ‚äî h (œÉ Y i j) ‚â°‚ü® m‚â§n‚áín‚äîm‚â°n (h-resp-‚â§ œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º) ‚ü©
  h (œÉ X i j)               ‚â°‚ü® h-cong œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º ‚ü©
  h (A i k ‚ñ∑ X k j)         <‚ü® h-resp-< (isStrictlyIncreasing (A i k) X‚Çñ‚±º‚ââ‚àû) ‚ü©
  h (X k j)                 ‚â§‚ü® m‚â§m‚äîn (h (X k j)) (h (Y k j)) ‚ü©
  h (X k j) ‚äî h (Y k j)     ‚â°‚ü® sym (dxy‚â°hx‚äîhy X‚Çñ‚±º‚ââY‚Çñ‚±º) ‚ü©
  d (X k j) (Y k j)         ‚â§‚ü® d‚â§D X Y k j ‚ü©
  D X Y                     ‚àé
  where

  œÉY·µ¢‚±º‚â∞A·µ¢‚ÇñX‚Çñ‚±º : œÉ Y i j ‚â∞‚Çä A i k ‚ñ∑ X k j
  œÉY·µ¢‚±º‚â∞A·µ¢‚ÇñX‚Çñ‚±º œÉY·µ¢‚±º‚â§A·µ¢‚ÇñX‚Çñ‚±º = œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º (‚â§‚Çä-antisym œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (begin
    œÉ Y i j       ‚â§‚ü® œÉY·µ¢‚±º‚â§A·µ¢‚ÇñX‚Çñ‚±º ‚ü©
    A i k ‚ñ∑ X k j ‚âà‚ü® ‚âà-sym œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º ‚ü©
    œÉ X i j       ‚àé))
    where open PO-Reasoning ‚â§‚Çä-poset

  X‚Çñ‚±º‚ââ‚àû : X k j ‚ââ ‚àû
  X‚Çñ‚±º‚ââ‚àû X‚Çñ‚±º‚âà‚àû = œÉY·µ¢‚±º‚â∞A·µ¢‚ÇñX‚Çñ‚±º (begin
    œÉ Y i j       ‚â§‚ü® ‚äï-identityÀ° _ ‚ü©
    ‚àû             ‚âà‚ü® ‚âà-sym (‚ñ∑-fixedPoint (A i k)) ‚ü©
    A i k ‚ñ∑ ‚àû     ‚âà‚ü® ‚ñ∑-cong (A i k) (‚âà-sym X‚Çñ‚±º‚âà‚àû) ‚ü©
    A i k ‚ñ∑ X k j ‚àé)
    where open PO-Reasoning ‚â§‚Çä-poset

  X‚Çñ‚±º‚ââY‚Çñ‚±º : X k j ‚ââ Y k j
  X‚Çñ‚±º‚ââY‚Çñ‚±º X‚Çñ‚±º‚âàY‚Çñ‚±º = œÉY·µ¢‚±º‚â∞A·µ¢‚ÇñX‚Çñ‚±º (begin
    œÉ Y i j       ‚â§‚ü® œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y i j k ‚ü©
    A i k ‚ñ∑ Y k j ‚âà‚ü® ‚ñ∑-cong (A i k) (‚âà-sym X‚Çñ‚±º‚âàY‚Çñ‚±º) ‚ü©
    A i k ‚ñ∑ X k j ‚àé)
    where open PO-Reasoning ‚â§‚Çä-poset

  open ‚â§-Reasoning

dœÉX·µ¢‚±ºœÉY·µ¢‚±º<DXY : ‚àÄ {X Y} ‚Üí Y ‚ââ‚Çò X ‚Üí ‚àÄ i j ‚Üí d (œÉ X i j) (œÉ Y i j) < D X Y
dœÉX·µ¢‚±ºœÉY·µ¢‚±º<DXY {X} {Y} Y‚ââX i j with œÉ X i j ‚âü œÉ Y i j
... | yes œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º = Y‚ââX‚áí0<DXY Y‚ââX
... | no  œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º with ‚â§‚Çä-total (œÉ X i j) (œÉ Y i j)
...   | inj‚ÇÅ œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º = hœÉX·µ¢‚±º‚äîœÉY·µ¢‚±º<DXY (œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º)
...   | inj‚ÇÇ œÉY·µ¢‚±º‚â§œÉX·µ¢‚±º = begin
  h (œÉ X i j) ‚äî h (œÉ Y i j) ‚â°‚ü® ‚äî-comm (h (œÉ X i j)) (h (œÉ Y i j)) ‚ü©
  h (œÉ Y i j) ‚äî h (œÉ X i j) <‚ü® hœÉX·µ¢‚±º‚äîœÉY·µ¢‚±º<DXY (œÉY·µ¢‚±º‚â§œÉX·µ¢‚±º , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º ‚àò ‚âà-sym) ‚ü©
  D Y X                     ‚â°‚ü® D-sym Y X ‚ü©
  D X Y                     ‚àé
  where open ‚â§-Reasoning

œÉ-strContr : œÉ StrContrOver D
œÉ-strContr {X} {Y} Y‚ââX =
  max[t]<x (Y‚ââX‚áí0<DXY Y‚ââX) (Œª i ‚Üí
    max[t]<x (Y‚ââX‚áí0<DXY Y‚ââX) (Œª j ‚Üí
      dœÉX·µ¢‚±ºœÉY·µ¢‚±º<DXY Y‚ââX i j))

œÉ-strContrOnFP : œÉ StrContrOnFixedPointOver D
œÉ-strContrOnFP {X} {X*} œÉX*‚âàX* X‚ââX* = begin
  D X*     (œÉ X) ‚â°‚ü® D-cong (‚âà‚Çò-sym œÉX*‚âàX*) (‚âà‚Çò-refl {x = œÉ X}) ‚ü©
  D (œÉ X*) (œÉ X) <‚ü® œÉ-strContr X‚ââX* ‚ü©
  D X*     X     ‚àé
  where open ‚â§-Reasoning

œÉ-strContrOnOrbits : œÉ StrContrOnOrbitsOver D
œÉ-strContrOnOrbits = œÉ-strContr
