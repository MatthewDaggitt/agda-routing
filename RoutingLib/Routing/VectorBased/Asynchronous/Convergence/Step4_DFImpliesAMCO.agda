open import Data.Fin.Subset using (Subset; _‚àà_)

open import RoutingLib.Routing using (Network)
open import RoutingLib.Routing.Algebra
import RoutingLib.Routing.VectorBased.Asynchronous as AsyncVectorBasedRouting
open import RoutingLib.Routing.VectorBased.Asynchronous.Convergence.InternalDefinitions

module RoutingLib.Routing.VectorBased.Asynchronous.Convergence.Step4_DFImpliesAMCO
  {a b ‚Ñì} {alg : RawRoutingAlgebra a b ‚Ñì}
  (isRoutingAlgebra : IsRoutingAlgebra alg)
  {n} (N : Network alg n)
  (open AsyncVectorBasedRouting alg N hiding (F))
  (N-d : ‚àÄ (e : Epoch) (p : Subset n) ‚Üí RouteDistanceFunction alg (A‚Çú e p))
  where

open RawRoutingAlgebra alg

open import Data.Bool using (if_then_else_)
open import Data.Nat hiding (_‚äî_)
open import Data.Nat.Properties hiding (_‚âü_)
open import Data.Fin using (Fin)
open import Data.Fin.Subset.Properties using (_‚àà?_)
open import Data.Product using (‚àÉ; proj‚ÇÅ; proj‚ÇÇ; _,_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; map‚ÇÇ)
open import Data.Vec.Functional using (zipWith)
open import Level using (_‚äî_)
open import Function using (_‚àò_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; sym; subst)
open import Relation.Nullary
open import Relation.Nullary.Decidable using (‚åä_‚åã)

open import RoutingLib.Data.Nat.Properties
open import RoutingLib.Data.Vec.Functional using (max)
open import RoutingLib.Data.Vec.Functional.Properties using (max[t]<x; x‚â§max[t])
import RoutingLib.Function.Metric.Construct.Condition as Condition
import RoutingLib.Function.Metric.Construct.MaxLift as MaxLift
open import RoutingLib.Function.Metric.Nat 
import RoutingLib.Relation.Nullary.Decidable as Dec

open import RoutingLib.Iteration.Asynchronous.Dynamic.Convergence
open import RoutingLib.Routing.VectorBased.Asynchronous.DistanceVector.Properties isRoutingAlgebra N

------------------------------------------------------------------------
-- Lifting the distance function

module _ (e : Epoch) (p : Subset n) where

  private
    F : RoutingMatrix ‚Üí RoutingMatrix
    F = F‚Ä≤ e p

    F¬≤ : RoutingMatrix ‚Üí RoutingMatrix
    F¬≤ = F ‚àò F
    
  open RouteDistanceFunction (N-d e p)
  
  -- The distance between two routing tables
  d : RoutingTable ‚Üí RoutingTable ‚Üí ‚Ñï
  d x y = max 0 (zipWith r x y)

  -- The conditional distance between two routing tables
  d·µ¢ : ‚àÄ (i : Fin n) ‚Üí RoutingTable ‚Üí RoutingTable ‚Üí ‚Ñï
  d·µ¢ i x y = if ‚åä i ‚àà? p ‚åã then d x y else 0

  -- The distance between two routing states
  D : RoutingMatrix ‚Üí RoutingMatrix ‚Üí ‚Ñï
  D X Y = max 0 (Œª i ‚Üí d·µ¢ i (X i) (Y i))

  
------------------------------------------------------------------------
-- Properties of d

  private
    module MaxLift‚Çú = MaxLift ‚Ñùùïã‚Çõ‚Å± (Œª _ ‚Üí r)

  d-isQuasiSemiMetric : IsQuasiSemiMetric _ d
  d-isQuasiSemiMetric = MaxLift‚Çú.isQuasiSemiMetric r-isQuasiSemiMetric

  open IsQuasiSemiMetric d-isQuasiSemiMetric public
    using () renaming
    ( cong              to d-cong
    ; eq‚áí0              to x‚âày‚áíd‚â°0
    ; 0‚áíeq              to d‚â°0‚áíx‚âày
    )
  
  d-bounded : ‚àÉ Œª d‚Çò‚Çê‚Çì ‚Üí ‚àÄ x y ‚Üí d x y ‚â§ d‚Çò‚Çê‚Çì
  d-bounded = MaxLift‚Çú.bounded r-bounded

  r‚â§d : ‚àÄ x y i ‚Üí r (x i) (y i) ‚â§ d x y
  r‚â§d = MaxLift‚Çú.d·µ¢‚â§d

------------------------------------------------------------------------
-- Properties of D

  private
    module Condition‚Çú = Condition d (_‚àà? p)
    module MaxLift‚Çò = MaxLift ‚ÑùùïÑ‚Çõ‚Å± d·µ¢
    
  D‚â°0‚áíX‚âà‚ÇõY : ‚àÄ {X Y} ‚Üí D X Y ‚â° 0 ‚Üí X ‚âà‚Çò[ p ] Y
  D‚â°0‚áíX‚âà‚ÇõY D‚â°0 i‚ààp = Condition‚Çú.‚â°0‚áíx‚âày d‚â°0‚áíx‚âày i‚ààp (MaxLift‚Çò.d‚â°0‚áíd·µ¢‚â°0 D‚â°0 _)
  
  Y‚ââ‚ÇöX‚áí0<DXY : ‚àÄ {X Y} ‚Üí Y ‚ââ‚Çò[ p ] X ‚Üí 0 < D X Y
  Y‚ââ‚ÇöX‚áí0<DXY Y‚ââX = n‚â¢0‚áí0<n (Y‚ââX ‚àò ‚âà‚Çõ-sym ‚àò D‚â°0‚áíX‚âà‚ÇõY)

  d‚â§D : ‚àÄ X Y i ‚Üí (i ‚àà p ‚äé X i ‚âà‚Çú Y i) ‚Üí d (X i) (Y i) ‚â§ D X Y
  d‚â§D X Y i cond  = subst (_‚â§ D X Y) (Condition‚Çú.d·∂ú‚â°d‚Å∫ i (X i) (Y i) (map‚ÇÇ x‚âày‚áíd‚â°0 cond)) (MaxLift‚Çò.d·µ¢‚â§d X Y i)

  r‚â§D : ‚àÄ X Y i j ‚Üí (i ‚àà p ‚äé X i ‚âà‚Çú Y i) ‚Üí r (X i j) (Y i j) ‚â§ D X Y
  r‚â§D X Y i j op = ‚â§-trans (r‚â§d (X i) (Y i) j) (d‚â§D X Y i op)

  r‚â§D-wf : ‚àÄ {X Y} ‚Üí WellFormed p X ‚Üí WellFormed p Y ‚Üí ‚àÄ i j ‚Üí r (X i j) (Y i j) ‚â§ D X Y
  r‚â§D-wf {X} {Y} wfX wfY i j with i ‚àà? p
  ... | yes i‚ààp = r‚â§D X Y i j (inj‚ÇÅ i‚ààp)
  ... | no  i‚àâp = r‚â§D X Y i j (inj‚ÇÇ (WellFormed-cong wfX wfY i‚àâp))

------------------------------------------------------------------------
-- Strictly contracting proofs

-- These two lemmas are a mess as can't pattern match on `i ‚àà? p` directly
-- as it unfolds the adjacency matrix

  d[FX·µ¢,F¬≤X·µ¢]<D[X,FX] : ‚àÄ {X} ‚Üí WellFormed p X ‚Üí F X ‚ââ‚Çò[ p ] X ‚Üí
                        ‚àÄ i ‚Üí d·µ¢ i (F X i) (F¬≤ X i) < D X (F X)
  d[FX·µ¢,F¬≤X·µ¢]<D[X,FX] {X} wfX FX‚ââX i with Y‚ââ‚ÇöX‚áí0<DXY FX‚ââX
  ... | 0<DXY with max[t]<x 0<DXY (r-strContrOrbits 0<DXY (r‚â§D-wf wfX (F‚Ä≤-inactive e p X)) i)
  ...   | d[FX·µ¢,F¬≤X·µ¢]<D[X,FX] = Dec.[
        (Œª i‚ààp ‚Üí subst (_< D X (F X)) (sym (Condition.accept d (_‚àà? p) i‚ààp)) d[FX·µ¢,F¬≤X·µ¢]<D[X,FX]) ,
        (Œª i‚àâp ‚Üí subst (_< D X (F X)) (sym (Condition.reject d (_‚àà? p) i‚àâp)) 0<DXY)
      ] (i ‚àà? p)

  d·µ¢[X*·µ¢,FX·µ¢]<D[X*,X] : ‚àÄ {X*} ‚Üí F X* ‚âà‚Çò X* ‚Üí ‚àÄ {X} ‚Üí WellFormed p X ‚Üí X ‚ââ‚Çò[ p ] X* ‚Üí
                        ‚àÄ i ‚Üí d·µ¢ i (X* i) (F X i) < D X* X
  d·µ¢[X*·µ¢,FX·µ¢]<D[X*,X] {X*} FX*‚âàX* {X} wfX X‚ââX* i with Y‚ââ‚ÇöX‚áí0<DXY X‚ââX*
  ... | 0<DXY with max[t]<x 0<DXY (r-strContrFP FX*‚âàX* 0<DXY (r‚â§D-wf (X*-wf e p FX*‚âàX*) wfX) i)
  ...   | d[FX·µ¢,F¬≤X·µ¢]<D[X,FX] = Dec.[
        (Œª i‚ààp ‚Üí subst (_< D X* X) (sym (Condition.accept d (_‚àà? p) i‚ààp)) d[FX·µ¢,F¬≤X·µ¢]<D[X,FX]) ,
        (Œª i‚àâp ‚Üí subst (_< D X* X) (sym (Condition.reject d (_‚àà? p) i‚àâp)) 0<DXY)
      ] (i ‚àà? p)

  F‚Çú-strContrOnOrbits : ‚àÄ {X} ‚Üí WellFormed p X ‚Üí F X ‚ââ‚Çò[ p ] X ‚Üí
                        D (F X) (F¬≤ X) < D X (F X)
  F‚Çú-strContrOnOrbits {X} wfX FX‚ââX = max[t]<x (Y‚ââ‚ÇöX‚áí0<DXY FX‚ââX) (d[FX·µ¢,F¬≤X·µ¢]<D[X,FX] wfX FX‚ââX)

  F‚Çú-strContrOnFP : ‚àÄ {X} ‚Üí WellFormed p X ‚Üí ‚àÄ {X*} ‚Üí F X* ‚âà‚Çò X* ‚Üí X ‚ââ‚Çò[ p ] X* ‚Üí
                    D X* (F X) < D X* X
  F‚Çú-strContrOnFP {X} wfX {X*} FX*‚âàX* X‚ââX* = max[t]<x (Y‚ââ‚ÇöX‚áí0<DXY X‚ââX*) (d·µ¢[X*·µ¢,FX·µ¢]<D[X*,X] FX*‚âàX* wfX X‚ââX*)

------------------------------------------------------------------------
-- AMCO

amco : AMCO F‚à•
amco = record
  { d·µ¢                   = Œª e p {i} ‚Üí d e p
  ; d·µ¢-isQuasiSemiMetric = Œª e p i ‚Üí d-isQuasiSemiMetric e p
  ; d·µ¢-bounded           = Œª e p ‚Üí proj‚ÇÅ (d-bounded e p) , proj‚ÇÇ (d-bounded e p)
  ; F-strContrOnOrbits   = Œª {e p} ‚Üí F‚Çú-strContrOnOrbits e p
  ; F-strContrOnFP       = Œª {e p} ‚Üí F‚Çú-strContrOnFP e p
  ; F-inactive           = F‚Ä≤-inactive
  }
