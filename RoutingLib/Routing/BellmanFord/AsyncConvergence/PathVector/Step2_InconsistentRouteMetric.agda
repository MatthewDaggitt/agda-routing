open import Data.Product using (‚àÉ; _,_; _√ó_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_]‚Ä≤; map; swap)
open import Data.Nat using (‚Ñï; zero; suc; z‚â§n; s‚â§s; _<_; _‚â§_; _‚äî_)
open import Data.Nat.Properties
  using (‚â§-refl; ‚â§-reflexive; ‚â§-total; <-transÀ°; <-trans ≥; ‚äî-comm; ‚äî-identity ≥; ‚äî-idem; m‚â§m‚äîn; <‚áí‚âØ; <‚áí‚â§; n‚â§m‚äîn; ‚â§‚áí‚âØ; ‚äî-monoÀ°-‚â§; m‚â§n‚áím‚äîn‚â°n; m‚â§n‚áín‚äîm‚â°n; ‚äî-triangulate)
open import Data.Fin.Properties using () renaming (_‚âü_ to _‚âüùîΩ_)
open import Data.Fin.Subset using (Subset; _‚àà_; _‚àâ_; ‚ÅÖ_‚ÅÜ; ‚à£_‚à£; ‚ä§)
open import Data.Fin.Subset.Properties using (x‚ààp‚à©q‚Å∫; x‚àà‚ÅÖx‚ÅÜ; ‚àà‚ä§)
open import Data.Fin.Dec using (_‚àà?_)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; subst; subst‚ÇÇ)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_; id)
open import Induction.WellFounded using (Acc; acc)
open import Induction.Nat using () renaming (<-well-founded to <-wellFounded)

open import RoutingLib.Data.Fin.Subset using (_\\_)
open import RoutingLib.Data.Fin.Subset.Properties using (‚à£p\\q‚à£<‚à£p‚à£; i‚àâp\\q‚áíi‚àâp; i‚àâ‚ÅÖj‚ÅÜ)
open import RoutingLib.Data.Nat.Properties
  using (m‚â§o‚áím‚â§n‚äîo; m<n‚áín‚â¢0; n‚â§m√óo‚â§m‚áín‚äîo‚â§m; m<n‚äém<o‚áím<n‚äîo; m‚â§n‚áím‚â§n‚äîo; module ‚â§-Reasoning)
import RoutingLib.Function.Metric as Metric

open import RoutingLib.Routing.Algebra
import RoutingLib.Routing.BellmanFord.AsyncConvergence.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.AsyncConvergence.PathVector.Step1_InconsistentHeightFunction as Step1

module RoutingLib.Routing.BellmanFord.AsyncConvergence.PathVector.Step2_InconsistentRouteMetric
  {a b ‚Ñì n} (algebra : StrictlyIncreasingPathAlgebra a b ‚Ñì n)
  where

  open Prelude algebra
  open Step1 algebra using
    ( h‚Å± ; H‚Å± ; h‚Å±-cong ; 1‚â§h‚Å±; h‚Å±‚â§H‚Å± ; h‚Å±-decr ; h[s·∂ú]<h[r‚Å±] )
 
  open Metric S

  open ‚â§-Reasoning
    
  private

    h-force-ùë∞ : ‚àÄ {x y} ‚Üí ùë∞ x ‚äé ùë∞ y ‚Üí h‚Å± x ‚â§ h‚Å± y ‚Üí ùë∞ y
    h-force-ùë∞ (inj‚ÇÇ y‚Å±) hx‚â§hy y·∂ú = y‚Å± y·∂ú
    h-force-ùë∞ (inj‚ÇÅ x‚Å±) hx‚â§hy y·∂ú = contradiction (h[s·∂ú]<h[r‚Å±] y·∂ú x‚Å±) (‚â§‚áí‚âØ hx‚â§hy)
    
  abstract
  
    d·µ£‚Å± : Route ‚Üí Route ‚Üí ‚Ñï
    d·µ£‚Å± x y = h‚Å± x ‚äî h‚Å± y

    d·µ£‚Å±-cong : d·µ£‚Å± Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
    d·µ£‚Å±-cong x‚âày u‚âàv = cong‚ÇÇ _‚äî_ (h‚Å±-cong x‚âày) (h‚Å±-cong u‚âàv)
  
    d·µ£‚Å±-sym : ‚àÄ x y ‚Üí d·µ£‚Å± x y ‚â° d·µ£‚Å± y x
    d·µ£‚Å±-sym x y = ‚äî-comm (h‚Å± x) (h‚Å± y)

    d·µ£‚Å±‚â°0‚áíx‚âày : ‚àÄ {x y} ‚Üí d·µ£‚Å± x y ‚â° 0 ‚Üí x ‚âà y
    d·µ£‚Å±‚â°0‚áíx‚âày {x} {y} d·µ£‚Å±‚â°0 = contradiction d·µ£‚Å±‚â°0 (m<n‚áín‚â¢0 (m‚â§o‚áím‚â§n‚äîo (h‚Å± x) (1‚â§h‚Å± y)))
    
    d·µ£‚Å±-maxTriIneq : MaxTriangleIneq d·µ£‚Å±
    d·µ£‚Å±-maxTriIneq x y z = begin
      h‚Å± x ‚äî h‚Å± z                   ‚â§‚ü® ‚äî-monoÀ°-‚â§ (h‚Å± z) (m‚â§m‚äîn (h‚Å± x) (h‚Å± y)) ‚ü©
      h‚Å± x ‚äî h‚Å± y ‚äî h‚Å± z            ‚â°‚ü® ‚äî-triangulate (h‚Å± x) (h‚Å± y) (h‚Å± z) ‚ü©
      (h‚Å± x ‚äî h‚Å± y) ‚äî (h‚Å± y ‚äî h‚Å± z) ‚àé

    1‚â§d·µ£‚Å± : ‚àÄ x y ‚Üí 1 ‚â§ d·µ£‚Å± x y
    1‚â§d·µ£‚Å± x y = m‚â§n‚áím‚â§n‚äîo (h‚Å± y) (1‚â§h‚Å± x)
    
    d·µ£‚Å±‚â§H‚Å± : ‚àÄ x y ‚Üí d·µ£‚Å± x y ‚â§ H‚Å±
    d·µ£‚Å±‚â§H‚Å± x y = n‚â§m√óo‚â§m‚áín‚äîo‚â§m (h‚Å±‚â§H‚Å± x) (h‚Å±‚â§H‚Å± y)
  
    d·µ£‚Å±-bounded : Bounded d·µ£‚Å±
    d·µ£‚Å±-bounded = H‚Å± , d·µ£‚Å±‚â§H‚Å±
    

    
    private
    
      

      chain‚ÇÅ : ‚àÄ X i j ‚Üí ùë∞ (œÉ X i j) ‚Üí ‚àÉ Œª k ‚Üí ùë∞ (X k j) √ó h‚Å± (œÉ X i j) < h‚Å± (X k j) ‚äî h‚Å± (œÉ X k j)
      chain‚ÇÅ X i j œÉX·µ¢‚±º‚Å± with œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º X _ _ œÉX·µ¢‚±º‚Å±
      ... | k , œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º , X‚Çñ‚±º‚Å± = k , X‚Çñ‚±º‚Å± , (begin
        h‚Å± (œÉ X i j)              ‚â°‚ü® h‚Å±-cong œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º ‚ü©
        h‚Å± (A i k ‚ñ∑ X k j)        <‚ü® h‚Å±-decr (ùë∞-cong œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º œÉX·µ¢‚±º‚Å±) ‚ü©
        h‚Å± (X k j)                ‚â§‚ü® m‚â§m‚äîn (h‚Å± (X k j)) (h‚Å± (œÉ X k j)) ‚ü©
        h‚Å± (X k j) ‚äî h‚Å± (œÉ X k j) ‚àé)
        
      chain‚ÇÇ : ‚àÄ X i k j ‚Üí h‚Å± (œÉ X i j) < h‚Å± (X k j) ‚äî h‚Å± (œÉ X k j) ‚Üí X k j ‚âà œÉ X k j ‚Üí h‚Å± (œÉ X i j) < h‚Å± (œÉ X k j)
      chain‚ÇÇ X i k j hœÉX·µ¢‚±º<hX‚Çñ‚±º‚äîhœÉX‚Çñ‚±º X‚Çñ‚±º‚âàœÉX‚Çñ‚±º = begin
        h‚Å± (œÉ X i j)                <‚ü® hœÉX·µ¢‚±º<hX‚Çñ‚±º‚äîhœÉX‚Çñ‚±º ‚ü©
        h‚Å± (X k j)   ‚äî h‚Å± (œÉ X k j) ‚â°‚ü® cong (_‚äî h‚Å± (œÉ X k j)) (h‚Å±-cong X‚Çñ‚±º‚âàœÉX‚Çñ‚±º) ‚ü©
        h‚Å± (œÉ X k j) ‚äî h‚Å± (œÉ X k j) ‚â°‚ü® ‚äî-idem (h‚Å± (œÉ X k j)) ‚ü©
        h‚Å± (œÉ X k j)                ‚àé
      
      reduction : ‚àÄ X {r s} ‚Üí
                  (‚àÄ {u v} ‚Üí X u v ‚ââ œÉ X u v ‚Üí ùë∞ (X u v) ‚äé ùë∞ (œÉ X u v) ‚Üí d·µ£‚Å± (X u v) (œÉ X u v) ‚â§ d·µ£‚Å± (X r s) (œÉ X r s)) ‚Üí
                  ‚àÄ i j (L : Subset n) ‚Üí Acc _<_ ‚à£ L ‚à£ ‚Üí (‚àÄ {l} ‚Üí l ‚àâ L ‚Üí h‚Å± (œÉ X l j) ‚â§ h‚Å± (œÉ X i j)) ‚Üí
                  ùë∞ (œÉ X i j) ‚Üí h‚Å± (œÉ X i j) < h‚Å± (X r s) ‚äî h‚Å± (œÉ X r s)
      reduction X {r} {s} d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ i j L (acc rec) L-less œÉX·µ¢‚±º‚Å± with chain‚ÇÅ X _ _ œÉX·µ¢‚±º‚Å±
      ... | k , X‚Çñ‚±º‚Å± , hœÉX·µ¢‚±º<hX‚Çñ‚±º‚äîhœÉX‚Çñ‚±º  with X k j ‚âü œÉ X k j
      ...   | no  X‚Çñ‚±º‚ââœÉX‚Çñ‚±º = <-transÀ° (hœÉX·µ¢‚±º<hX‚Çñ‚±º‚äîhœÉX‚Çñ‚±º) (d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ X‚Çñ‚±º‚ââœÉX‚Çñ‚±º (inj‚ÇÅ X‚Çñ‚±º‚Å±))
      ...   | yes X‚Çñ‚±º‚âàœÉX‚Çñ‚±º with chain‚ÇÇ X i k j hœÉX·µ¢‚±º<hX‚Çñ‚±º‚äîhœÉX‚Çñ‚±º X‚Çñ‚±º‚âàœÉX‚Çñ‚±º | k ‚àà? L
      ...     | hœÉX·µ¢‚±º<hœÉX‚Çñ‚±º | no  k‚àâL = contradiction hœÉX·µ¢‚±º<hœÉX‚Çñ‚±º (‚â§‚áí‚âØ (L-less k‚àâL))
      ...     | hœÉX·µ¢‚±º<hœÉX‚Çñ‚±º | yes k‚ààL = begin
        h‚Å± (œÉ X i j)                <‚ü® hœÉX·µ¢‚±º<hœÉX‚Çñ‚±º ‚ü©
        h‚Å± (œÉ X k j)                <‚ü® reduction X d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ k j (L \\ ‚ÅÖ k ‚ÅÜ) (rec _ ‚à£L\\k‚à£<‚à£L‚à£) L-exclude (ùë∞-cong X‚Çñ‚±º‚âàœÉX‚Çñ‚±º X‚Çñ‚±º‚Å±) ‚ü©
        h‚Å± (X r s) ‚äî h‚Å± (œÉ X r s) ‚àé

        where
  
        ‚à£L\\k‚à£<‚à£L‚à£ : ‚à£ L \\ ‚ÅÖ k ‚ÅÜ ‚à£ < ‚à£ L ‚à£
        ‚à£L\\k‚à£<‚à£L‚à£ = ‚à£p\\q‚à£<‚à£p‚à£ {p = L} {‚ÅÖ k ‚ÅÜ} (k , x‚ààp‚à©q‚Å∫ (k‚ààL , x‚àà‚ÅÖx‚ÅÜ k))
  
        L-exclude : ‚àÄ {l} ‚Üí l ‚àâ (L \\ ‚ÅÖ k ‚ÅÜ) ‚Üí h‚Å± (œÉ X l j) ‚â§ h‚Å± (œÉ X k j)
        L-exclude {l} l‚àâL\\k with l ‚âüùîΩ k
        ... | yes refl = ‚â§-refl
        ... | no  l‚â¢k  = <‚áí‚â§ (<-trans ≥ (L-less (i‚àâp\\q‚áíi‚àâp l‚àâL\\k (i‚àâ‚ÅÖj‚ÅÜ l‚â¢k))) hœÉX·µ¢‚±º<hœÉX‚Çñ‚±º)



    d·µ£‚Å±-strContrOrbits : ‚àÄ X {r s} ‚Üí
                   (‚àÄ {u v} ‚Üí X u v ‚ââ œÉ X u v ‚Üí ùë∞ (X u v) ‚äé ùë∞ (œÉ X u v) ‚Üí d·µ£‚Å± (X u v) (œÉ X u v) ‚â§ d·µ£‚Å± (X r s) (œÉ X r s)) ‚Üí 
                   ‚àÄ {i j} ‚Üí ùë∞ (œÉ X i j) ‚äé ùë∞ (œÉ (œÉ X) i j) ‚Üí d·µ£‚Å± (œÉ X i j) (œÉ (œÉ X) i j) < d·µ£‚Å± (X r s) (œÉ X r s)
    d·µ£‚Å±-strContrOrbits X {r} {s} d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ {i} {j} œÉX·µ¢‚±º‚Å±‚äéœÉ¬≤X·µ¢‚±º‚Å± with ‚â§-total (h‚Å± (œÉ (œÉ X) i j)) (h‚Å± (œÉ X i j))
    ...   | inj‚ÇÅ œÉ¬≤X·µ¢‚±º‚â§œÉX·µ¢‚±º = begin
      h‚Å± (œÉ X i j) ‚äî h‚Å± (œÉ (œÉ X) i j) ‚â°‚ü® m‚â§n‚áín‚äîm‚â°n œÉ¬≤X·µ¢‚±º‚â§œÉX·µ¢‚±º ‚ü©
      h‚Å± (œÉ X i j)                    <‚ü® reduction X d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ i j ‚ä§ (<-wellFounded ‚à£ ‚ä§ {n = n} ‚à£) (Œª l‚àâ‚ä§ ‚Üí contradiction ‚àà‚ä§ l‚àâ‚ä§) (h-force-ùë∞ (swap œÉX·µ¢‚±º‚Å±‚äéœÉ¬≤X·µ¢‚±º‚Å±) œÉ¬≤X·µ¢‚±º‚â§œÉX·µ¢‚±º) ‚ü©
      h‚Å± (X r s)   ‚äî h‚Å± (œÉ X r s)     ‚àé
    ...   | inj‚ÇÇ œÉX·µ¢‚±º‚â§œÉ¬≤X·µ¢‚±º with œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º (œÉ X) _ _ (h-force-ùë∞ œÉX·µ¢‚±º‚Å±‚äéœÉ¬≤X·µ¢‚±º‚Å± œÉX·µ¢‚±º‚â§œÉ¬≤X·µ¢‚±º)
    ... | k , œÉ¬≤X·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º , œÉX‚Çñ‚±º‚Å± = begin
      h‚Å± (œÉ X i j) ‚äî h‚Å± (œÉ (œÉ X) i j) ‚â°‚ü® m‚â§n‚áím‚äîn‚â°n œÉX·µ¢‚±º‚â§œÉ¬≤X·µ¢‚±º ‚ü©
      h‚Å± (œÉ (œÉ X) i j)                ‚â°‚ü® h‚Å±-cong œÉ¬≤X·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º ‚ü©
      h‚Å± (A i k ‚ñ∑ œÉ X k j)            <‚ü® h‚Å±-decr (ùë∞-cong œÉ¬≤X·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º (h-force-ùë∞ œÉX·µ¢‚±º‚Å±‚äéœÉ¬≤X·µ¢‚±º‚Å± œÉX·µ¢‚±º‚â§œÉ¬≤X·µ¢‚±º)) ‚ü©
      h‚Å± (œÉ X k j)                    <‚ü® reduction X d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ k j ‚ä§ (<-wellFounded ‚à£ ‚ä§ {n = n} ‚à£) (Œª l‚àâ‚ä§ ‚Üí contradiction ‚àà‚ä§ l‚àâ‚ä§) œÉX‚Çñ‚±º‚Å± ‚ü© 
      h‚Å± (X r s)   ‚äî h‚Å± (œÉ X r s)     ‚àé



    d·µ£‚Å±x‚Å±y·∂ú‚â°h‚Å±x‚Å± : ‚àÄ {x y} ‚Üí ùë∞ x ‚Üí ùë™ y ‚Üí d·µ£‚Å± x y ‚â° h‚Å± x
    d·µ£‚Å±x‚Å±y·∂ú‚â°h‚Å±x‚Å± {x} {y} x‚Å± y·∂ú with x ‚âü y
    ... | yes x‚âày = contradiction (ùë™-cong (‚âà-sym x‚âày) y·∂ú) x‚Å±
    ... | no  _   with ùë™? x | ùë™? y
    ...   | yes x·∂ú | _      = contradiction x·∂ú x‚Å±
    ...   | no  _  | no y‚Å± = contradiction y·∂ú y‚Å±
    ...   | no  _  | yes _ = m‚â§n‚áín‚äîm‚â°n (<‚áí‚â§ (h[s·∂ú]<h[r‚Å±] y·∂ú x‚Å±))
    
    x‚Å±y·∂úz·∂ú‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±xy : ‚àÄ {x y z} ‚Üí ùë∞ x ‚Üí ùë™ y ‚Üí ùë™ z ‚Üí d·µ£‚Å± x z ‚â§ d·µ£‚Å± x y
    x‚Å±y·∂úz·∂ú‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±xy x‚Å± y·∂ú z·∂ú =
      ‚â§-reflexive (trans (d·µ£‚Å±x‚Å±y·∂ú‚â°h‚Å±x‚Å± x‚Å± z·∂ú) (sym (d·µ£‚Å±x‚Å±y·∂ú‚â°h‚Å±x‚Å± x‚Å± y·∂ú)))
    
    x·∂úy·∂úz‚Å±‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±yz : ‚àÄ {x y z} ‚Üí ùë™ x ‚Üí ùë™ y ‚Üí ùë∞ z ‚Üí d·µ£‚Å± x z ‚â§ d·µ£‚Å± y z
    x·∂úy·∂úz‚Å±‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±yz {x} {y} {z} x·∂ú y·∂ú z‚Å± =
      subst‚ÇÇ _‚â§_ (d·µ£‚Å±-sym z x) (d·µ£‚Å±-sym z y) (x‚Å±y·∂úz·∂ú‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±xy z‚Å± y·∂ú x·∂ú)






    d·µ£‚Å±-strContr·∂ú : ‚àÄ X Y {r s} ‚Üí ùë™‚Çò X ‚Üí
                   (‚àÄ {u v} ‚Üí X u v ‚ââ Y u v ‚Üí ùë∞ (X u v) ‚äé ùë∞ (Y u v) ‚Üí d·µ£‚Å± (X u v) (Y u v) ‚â§ d·µ£‚Å± (X r s) (Y r s)) ‚Üí 
                   ‚àÄ {i j} ‚Üí ùë∞ (œÉ Y i j) ‚Üí d·µ£‚Å± (œÉ X i j) (œÉ Y i j) < d·µ£‚Å± (X r s) (Y r s)
    d·µ£‚Å±-strContr·∂ú X Y {r} {s} X·∂ú d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ {i} {j} œÉY·µ¢‚±º‚Å± with œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y _ _ œÉY·µ¢‚±º‚Å±
    ... | k , œÉY·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º , Y‚Çñ‚±º‚Å± = begin
      h‚Å± (œÉ X i j) ‚äî h‚Å± (œÉ Y i j) ‚â°‚ü® m‚â§n‚áím‚äîn‚â°n (<‚áí‚â§ (h[s·∂ú]<h[r‚Å±] (œÉ-pres-ùë™‚Çò X·∂ú i j) œÉY·µ¢‚±º‚Å±)) ‚ü©
      h‚Å± (œÉ Y i j)            ‚â°‚ü® h‚Å±-cong œÉY·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º ‚ü©
      h‚Å± (A i k ‚ñ∑ Y k j)      <‚ü® h‚Å±-decr (ùë∞-cong œÉY·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º œÉY·µ¢‚±º‚Å±) ‚ü©
      h‚Å± (Y k j)              ‚â§‚ü® n‚â§m‚äîn (h‚Å± (X k j)) (h‚Å± (Y k j)) ‚ü©
      h‚Å± (X k j) ‚äî h‚Å± (Y k j) ‚â§‚ü® d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ (Y‚Çñ‚±º‚Å± ‚àò (Œª X‚Çñ‚±º‚âàY‚Çñ‚±º ‚Üí ùë™-cong X‚Çñ‚±º‚âàY‚Çñ‚±º (X·∂ú k j))) (inj‚ÇÇ Y‚Çñ‚±º‚Å±) ‚ü©
      h‚Å± (X r s) ‚äî h‚Å± (Y r s) ‚àé
