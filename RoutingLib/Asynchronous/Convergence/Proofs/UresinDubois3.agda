open import Data.Fin using (Fin)
open import Data.Product using (_√ó_; ‚àÉ; proj‚ÇÅ; proj‚ÇÇ; _,_; ‚àÉ‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _‚âü_; _‚â§?_; _‚à∏_) renaming (_‚â§_ to _‚â§‚Ñï_)
open import Data.Nat.Properties as ‚Ñï‚Çö using (pred-mono; ‚â§+‚â¢‚áí<; ‚â∞‚áí‚â•; +-suc; +-comm; +-identity ≥; m+n‚à∏m‚â°n; m‚â§m+n; ‚â§-step)
-- open import Relation.Binary using (Setoid; Rel; Reflexive; Antisymmetric; Transitive; _‚áí_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; subst)
import Relation.Binary.EqReasoning as EqReasoning
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (_‚à©_; U) renaming (_‚àà_ to _‚àà·µ§_)

open import RoutingLib.Data.Table using (Table)
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áío+m‚â°n)
open import RoutingLib.Relation.Binary.Indexed.Homogeneous
open import RoutingLib.Relation.Unary.Indexed

open import RoutingLib.Asynchronous using (Parallelisation)
open import RoutingLib.Asynchronous.Convergence.Conditions

module RoutingLib.Asynchronous.Convergence.Proofs.UresinDubois3
  {a ‚Ñì n o p}
  {ùïä·µ¢ : Setoid (Fin n) a ‚Ñì}
  (ùìü : Parallelisation ùïä·µ¢)
  (syncConditions : SynchronousConditions ùìü p o)
  where

  open Parallelisation ùìü
  open SynchronousConditions syncConditions


  syncIter-mono : ‚àÄ {x} ‚Üí x ‚àà D‚ÇÄ ‚Üí ‚àÄ {k t} ‚Üí k ‚â§‚Ñï t ‚Üí syncIter x t ‚â§ syncIter x k
  syncIter-mono x‚ààD‚ÇÄ {_} {zero}  z‚â§n = ‚â§-refl
  syncIter-mono x‚ààD‚ÇÄ {k} {suc t} k‚â§t with k ‚âü suc t
  ... | yes refl = ‚â§-refl
  ... | no  k‚â¢st = ‚â§-trans (iter-decreasing x‚ààD‚ÇÄ t) (syncIter-mono x‚ààD‚ÇÄ {k} {t} (pred-mono (‚â§+‚â¢‚áí< k‚â§t k‚â¢st)))

  syncIter‚ààD‚ÇÄ : ‚àÄ {x} ‚Üí x ‚àà D‚ÇÄ ‚Üí ‚àÄ K ‚Üí syncIter x K ‚àà D‚ÇÄ
  syncIter‚ààD‚ÇÄ x‚ààD‚ÇÄ zero    = x‚ààD‚ÇÄ
  syncIter‚ààD‚ÇÄ x‚ààD‚ÇÄ (suc K) = D‚ÇÄ-closed (syncIter‚ààD‚ÇÄ x‚ààD‚ÇÄ K)

  syncIter-fixed : ‚àÄ {x} (x‚ààD‚ÇÄ : x ‚àà D‚ÇÄ) t ‚Üí syncIter x (t + proj‚ÇÅ (iter-converge x‚ààD‚ÇÄ)) ‚âà Œæ
  syncIter-fixed x‚ààD‚ÇÄ zero    = proj‚ÇÇ (iter-converge x‚ààD‚ÇÄ)
  syncIter-fixed x‚ààD‚ÇÄ (suc t) = ‚âà-trans (F-cong (syncIter-fixed x‚ààD‚ÇÄ t)) Œæ-fixed

  syncIter-fixed‚Ä≤ : ‚àÄ {x} (x‚ààD‚ÇÄ : x ‚àà D‚ÇÄ) {t} ‚Üí proj‚ÇÅ (iter-converge x‚ààD‚ÇÄ) ‚â§‚Ñï t ‚Üí syncIter x t ‚âà Œæ
  syncIter-fixed‚Ä≤ x‚ààD‚ÇÄ T‚â§t with m‚â§n‚áío+m‚â°n T‚â§t
  ... | s , refl = syncIter-fixed x‚ààD‚ÇÄ s
  
  Œæ‚â§syncIter : ‚àÄ {x} ‚Üí x ‚àà D‚ÇÄ ‚Üí ‚àÄ t ‚Üí Œæ ‚â§ syncIter x t
  Œæ‚â§syncIter {x} x‚ààD‚ÇÄ t i with t ‚â§? proj‚ÇÅ (iter-converge x‚ààD‚ÇÄ)
  ... | yes t‚â§T = ‚â§·µ¢-respÀ°-‚âà·µ¢ (proj‚ÇÇ (iter-converge x‚ààD‚ÇÄ) i) (syncIter-mono x‚ààD‚ÇÄ t‚â§T i)
  ... | no  t‚â∞T = ‚â§·µ¢-reflexive (‚âà·µ¢-sym (syncIter-fixed‚Ä≤ x‚ààD‚ÇÄ (‚â∞‚áí‚â• t‚â∞T) i))
  
  module _ {x‚ÇÄ} (x‚ÇÄ‚ààD‚ÇÄ : x‚ÇÄ ‚àà D‚ÇÄ) where
  
    -- Synchronous iterations
    œÉ : ‚Ñï ‚Üí S
    œÉ = syncIter x‚ÇÄ

    -- Convergence time
    T : ‚Ñï
    T = proj‚ÇÅ (iter-converge x‚ÇÄ‚ààD‚ÇÄ)

    Œæ‚ààD‚ÇÄ : Œæ ‚àà D‚ÇÄ
    Œæ‚ààD‚ÇÄ = D‚ÇÄ-cong (syncIter‚ààD‚ÇÄ x‚ÇÄ‚ààD‚ÇÄ T) (proj‚ÇÇ (iter-converge x‚ÇÄ‚ààD‚ÇÄ))
    
    -- Sequence of sets
    D : ‚Ñï ‚Üí Pred S·µ¢ _
    D K {i} = (Œª x ‚Üí (Œæ i ‚â§·µ¢ x) √ó (x ‚â§·µ¢ œÉ K i)) ‚à© D‚ÇÄ 
    
    x‚ÇÄ‚ààD[0] : x‚ÇÄ ‚àà D 0
    x‚ÇÄ‚ààD[0] i = (Œæ‚â§syncIter x‚ÇÄ‚ààD‚ÇÄ 0 i , ‚â§·µ¢-refl) , (x‚ÇÄ‚ààD‚ÇÄ i)

    D-decreasing : ‚àÄ K ‚Üí D (suc K) ‚äÜ D K
    D-decreasing K x‚ààDK i with x‚ààDK i
    ... | ((Œæ‚â§x , x‚â§iterK), x‚ààD‚ÇÄ) = (Œæ‚â§x , ‚â§·µ¢-trans x‚â§iterK (iter-decreasing x‚ÇÄ‚ààD‚ÇÄ K i)) , x‚ààD‚ÇÄ

    Œæ‚ààD[K] : ‚àÄ K ‚Üí Œæ ‚àà D K
    Œæ‚ààD[K] K i = (‚â§·µ¢-refl , Œæ‚â§syncIter x‚ÇÄ‚ààD‚ÇÄ K i) , Œæ‚ààD‚ÇÄ i

    D-finish‚Ä≤ : ‚àÄ K {x} ‚Üí x ‚àà D (T + K) ‚Üí Œæ ‚âà x
    D-finish‚Ä≤ K x‚ààD[T+K] i rewrite +-comm T K =
      ‚â§·µ¢-antisym
        (proj‚ÇÅ (proj‚ÇÅ (x‚ààD[T+K] i)))
        (‚â§·µ¢-trans (proj‚ÇÇ (proj‚ÇÅ (x‚ààD[T+K] i))) (‚â§·µ¢-reflexive (syncIter-fixed x‚ÇÄ‚ààD‚ÇÄ K i)))

    D-finish : ‚àÉ‚ÇÇ Œª T Œæ ‚Üí ‚àÄ K ‚Üí Œæ ‚àà D (T + K) √ó (‚àÄ {x} ‚Üí x ‚àà D (T + K) ‚Üí Œæ ‚âà x)
    D-finish = T , Œæ , Œª K ‚Üí Œæ‚ààD[K] (T + K) , D-finish‚Ä≤ K
    
    F-monotonic  : ‚àÄ K {t} ‚Üí t ‚àà D K ‚Üí F t ‚àà D (suc K)
    F-monotonic K {t} t‚ààDK i =
      (‚â§·µ¢-respÀ°-‚âà·µ¢ (Œæ-fixed i) (F-monotone Œæ‚ààD‚ÇÄ t‚ààD‚ÇÄ Œæ‚â§t i) ,
      F-monotone t‚ààD‚ÇÄ (syncIter‚ààD‚ÇÄ x‚ÇÄ‚ààD‚ÇÄ K) t‚â§iterK i) ,
      D‚ÇÄ-closed t‚ààD‚ÇÄ i
      where
      t‚ààD‚ÇÄ : t ‚àà D‚ÇÄ
      t‚ààD‚ÇÄ j = proj‚ÇÇ (t‚ààDK j)

      Œæ‚â§t : Œæ ‚â§ t
      Œæ‚â§t j = proj‚ÇÅ (proj‚ÇÅ (t‚ààDK j))

      t‚â§iterK : t ‚â§ œÉ K
      t‚â§iterK j = proj‚ÇÇ (proj‚ÇÅ (t‚ààDK j))

    -- Note that this ACO is ONLY for x‚ÇÄ and for arbitrary x ‚àà D‚ÇÄ it is
    -- not possible to show x ‚àà D[0]. This is not made clear in the original
    -- U&D paper.

    aco : ACO ùìü _
    aco = record
      { D            = D
      ; D-decreasing = D-decreasing
      ; D-finish     = D-finish
      ; F-monotonic  = F-monotonic  
      }

