
module RoutingLib.Data.Fin.Properties where

open import Data.Fin renaming (zero to fzero; suc to fsuc)
open import Data.Fin.Properties
open import Data.Product using (_,_)
open import Data.Nat as ‚Ñï using (‚Ñï; z‚â§n; s‚â§s; zero; suc)
  renaming (_<_ to _<‚Ñï_; _‚â§_ to _‚â§‚Ñï_; _‚â§?_ to _‚â§‚Ñï?_; ‚â§-pred to ‚â§‚Ñï-pred)
import Data.Nat.Properties as ‚Ñï‚Çö
open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (Setoid)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; subst; cong; isEquivalence; sym; trans; subst‚ÇÇ; module ‚â°-Reasoning)
import Function.Bijection as Bijection

ùîΩ‚Çõ : ‚Ñï ‚Üí Setoid _ _
ùîΩ‚Çõ = ‚â°-setoid

private
  variable
    m n : ‚Ñï

lower : ‚àÄ {m n} (i : Fin m) ‚Üí .(to‚Ñï i <‚Ñï n) ‚Üí Fin n
lower {suc _} {suc n} fzero    leq = fzero
lower {suc _} {suc n} (fsuc i) leq = fsuc (lower i (‚Ñï‚Çö.‚â§-pred leq))

lower-injective : ‚àÄ {m n} (i j : Fin m) (i<n : to‚Ñï i <‚Ñï n) (j<n : to‚Ñï j <‚Ñï n)  ‚Üí
                  lower i i<n ‚â° lower j j<n ‚Üí i ‚â° j
lower-injective {suc _} {suc n} fzero    fzero    i<n       j<n       eq = refl
lower-injective {suc _} {suc n} (fsuc i) (fsuc j) (s‚â§s i<n) (s‚â§s j<n) eq =
  cong fsuc (lower-injective i j i<n j<n (suc-injective eq))

------------------------------------------------------------------------
-- from‚Ñï<

from‚Ñï<-mono-‚â§ : ‚àÄ {n i j} (i<n : i <‚Ñï n) (j<n : j <‚Ñï n) ‚Üí
                 i ‚â§‚Ñï j ‚Üí from‚Ñï< i<n ‚â§ from‚Ñï< j<n
from‚Ñï<-mono-‚â§ (s‚â§s z‚â§n)       (s‚â§s _)         z‚â§n       = z‚â§n
from‚Ñï<-mono-‚â§ (s‚â§s (s‚â§s i<n)) (s‚â§s (s‚â§s j<n)) (s‚â§s i‚â§j) =
  s‚â§s (from‚Ñï<-mono-‚â§ (s‚â§s i<n) (s‚â§s j<n) i‚â§j)

from‚Ñï<-cancel-‚â§ : ‚àÄ {n i j} (i<n : i <‚Ñï n) (j<n : j <‚Ñï n) ‚Üí
                  from‚Ñï< i<n ‚â§ from‚Ñï< j<n ‚Üí i ‚â§‚Ñï j
from‚Ñï<-cancel-‚â§ i<n j<n = subst‚ÇÇ _‚â§‚Ñï_ (to‚Ñï-from‚Ñï< i<n) (to‚Ñï-from‚Ñï< j<n)

from‚Ñï<-cancel-< : ‚àÄ {n i j} (i<n : i <‚Ñï n) (j<n : j <‚Ñï n) ‚Üí
                  from‚Ñï< i<n < from‚Ñï< j<n ‚Üí i <‚Ñï j
from‚Ñï<-cancel-< i<n j<n = subst‚ÇÇ _<‚Ñï_ (to‚Ñï-from‚Ñï< i<n) (to‚Ñï-from‚Ñï< j<n)

from‚Ñï<-irrelevant : ‚àÄ {n i j} (i<n : i <‚Ñï n) (j<n : j <‚Ñï n) ‚Üí
                    i ‚â° j ‚Üí from‚Ñï< i<n ‚â° from‚Ñï< j<n
from‚Ñï<-irrelevant i<n j<n refl = cong from‚Ñï< (‚Ñï‚Çö.<-irrelevant i<n j<n)

------------------------------------------------------------------------
-- from‚Ñï<‚Ä≥

from‚Ñï<‚Ä≥-cong : ‚àÄ {n i j} (i<n : i ‚Ñï.<‚Ä≥ n) (j<n : j ‚Ñï.<‚Ä≥ n) ‚Üí
               i ‚â° j ‚Üí from‚Ñï<‚Ä≥ i i<n ‚â° from‚Ñï<‚Ä≥ j j<n
from‚Ñï<‚Ä≥-cong i<n j<n eq =
  subst‚ÇÇ _‚â°_
    (from‚Ñï<‚â°from‚Ñï<‚Ä≥ (‚Ñï‚Çö.‚â§‚Ä≥‚áí‚â§ i<n) i<n)
    (from‚Ñï<‚â°from‚Ñï<‚Ä≥ (‚Ñï‚Çö.‚â§‚Ä≥‚áí‚â§ j<n) j<n)
    (from‚Ñï<-irrelevant (‚Ñï‚Çö.‚â§‚Ä≥‚áí‚â§ i<n) (‚Ñï‚Çö.‚â§‚Ä≥‚áí‚â§ j<n) eq)

from‚Ñï<‚Ä≥-to‚Ñï : ‚àÄ {n} {i : Fin n} (to‚Ñï<n : to‚Ñï i ‚Ñï.<‚Ä≥ n) ‚Üí
                from‚Ñï<‚Ä≥ (to‚Ñï i) to‚Ñï<n ‚â° i
from‚Ñï<‚Ä≥-to‚Ñï {n} {i} to‚Ñï<n = begin
  from‚Ñï<‚Ä≥ (to‚Ñï i) _  ‚â°‚ü® sym (from‚Ñï<‚â°from‚Ñï<‚Ä≥ (‚Ñï‚Çö.‚â§‚Ä≥‚áí‚â§ to‚Ñï<n) to‚Ñï<n) ‚ü©
  from‚Ñï< _           ‚â°‚ü® from‚Ñï<-to‚Ñï i (‚Ñï‚Çö.‚â§‚Ä≥‚áí‚â§ to‚Ñï<n) ‚ü©
  i ‚àé
  where open ‚â°-Reasoning

from‚Ñï<‚Ä≥-injective : ‚àÄ {n i j} (i<n : i ‚Ñï.<‚Ä≥ n) (j<n : j ‚Ñï.<‚Ä≥ n) ‚Üí
                    from‚Ñï<‚Ä≥ i i<n ‚â° from‚Ñï<‚Ä≥ j j<n ‚Üí i ‚â° j
from‚Ñï<‚Ä≥-injective i<n j<n eq = from‚Ñï<-injective _ _ (‚Ñï‚Çö.‚â§‚Ä≥‚áí‚â§ i<n) (‚Ñï‚Çö.‚â§‚Ä≥‚áí‚â§ j<n) (subst‚ÇÇ _‚â°_
    (sym (from‚Ñï<‚â°from‚Ñï<‚Ä≥ (‚Ñï‚Çö.‚â§‚Ä≥‚áí‚â§ i<n) i<n))
    (sym (from‚Ñï<‚â°from‚Ñï<‚Ä≥ (‚Ñï‚Çö.‚â§‚Ä≥‚áí‚â§ j<n) j<n))
    eq)

-----------
-- Other --
-----------

suc‚â¢zero : ‚àÄ {n} {i : Fin n} ‚Üí fsuc i ‚â¢ fzero
suc‚â¢zero ()

‚â∞‚áí‚â¢ : ‚àÄ {n‚ÇÅ} {m n : Fin n‚ÇÅ} ‚Üí ¬¨ (m ‚â§ n) ‚Üí m ‚â¢ n
‚â∞‚áí‚â¢ m‚â∞n refl = m‚â∞n ‚â§-refl

‚â∞‚áí> : ‚àÄ {n} {i j : Fin n} ‚Üí ¬¨ (i ‚â§ j) ‚Üí j < i
‚â∞‚áí> = ‚Ñï‚Çö.‚â∞‚áí>

i<j‚áíj‚â¢0 : ‚àÄ {n} {i j : Fin (suc n)} ‚Üí i < j ‚Üí j ‚â¢ fzero
i<j‚áíj‚â¢0 {j = fsuc j} i<j ()

i‚â∞j‚áíi‚â¢0 : ‚àÄ {n} {i j : Fin (suc n)} ‚Üí ¬¨ (i ‚â§ j) ‚Üí i ‚â¢ fzero
i‚â∞j‚áíi‚â¢0 i‚â∞j = i<j‚áíj‚â¢0 (‚â∞‚áí> i‚â∞j)

‚â§-pred : ‚àÄ {n} (i : Fin n) ‚Üí pred i ‚â§ i
‚â§-pred fzero    = z‚â§n
‚â§-pred (fsuc i) = ‚Ñï‚Çö.‚â§-step (‚Ñï‚Çö.‚â§-reflexive (to‚Ñï-inject‚ÇÅ i))

cast-injective : ‚àÄ {m n} (m‚â°n : m ‚â° n) {i j : Fin m} ‚Üí cast m‚â°n i ‚â° cast m‚â°n j ‚Üí i ‚â° j
cast-injective {suc m} {suc n} m‚â°n {fzero}  {fzero} eq  = refl
cast-injective {suc m} {suc n} m‚â°n {fsuc i} {fsuc j} eq =
  cong fsuc (cast-injective (‚Ñï‚Çö.suc-injective m‚â°n) (suc-injective eq))

suc-pred : ‚àÄ {i : Fin (suc n)} ‚Üí i ‚â¢ fzero ‚Üí to‚Ñï (fsuc (pred i)) ‚â° to‚Ñï i
suc-pred {i = fzero}  i‚â¢0 = contradiction refl i‚â¢0
suc-pred {i = fsuc i} i‚â¢0 = cong suc (to‚Ñï-inject‚ÇÅ i)
