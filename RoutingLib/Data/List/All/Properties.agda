open import Data.Bool using (Bool; true; if_then_else_)
open import Data.List hiding (any)
open import Data.List.All using (All; []; _‚à∑_; head; tail) renaming (map to map‚Çê)
open import Data.List.All.Properties
open import Data.List.Any using (Any; here; there; any)
open import Data.List.Relation.Pointwise using (Pointwise; []; _‚à∑_)
open import Data.Maybe using (Maybe; just; nothing; Eq; drop-just; just-injective)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Nat using (‚Ñï; suc; zero; z‚â§n; s‚â§s; _‚â§_; _<_)
open import Data.Nat.Properties using (‚äî-sel; ‚â§-trans)
open import Data.Fin using (Fin) renaming (zero to fzero; suc to fsuc)
open import Data.Empty using (‚ä•-elim)
open import Data.Product using (‚àÉ; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (Pred; Universal; Decidable; _‚äÜ_)
open import Relation.Binary using (Rel; REL; _Preserves_‚ü∂_; _Respects_; DecSetoid; Setoid; Symmetric)
open import Relation.Binary.PropositionalEquality using (_‚â°_; inspect; [_]; subst; subst‚ÇÇ) renaming (refl to ‚â°-refl; sym to ‚â°-sym; trans to ‚â°-trans)
open import Function using (_‚àò_; id)
open import Algebra.FunctionProperties using (Op‚ÇÇ; Congruent‚ÇÇ)
open import Relation.Unary using () renaming (_‚äÜ_ to _‚ãê_)

open import RoutingLib.Data.List
open import RoutingLib.Data.List.All
open import RoutingLib.Data.List.Properties
open import RoutingLib.Data.List.Permutation using (_‚áø_; _‚óÇ_‚â°_; here; there; []; _‚à∑_)
open import RoutingLib.Data.Fin.Properties using (ùîΩ‚Çõ)

module RoutingLib.Data.List.All.Properties where

  All-swap : ‚àÄ {a b ‚Ñì} {A : Set a} {B : Set b} {_~_ : REL (List A) B ‚Ñì} ‚Üí
             ‚àÄ {xss ys} ‚Üí All (Œª xs ‚Üí All (xs ~_) ys) xss ‚Üí
             All (Œª y ‚Üí All (_~ y) xss) ys
  All-swap {ys = []}      _  = []
  All-swap {ys = _ ‚à∑ _}  []  = All-universal (Œª _ ‚Üí []) _
  All-swap {ys = y ‚à∑ ys} ((x~y ‚à∑ x~ys) ‚à∑ pxss) =
    (x~y ‚à∑ (map‚Çê head pxss)) ‚à∑ All-swap (x~ys ‚à∑ (map‚Çê tail pxss))



  module _ {a p} {A : Set a} {P : A ‚Üí Set p} where

    -- Permutations
    
    All-‚óÇ‚â° : ‚àÄ {x xs ys} ‚Üí All P (x ‚à∑ xs) ‚Üí x ‚óÇ xs ‚â° ys ‚Üí All P ys
    All-‚óÇ‚â° pxs               here             = pxs
    All-‚óÇ‚â° (px ‚à∑ (py ‚à∑ pxs)) (there x‚óÇxs‚â°ys) = py ‚à∑ All-‚óÇ‚â° (px ‚à∑ pxs) x‚óÇxs‚â°ys
  
    All-‚áø : ‚àÄ {xs ys} ‚Üí All P xs ‚Üí xs ‚áø ys ‚Üí All P ys
    All-‚áø []         []                = []
    All-‚áø (px ‚à∑ pxs) (x‚óÇzs‚â°ys ‚à∑ xs‚áøzs) = All-‚óÇ‚â° (px ‚à∑ (All-‚áø pxs xs‚áøzs)) x‚óÇzs‚â°ys

    All-map‚Å∫‚ÇÇ : ‚àÄ {b} {B : Set b} {f : B ‚Üí A} ‚Üí (‚àÄ x ‚Üí P (f x)) ‚Üí ‚àÄ xs ‚Üí All P (map f xs)
    All-map‚Å∫‚ÇÇ Pf []       = []
    All-map‚Å∫‚ÇÇ Pf (x ‚à∑ xs) = Pf x ‚à∑ All-map‚Å∫‚ÇÇ Pf xs

    -----------
    -- Other --
    -----------

    {-
    All-applyBetween‚Å∫‚ÇÅ : ‚àÄ f s e ‚Üí (‚àÄ {i} ‚Üí s ‚â§ i ‚Üí i < e ‚Üí P (f i)) ‚Üí All P (applyBetween f s e)
    All-applyBetween‚Å∫‚ÇÅ f zero    e       Pf = applyUpTo‚Å∫‚ÇÅ f e (Pf z‚â§n)
    All-applyBetween‚Å∫‚ÇÅ f (suc s) zero    Pf = []
    All-applyBetween‚Å∫‚ÇÅ f (suc s) (suc e) Pf = All-applyBetween‚Å∫‚ÇÅ (f ‚àò suc) s e (Œª s‚â§i i<e ‚Üí Pf (s‚â§s s‚â§i) (s‚â§s i<e))

    All-applyBetween‚Å∫‚ÇÇ : ‚àÄ f s e ‚Üí (‚àÄ {i} ‚Üí P (f i)) ‚Üí All P (applyBetween f s e)
    All-applyBetween‚Å∫‚ÇÇ f s e Pf = All-applyBetween‚Å∫‚ÇÅ f s e (Œª _ _ ‚Üí Pf)
    

  s‚â§between‚Çõ‚Çë : ‚àÄ s e ‚Üí All (s ‚â§_) (between s e)
  s‚â§between‚Çõ‚Çë s e = All-applyBetween‚Å∫‚ÇÅ id s e (Œª s‚â§i _ ‚Üí s‚â§i)

  between‚Çõ‚Çë<e : ‚àÄ s e ‚Üí All (_< e) (between s e)
  between‚Çõ‚Çë<e s e = All-applyBetween‚Å∫‚ÇÅ id s e (Œª _ i<e ‚Üí i<e)
  -}

  ----------------------
  -- Pushed to stdlib --
  ----------------------


  module SetoidProperties {a ‚Ñì} (S : Setoid a ‚Ñì) where

    open Setoid S renaming (Carrier to A)
    open import Data.List.Any.Membership S using (_‚àà_)

    ‚àà-All : ‚àÄ {p} {P : A ‚Üí Set p} xs ‚Üí (‚àÄ {v} ‚Üí v ‚àà xs ‚Üí P v) ‚Üí All P xs
    ‚àà-All [] _ = []
    ‚àà-All (x ‚à∑ xs) ‚àà‚á®P = ‚àà‚á®P (here refl) ‚à∑ ‚àà-All xs (‚àà‚á®P ‚àò there)

    All-‚àà : ‚àÄ {p} {P : A ‚Üí Set p} ‚Üí P Respects _‚âà_ ‚Üí ‚àÄ {v xs} ‚Üí All P xs ‚Üí v ‚àà xs ‚Üí P v
    All-‚àà resp (px ‚à∑ pxs) (here v‚âàx)   = resp (sym v‚âàx) px
    All-‚àà resp (px ‚à∑ pxs) (there v‚ààxs) = All-‚àà resp pxs v‚ààxs

    map-all : ‚àÄ {b p} {B : Set b} {P : B ‚Üí Set p} f {xs : List A} ‚Üí (‚àÄ {x} ‚Üí x ‚àà xs ‚Üí P (f x)) ‚Üí All P (map f xs)
    map-all f {[]}     pres = []
    map-all f {x ‚à∑ xs} pres = pres (here refl) ‚à∑ map-all f (pres ‚àò there)
    
  open SetoidProperties public


  module DecSetoidProperties {a ‚Ñì} (DS : DecSetoid a ‚Ñì) where

    open DecSetoid DS renaming (Carrier to A)
    open import RoutingLib.Data.List.Membership.DecSetoid DS using (deduplicate)

    deduplicate‚Å∫ : ‚àÄ {p} {P : A ‚Üí Set p} {xs} ‚Üí All P xs ‚Üí All P (deduplicate xs)
    deduplicate‚Å∫ {xs = _}      [] = []
    deduplicate‚Å∫ {xs = x ‚à∑ xs} (px ‚à∑ pxs) with any (x ‚âü_) xs
    ... | yes _ = deduplicate‚Å∫ pxs
    ... | no  _ = px ‚à∑ deduplicate‚Å∫ pxs

  open DecSetoidProperties public


  module DoubleSetoidProperties
    {a‚ÇÅ ‚Ñì‚ÇÅ} (S‚ÇÅ : Setoid a‚ÇÅ ‚Ñì‚ÇÅ)
    {a‚ÇÇ ‚Ñì‚ÇÇ} (S‚ÇÇ : Setoid a‚ÇÇ ‚Ñì‚ÇÇ) where

    open Setoid S‚ÇÅ renaming (Carrier to A‚ÇÅ; refl to refl‚ÇÅ)
    open Setoid S‚ÇÇ renaming (Carrier to A‚ÇÇ)

    open import Data.List.Any.Membership S‚ÇÅ using () renaming (_‚àà_ to _‚àà‚ÇÅ_)
    open import Data.List.Any.Membership S‚ÇÇ using () renaming (_‚àà_ to _‚àà‚ÇÇ_)

    combine‚Å∫ : ‚àÄ {b p} {B : Set b} {P : B ‚Üí Set p} _‚Ä¢_ (xs : List A‚ÇÅ) (ys : List A‚ÇÇ) ‚Üí (‚àÄ {x y} ‚Üí x ‚àà‚ÇÅ xs ‚Üí y ‚àà‚ÇÇ ys ‚Üí P (x ‚Ä¢ y)) ‚Üí All P (combine _‚Ä¢_ xs ys)
    combine‚Å∫ _‚Ä¢_ []       ys pres = []
    combine‚Å∫ _‚Ä¢_ (x ‚à∑ xs) ys pres = ++‚Å∫ (map-all S‚ÇÇ (x ‚Ä¢_) (pres (here refl‚ÇÅ))) (combine‚Å∫ _‚Ä¢_ xs ys (pres ‚àò there))

  open DoubleSetoidProperties public


  allFinPairs‚Å∫ : ‚àÄ {n p} {P : Pred (Fin n √ó Fin n) p} ‚Üí (‚àÄ e ‚Üí P e) ‚Üí All P (allFinPairs n)
  allFinPairs‚Å∫ {n} P = combine‚Å∫ (ùîΩ‚Çõ n) (ùîΩ‚Çõ n) _,_ (allFin n) (allFin n) (Œª _ _ ‚Üí P _)







  -- All pairs

  All‚áíAllPairs : ‚àÄ {a p ‚Ñì} {A : Set a} {P : Pred A p} {_~_ : Rel A ‚Ñì} {xs} ‚Üí
                 All P xs ‚Üí (‚àÄ {x y} ‚Üí P x ‚Üí P y ‚Üí x ~ y) ‚Üí AllPairs _~_ xs
  All‚áíAllPairs []         pres = []
  All‚áíAllPairs (px ‚à∑ pxs) pres = map‚Çê (pres px) pxs ‚à∑ (All‚áíAllPairs pxs pres)
  
  AllPairs-map‚Å∫‚ÇÇ : ‚àÄ {a b ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {A : Set a} {B : Set b}  {_~‚ÇÅ_ : Rel A ‚Ñì‚ÇÅ} {_~‚ÇÇ_ : Rel B ‚Ñì‚ÇÇ}
              {f : A ‚Üí B} ‚Üí f Preserves _~‚ÇÅ_ ‚ü∂ _~‚ÇÇ_ ‚Üí AllPairs _~‚ÇÅ_ ‚ãê AllPairs _~‚ÇÇ_ ‚àò map f
  AllPairs-map‚Å∫‚ÇÇ f-pres []           = []
  AllPairs-map‚Å∫‚ÇÇ f-pres (x‚àâxs ‚à∑ xs!) = All-map (map‚Çê f-pres x‚àâxs) ‚à∑ AllPairs-map‚Å∫‚ÇÇ f-pres xs!

  {-
  AllPairs-mapMaybe‚Å∫ : ‚àÄ {a b ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {A : Set a} {B : Set b} {_~‚ÇÅ_ : Rel A ‚Ñì‚ÇÅ} {_~‚ÇÇ_ : Rel B ‚Ñì‚ÇÇ}
                  (f : A ‚Üí Maybe B) ‚Üí (‚àÄ {x y} ‚Üí x ~‚ÇÅ y ‚Üí (f x ‚â° nothing) ‚äé (f y ‚â° nothing) ‚äé (Eq _~‚ÇÇ_ (f x) (f y)))
                  ‚Üí AllPairs _~‚ÇÅ_ ‚ãê AllPairs _~‚ÇÇ_ ‚àò mapMaybe f
  AllPairs-mapMaybe‚Å∫ _ _ [] = []
  AllPairs-mapMaybe‚Å∫ {_~‚ÇÅ_ = _~‚ÇÅ_} {_~‚ÇÇ_} f f-inj {x ‚à∑ xs} (px ‚à∑ pxs) with f x | inspect f x
  ... | nothing | _            = AllPairs-mapMaybe‚Å∫ f f-inj pxs
  ... | just v  | [ fx‚â°justv ] = mapMaybe‚Å∫ (v ~‚ÇÇ_) {!!} ‚à∑ AllPairs-mapMaybe‚Å∫ f f-inj pxs
    where
    convert : ‚àÄ {a} ‚Üí x ~‚ÇÅ a ‚Üí ‚àÄ {b} ‚Üí f a ‚â° just b ‚Üí v ~‚ÇÇ b
    convert {a} x~a {b} fa‚â°justb with f-inj x~a
    ... | inj‚ÇÅ fx‚â°nothing        = contradiction (‚â°-trans (‚â°-sym fx‚â°nothing) fx‚â°justv) Œª()
    ... | inj‚ÇÇ (inj‚ÇÅ fa‚â°nothing) = contradiction (‚â°-trans (‚â°-sym fa‚â°nothing) fa‚â°justb) Œª()
    ... | inj‚ÇÇ (inj‚ÇÇ fx~fa)      = drop-just (subst‚ÇÇ (Eq _~‚ÇÇ_) fx‚â°justv fa‚â°justb fx~fa)
  -}
  
  module _ {a ‚Ñì} {A : Set a} {_~_ : Rel A ‚Ñì} where

    AllPairs-‚óÇ‚â° : Symmetric _~_ ‚Üí ‚àÄ {x xs ys} ‚Üí AllPairs _~_ (x ‚à∑ xs) ‚Üí x ‚óÇ xs ‚â° ys ‚Üí AllPairs _~_ ys
    AllPairs-‚óÇ‚â° sym pxs                           here             = pxs
    AllPairs-‚óÇ‚â° sym ((x~z ‚à∑ x~xs) ‚à∑ (y~xs ‚à∑ pxs)) (there x‚óÇxs‚â°ys) = All-‚óÇ‚â° (sym x~z ‚à∑ y~xs) x‚óÇxs‚â°ys ‚à∑ (AllPairs-‚óÇ‚â° sym (x~xs ‚à∑ pxs) x‚óÇxs‚â°ys)

    AllPairs-‚áø : Symmetric _~_ ‚Üí ‚àÄ {xs ys} ‚Üí AllPairs _~_ xs ‚Üí xs ‚áø ys ‚Üí AllPairs _~_ ys
    AllPairs-‚áø sym []           []                 = []
    AllPairs-‚áø sym (x~xs ‚à∑ pxs) (x‚óÇzs‚â°ys ‚à∑ xs‚áøzs) = AllPairs-‚óÇ‚â° sym (All-‚áø x~xs xs‚áøzs ‚à∑ AllPairs-‚áø sym pxs xs‚áøzs) x‚óÇzs‚â°ys


    AllPairs-filter‚Å∫ : ‚àÄ {p} {P : A ‚Üí Set p} (P? : Decidable P)
                     ‚Üí ‚àÄ {xs} ‚Üí AllPairs _~_ xs ‚Üí AllPairs _~_ (filter P? xs)
    AllPairs-filter‚Å∫ P? {_}      []           = []
    AllPairs-filter‚Å∫ P? {xs = x ‚à∑ xs} (x‚àâxs ‚à∑ xs!) with P? x
    ... | no  _ = AllPairs-filter‚Å∫ P? xs!
    ... | yes _ = filter‚Å∫‚ÇÇ P? x‚àâxs ‚à∑ AllPairs-filter‚Å∫ P? xs!
    
    AllPairs-++‚Å∫ : ‚àÄ {xs ys} ‚Üí AllPairs _~_ xs ‚Üí AllPairs _~_ ys 
                 ‚Üí All (Œª x ‚Üí All (x ~_) ys) xs ‚Üí AllPairs _~_ (xs ++ ys)
    AllPairs-++‚Å∫ []         ~ys _              = ~ys
    AllPairs-++‚Å∫ (px ‚à∑ ~xs) ~ys (x~ys ‚à∑ xs~ys) = ++‚Å∫ px x~ys ‚à∑ AllPairs-++‚Å∫ ~xs ~ys xs~ys

    AllPairs-concat‚Å∫ : ‚àÄ {xss} ‚Üí All (AllPairs _~_) xss ‚Üí
                       AllPairs (Œª xs ys ‚Üí All (Œª x ‚Üí All (x ~_) ys) xs) xss ‚Üí
                       AllPairs _~_ (concat xss)
    AllPairs-concat‚Å∫ []           []              = []
    AllPairs-concat‚Å∫ (pxs ‚à∑ pxss) (xs~xss ‚à∑ ~xss) = AllPairs-++‚Å∫ pxs (AllPairs-concat‚Å∫ pxss ~xss) (map‚Çê concat‚Å∫ (All-swap xs~xss))

    AllPairs-drop‚Å∫ : ‚àÄ {xs} n ‚Üí AllPairs _~_ xs ‚Üí AllPairs _~_ (drop n xs)
    AllPairs-drop‚Å∫ zero    pxs       = pxs
    AllPairs-drop‚Å∫ (suc n) []        = []
    AllPairs-drop‚Å∫ (suc n) (_ ‚à∑ pxs) = AllPairs-drop‚Å∫ n pxs

    AllPairs-take‚Å∫ : ‚àÄ {xs} n ‚Üí AllPairs _~_ xs ‚Üí AllPairs _~_ (take n xs)
    AllPairs-take‚Å∫ zero    pxs          = []
    AllPairs-take‚Å∫ (suc n) []           = []
    AllPairs-take‚Å∫ (suc n) (x~xs ‚à∑ pxs) = take‚Å∫ n x~xs ‚à∑ (AllPairs-take‚Å∫ n pxs)

    AllPairs-applyUpTo‚Å∫‚ÇÅ : ‚àÄ f n ‚Üí (‚àÄ {i j} ‚Üí i < j ‚Üí j < n ‚Üí f i ~ f j) ‚Üí AllPairs _~_ (applyUpTo f n)
    AllPairs-applyUpTo‚Å∫‚ÇÅ f zero    f~ = []
    AllPairs-applyUpTo‚Å∫‚ÇÅ f (suc n) f~ = applyUpTo‚Å∫‚ÇÅ (f ‚àò suc) n (f~ (s‚â§s z‚â§n) ‚àò s‚â§s) ‚à∑ AllPairs-applyUpTo‚Å∫‚ÇÅ (f ‚àò suc) n (Œª i‚â§j j<n ‚Üí f~ (s‚â§s i‚â§j) (s‚â§s j<n))

    AllPairs-applyUpTo‚Å∫‚ÇÇ : ‚àÄ f n ‚Üí (‚àÄ i j ‚Üí f i ~ f j) ‚Üí AllPairs _~_ (applyUpTo f n)
    AllPairs-applyUpTo‚Å∫‚ÇÇ f n f~ = AllPairs-applyUpTo‚Å∫‚ÇÅ f n (Œª _ _ ‚Üí f~ _ _)

    {-
    AllPairs-applyBetween‚Å∫‚ÇÅ : ‚àÄ f s e ‚Üí (‚àÄ {i j} ‚Üí s ‚â§ i ‚Üí i < j ‚Üí j < e ‚Üí f i ~ f j) ‚Üí AllPairs _~_ (applyBetween f s e)
    AllPairs-applyBetween‚Å∫‚ÇÅ f zero    e       Pf = AllPairs-applyUpTo‚Å∫‚ÇÅ f e (Pf z‚â§n)
    AllPairs-applyBetween‚Å∫‚ÇÅ f (suc s) zero    Pf = []
    AllPairs-applyBetween‚Å∫‚ÇÅ f (suc s) (suc e) Pf = AllPairs-applyBetween‚Å∫‚ÇÅ (f ‚àò suc) s e (Œª s‚â§i i<j j<e ‚Üí Pf (s‚â§s s‚â§i) (s‚â§s i<j) (s‚â§s j<e))

    AllPairs-applyBetween‚Å∫‚ÇÇ : ‚àÄ f s e ‚Üí (‚àÄ {i j} ‚Üí f i ~ f j) ‚Üí AllPairs _~_ (applyBetween f s e)
    AllPairs-applyBetween‚Å∫‚ÇÇ f s e Pf = AllPairs-applyBetween‚Å∫‚ÇÅ f s e (Œª _ _ _ ‚Üí Pf)
    -}

  module AllPairsDecSetoidProperties {a ‚Ñì} (DS : DecSetoid a ‚Ñì) where

    open DecSetoid DS renaming (Carrier to A)
    open import RoutingLib.Data.List.Membership.DecSetoid DS using (deduplicate)

    AllPairs-deduplicate‚Å∫ : ‚àÄ {‚Ñì} {_~_ : Rel A ‚Ñì} {xs} ‚Üí AllPairs _~_ xs ‚Üí
                            AllPairs _~_ (deduplicate xs)
    AllPairs-deduplicate‚Å∫ {xs = _}      [] = []
    AllPairs-deduplicate‚Å∫ {xs = x ‚à∑ xs} (px ‚à∑ pxs) with any (x ‚âü_) xs
    ... | yes _ = AllPairs-deduplicate‚Å∫ pxs
    ... | no  _ = deduplicate‚Å∫ _ px ‚à∑ AllPairs-deduplicate‚Å∫ pxs

  open AllPairsDecSetoidProperties public




