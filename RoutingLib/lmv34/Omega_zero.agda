open import RoutingLib.Routing.Algebra using (RawRoutingAlgebra)
open import RoutingLib.Routing as Routing using (AdjacencyMatrix)

module RoutingLib.lmv34.Omega_zero
  {a b ‚Ñì} (algebra : RawRoutingAlgebra a b ‚Ñì)
  {n} (A : AdjacencyMatrix algebra n)
  where

open import Data.Fin using (Fin)
open import Data.Fin.Subset using (Subset; ‚ä§; ‚ä•)
open import Data.Fin.Subset.Properties using (_‚àà?_)
open import Data.Nat using (_<_)
open import Data.Nat.Induction using (Acc; <-wellFounded)
open import Function using (const)
open import Relation.Nullary using (yes; no)
open import Relation.Binary.Indexed.Homogeneous using (IndexedDecSetoid)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import RoutingLib.lmv34.Gamma_zero algebra A using (Œì‚ÇÄ)
open import RoutingLib.lmv34.Gamma_zero.Properties algebra A using (Œì‚ÇÄ-cong)
open import RoutingLib.Iteration.Asynchronous.Static using (AsyncIterable; asyncIter')
open import RoutingLib.Iteration.Asynchronous.Static.Schedule using (Schedule; ùïã)
open import RoutingLib.Iteration.Asynchronous.Static.Schedule.Construct.Synchronous using (œàÀ¢ ∏‚Åø·∂ú; œàÀ¢ ∏‚Åø·∂ú-isSynchronous)
open import RoutingLib.Iteration.Synchronous using (_^_)

open Routing algebra n using (RoutingTable; RoutingMatrix; Dec‚ÑùùïÑ‚Çõ‚Å±; _‚âà‚Çò_; _‚âà‚Çú_)
open IndexedDecSetoid Dec‚ÑùùïÑ‚Çõ‚Å± using () renaming (isDecEquivalence·µ¢ to ‚ÑùùïÑ-isDecEquivalence·µ¢)

--------------------------------------------------------------------------------
-- Algebra

-- Generalised Vector (maybe already implemented?)
Vector·µ¢ : (Fin n ‚Üí Set a) ‚Üí Set a
Vector·µ¢ A·µ¢ = (i : Fin n) ‚Üí A·µ¢ i

-- Choice operator
infix 5 [_,_]_
[_,_]_ : ‚àÄ {A : Fin n ‚Üí Set a} ‚Üí Vector·µ¢ A ‚Üí Vector·µ¢ A ‚Üí Subset n ‚Üí Vector·µ¢ A
([ X , Y ] S) i with (i ‚àà? S)
... | yes _ = X i
... | no  _ = Y i

--------------------------------------------------------------------------------
-- Definition

Œì‚ÇÄ‚à• : AsyncIterable a ‚Ñì n
Œì‚ÇÄ‚à• = record {
  S·µ¢   = const RoutingTable;
  _‚âà·µ¢_ = _‚âà‚Çú_;
  F    = Œì‚ÇÄ;
  isAsyncIterable = record {
    isDecEquivalence·µ¢ = ‚ÑùùïÑ-isDecEquivalence·µ¢;
    F-cong = Œì‚ÇÄ-cong
    }
  }

-- We first define Œ©‚ÇÄ with an explicit accessible argument.
-- This allows for recursive reasoning about the function.
Œ©‚ÇÄ' : Schedule n ‚Üí RoutingMatrix ‚Üí {t : ùïã} ‚Üí Acc _<_ t ‚Üí RoutingMatrix
Œ©‚ÇÄ' = asyncIter' Œì‚ÇÄ‚à•

Œ©‚ÇÄ : Schedule n ‚Üí RoutingMatrix ‚Üí ùïã ‚Üí RoutingMatrix
Œ©‚ÇÄ œà X t = Œ©‚ÇÄ' œà X (<-wellFounded t)

--------------------------------------------------------------------------------
-- Properties

-- Operators
postulate
  [,]-‚ä§ : ‚àÄ {A : Fin n ‚Üí Set a} ‚Üí ‚àÄ (X Y : Vector·µ¢ A) ‚Üí ([ X , Y ] ‚ä§) ‚â° X
  [,]-‚ä• : ‚àÄ {A : Fin n ‚Üí Set a} ‚Üí ‚àÄ (X Y : Vector·µ¢ A) ‚Üí ([ X , Y ] ‚ä•) ‚â° Y

-- Œì‚ÇÄ is indeed the synchronous version of Œ©‚ÇÄ
Œ©‚ÇÄÀ¢ ∏‚Åø·∂ú=Œì‚ÇÄ : ‚àÄ X t ‚Üí Œ©‚ÇÄ œàÀ¢ ∏‚Åø·∂ú X t ‚âà‚Çò (Œì‚ÇÄ ^ t) X
Œ©‚ÇÄÀ¢ ∏‚Åø·∂ú=Œì‚ÇÄ = œàÀ¢ ∏‚Åø·∂ú-isSynchronous Œì‚ÇÄ‚à•
