
module RoutingLib.Iteration.Asynchronous.Static.Schedule.Construct.RoundRobin where

open import Data.Fin using (Fin; to‚Ñï) renaming (zero to fzero; suc to fsuc)
open import Data.Fin.Subset using (Subset; _‚àà_; ‚ä§; ‚ÅÖ_‚ÅÜ)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; subst; cong; sym; trans; module ‚â°-Reasoning)
open import Data.Product using(‚àÉ; _,_)
open import Data.Nat.DivMod using (_%_; _mod_; m%n‚â§m)
open import Data.Nat.Divisibility
open import Data.Fin.Subset.Properties using (‚àà‚ä§; x‚àà‚ÅÖx‚ÅÜ)
open import Data.Nat using (‚Ñï; zero; suc; _‚â§_; _<_; _+_; _‚à∏_)
open import Data.Nat.Properties
open import Function.Equivalence using (Equivalence)
open ‚â°-Reasoning

open import RoutingLib.Iteration.Asynchronous.Static.Schedule
open import RoutingLib.Iteration.Asynchronous.Static.Schedule.Construct.Synchronous
  using (Œ≤À¢ ∏‚Åø·∂ú; Œ≤À¢ ∏‚Åø·∂ú-causality)
open import RoutingLib.Data.Nat.DivMod
open import RoutingLib.Data.Nat.Divisibility

-- Round Robin Schedule Functions
Œ± ≥ ≥ : {n : ‚Ñï} ‚Üí ùïã ‚Üí Subset (suc n)
Œ± ≥ ≥ {n} t = ‚ÅÖ t mod (suc n) ‚ÅÜ

rr-schedule : (n : ‚Ñï) ‚Üí Schedule (suc n)
rr-schedule n = record
  { Œ±             = Œ± ≥ ≥
  ; Œ≤             = Œ≤À¢ ∏‚Åø·∂ú
  ; Œ≤-causality   = Œ≤À¢ ∏‚Åø·∂ú-causality
  }

-- Other properties

mod-properties : ‚àÄ {n} t (i : Fin (suc n)) ‚Üí i ‚â° (t + suc (n + (to‚Ñï i) ‚à∏ (t % (suc n)))) mod (suc n)
mod-properties {n} t i = begin
  i                                             ‚â°‚ü® sym (to‚Ñï-mod i) ‚ü©
  to‚Ñï i                               mod suc n ‚â°‚ü® sym (+ ≥-mod (to‚Ñï i) (m‚à∏m%n‚à£n t (suc n))) ‚ü©
  (to‚Ñï i + (t ‚à∏ t % suc n))           mod suc n ‚â°‚ü® sym (+À°-mod _ n‚à£n) ‚ü©
  (suc n + (to‚Ñï i + (t ‚à∏ t % suc n))) mod suc n ‚â°‚ü® sym (cong (_mod _) (+-assoc (suc n) _ _)) ‚ü©
  (suc n + to‚Ñï i + (t ‚à∏ t % suc n))   mod suc n ‚â°‚ü® sym (cong (_mod _) (+-‚à∏-assoc _ (m%n‚â§m t n)) ) ‚ü©
  ((suc n + to‚Ñï i) + t ‚à∏ t % suc n)   mod suc n ‚â°‚ü® cong (Œª v ‚Üí (v ‚à∏ t % suc n) mod _) (+-comm _ t) ‚ü©
  (t + suc (n + to‚Ñï i) ‚à∏ t % suc n)   mod suc n ‚â°‚ü® cong (_mod _) (+-‚à∏-assoc t (‚â§-trans t%[1+n]‚â§n+i (m‚â§n+m _ 1))) ‚ü©
  (t + (suc (n + to‚Ñï i) ‚à∏ t % suc n)) mod suc n ‚â°‚ü® cong (Œª v ‚Üí (t + v) mod _) (+-‚à∏-assoc 1 t%[1+n]‚â§n+i) ‚ü©
  (t + suc (n + to‚Ñï i ‚à∏ t % suc n))   mod suc n ‚àé
  where t%[1+n]‚â§n+i = ‚â§-trans (m%[1+n]‚â§n t n) (m‚â§m+n n _)

nonstarvation : ‚àÄ {n} t (i : Fin (suc n)) ‚Üí ‚àÉ Œª k ‚Üí i ‚àà Œ± ≥ ≥ (t + suc k)
nonstarvation {n} t i = n + (to‚Ñï i) ‚à∏ (t % (suc n)) ,
              subst (i ‚àà_) (cong ‚ÅÖ_‚ÅÜ (mod-properties t i)) (x‚àà‚ÅÖx‚ÅÜ i)

