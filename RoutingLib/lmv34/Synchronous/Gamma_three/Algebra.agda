open import Algebra.Core using (Op‚ÇÇ)
open import Data.List using (List; []; _‚à∑_; _++_; all; filter)
open import Data.Nat using (‚Ñï)
open import Data.Product using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Relation.Nullary.Negation using (¬¨?)

import Data.List.Membership.DecSetoid as Membership‚Ä≤

open import RoutingLib.Routing.Algebra using (RawRoutingAlgebra; IsRoutingAlgebra)
import RoutingLib.lmv34.Synchronous.Gamma_one.Algebra as Gamma_one_Algebra
import RoutingLib.lmv34.Synchronous.Gamma_two.Algebra as Gamma_two_Algebra

module RoutingLib.lmv34.Synchronous.Gamma_three.Algebra
  {a b ‚Ñì} {algebra : RawRoutingAlgebra a b ‚Ñì}
  (isRoutingAlgebra : IsRoutingAlgebra algebra)
  (n : ‚Ñï)
  where

open import RoutingLib.Routing algebra n
open RawRoutingAlgebra algebra
open Gamma_one_Algebra isRoutingAlgebra n
open Gamma_two_Algebra isRoutingAlgebra n using (RoutingVector‚ÇÇ)

open Membership‚Ä≤ Decùî∏‚Çõ using (_‚àâ?_)

-- Set subtraction
infix 8 _-_
_-_ : Op‚ÇÇ RoutingSet
A - B = filter (_‚àâ? B) A

-- Set union
infix 8 _‚à™_
_‚à™_ : Op‚ÇÇ RoutingSet
A ‚à™ B = A ++ (B - A)

-- Set difference
diff : RoutingSet ‚Üí RoutingSet ‚Üí RoutingSet √ó RoutingSet
diff A B = A - B , B - A

infix 8 _-·µ•_
_-·µ•_ : Op‚ÇÇ RoutingVector‚ÇÇ
(V -·µ• V') i j = (V i j) - (V' i j)

infix 8 _‚à™·µ•_
_‚à™·µ•_ : Op‚ÇÇ RoutingVector‚ÇÇ
(V ‚à™·µ• V') i j = (V i j) ‚à™ (V' i j)

diff·µ• : RoutingVector‚ÇÇ ‚Üí RoutingVector‚ÇÇ ‚Üí RoutingVector‚ÇÇ √ó RoutingVector‚ÇÇ
proj‚ÇÅ (diff·µ• V V') i j = proj‚ÇÅ (diff (V i j) (V' i j))
proj‚ÇÇ (diff·µ• V V') i j = proj‚ÇÇ (diff (V i j) (V' i j))
