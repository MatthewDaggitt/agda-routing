open import Data.Product using (_√ó_; ‚àÉ; proj‚ÇÅ; proj‚ÇÇ; _,_; ‚àÉ‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _‚â§_; _<_; z‚â§n; s‚â§s; _‚âü_; _‚â§?_; _‚à∏_)
open import Data.Nat.Properties using (‚â§-antisym; pred-mono; ‚â§+‚â¢‚áí<; ‚â∞‚áí‚â•; +-suc; +-comm; +-identity ≥; m+n‚à∏m‚â°n; m‚â§m+n; ‚â§-refl; ‚â§-step)
open import Relation.Binary using (Setoid; Rel; Reflexive; Antisymmetric; Transitive; _‚áí_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong)
import Relation.Binary.EqReasoning as EqReasoning
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (_‚à©_; U) renaming (_‚àà_ to _‚àà·µ§_)

open import RoutingLib.Data.Table using (Table)

open import RoutingLib.Asynchronous using (Parallelisation)
open import RoutingLib.Asynchronous.Convergence.Conditions

module RoutingLib.Asynchronous.Convergence.Proofs.UresinDubois3
  {a ‚Ñì n p}
  {ùïä·µ¢ : Table (Setoid a ‚Ñì) n}
  (ùìü : Parallelisation ùïä·µ¢)
  (syncConditions : SynchronousConditions ùìü p)
  where

  open import RoutingLib.Data.Table.IndexedTypes ùïä·µ¢
  open Parallelisation ùìü using (F; syncIter)
  open SynchronousConditions syncConditions
  open StartingConditions start
  open M-poset poset hiding (trans)

  -- Synchronous iterations
  œÉ : ‚Ñï ‚Üí S
  œÉ = syncIter x‚ÇÄ

  œÉ-mono : ‚àÄ {k t} ‚Üí k ‚â§ t ‚Üí œÉ t ‚âº œÉ k
  œÉ-mono {_} {zero}  z‚â§n = ‚âº-refl
  œÉ-mono {k} {suc t} k‚â§t with k ‚âü suc t
  ... | yes refl = ‚âº-refl
  ... | no  k‚â¢st = ‚âº-trans (iter-decreasing t) (œÉ-mono {k} {t} (pred-mono (‚â§+‚â¢‚áí< k‚â§t k‚â¢st)))
  
  œÉ[K]‚ààD‚ÇÄ : ‚àÄ K ‚Üí œÉ K ‚àà D‚ÇÄ
  œÉ[K]‚ààD‚ÇÄ zero    i = x‚ÇÄ‚ààD‚ÇÄ i
  œÉ[K]‚ààD‚ÇÄ (suc K) i = D‚ÇÄ-closed (œÉ K) (œÉ[K]‚ààD‚ÇÄ K) i
  
  -- Convergence time
  T : ‚Ñï
  T = proj‚ÇÅ iter-converge
  
  -- Convergence state
  Œæ : S
  Œæ = œÉ T
  
  T‚â§K‚áíŒæ‚âàœÉ[K] : ‚àÄ {K} ‚Üí T ‚â§ K ‚Üí Œæ ‚âà œÉ K
  T‚â§K‚áíŒæ‚âàœÉ[K] {K} T‚â§K = begin
    Œæ               ‚âà‚ü® proj‚ÇÇ iter-converge (K ‚à∏ T) ‚ü©
    œÉ (T + (K ‚à∏ T)) ‚â°‚ü® cong œÉ (m+n‚à∏m‚â°n T‚â§K) ‚ü©
    œÉ K             ‚àé
    where open EqReasoning ùïä

  Œæ‚âàF[Œæ] : Œæ ‚âà F Œæ
  Œæ‚âàF[Œæ] = begin
    Œæ         ‚âà‚ü® proj‚ÇÇ iter-converge 1 ‚ü©
    œÉ (T + 1) ‚â°‚ü® cong œÉ (+-comm T 1) ‚ü©
    œÉ (1 + T) ‚â°‚ü®‚ü©
    F Œæ ‚àé
    where open EqReasoning ùïä


  -- Sequence of sets
  D : ‚Ñï ‚Üí Pred p
  D K i = (Œª x ‚Üí (Œæ i ‚âº·µ¢ x) √ó (x ‚âº·µ¢ œÉ K i)) ‚à© D‚ÇÄ i 

  x‚ÇÄ‚ààD[0] : x‚ÇÄ ‚àà D 0
  x‚ÇÄ‚ààD[0] i = (œÉ-mono {0} {T} z‚â§n i , ‚âº·µ¢-refl) , x‚ÇÄ‚ààD‚ÇÄ i
  
  D-decreasing : ‚àÄ K ‚Üí D (suc K) ‚äÜ D K
  D-decreasing K x‚ààDK i with x‚ààDK i
  ... | ((Œæ‚âºx , x‚âºiterK), x‚ààD‚ÇÄ) = (Œæ‚âºx , ‚âº·µ¢-trans x‚âºiterK (iter-decreasing K i)) , x‚ààD‚ÇÄ

    
  Œæ‚ààD[K] : ‚àÄ K ‚Üí Œæ ‚àà D K
  Œæ‚ààD[K] K i with K ‚â§? T
  ... | yes K‚â§T = (‚âº·µ¢-refl , œÉ-mono K‚â§T i) , œÉ[K]‚ààD‚ÇÄ T i
  ... | no  K‚â∞T = (‚âº·µ¢-refl , ‚âº·µ¢-reflexive (T‚â§K‚áíŒæ‚âàœÉ[K] (‚â∞‚áí‚â• K‚â∞T) i)) , œÉ[K]‚ààD‚ÇÄ T i

  D-finish : ‚àÉ‚ÇÇ Œª T Œæ ‚Üí ‚àÄ K ‚Üí IsSingleton Œæ (D (T + K))
  D-finish = T , Œæ , Œª K ‚Üí Œæ‚ààD[K] (T + K) ,
             Œª t t‚ààD[T+K] i ‚Üí ‚âº·µ¢-antisym (proj‚ÇÅ (proj‚ÇÅ (t‚ààD[T+K] i)))
             (‚âº·µ¢-trans (proj‚ÇÇ (proj‚ÇÅ (t‚ààD[T+K] i))) (œÉ-mono (m‚â§m+n T K) i)) 

  F-monotonic  : ‚àÄ K {t} ‚Üí t ‚àà D K ‚Üí F t ‚àà D (suc K)
  F-monotonic K {t} t‚ààDK i = (‚âº·µ¢-trans (‚âº·µ¢-reflexive (Œæ‚âàF[Œæ] i)) (F-monotone (œÉ[K]‚ààD‚ÇÄ T) t‚ààD‚ÇÄ Œæ‚âºt i) ,
    F-monotone t‚ààD‚ÇÄ (œÉ[K]‚ààD‚ÇÄ K) t‚âºiterK i) ,
    D‚ÇÄ-closed t t‚ààD‚ÇÄ i
    where
    t‚ààD‚ÇÄ : t ‚àà D‚ÇÄ
    t‚ààD‚ÇÄ j = proj‚ÇÇ (t‚ààDK j)

    Œæ‚âºt : Œæ ‚âº t
    Œæ‚âºt j = proj‚ÇÅ (proj‚ÇÅ (t‚ààDK j))

    t‚âºiterK : t ‚âº œÉ K
    t‚âºiterK j = proj‚ÇÇ (proj‚ÇÅ (t‚ààDK j))

  aco : ACO ùìü p
  aco = record
    { D            = D
    ; D-decreasing = D-decreasing
    ; D-finish     = D-finish
    ; F-monotonic  = F-monotonic  
    }



