open import Data.Nat using (РёЋ) renaming (_РЅЪ_ to _РЅЪРёЋ_)
open import Data.Product using (_,_; _├Ќ_)
open import Level using () renaming (zero to РёЊРѓђ)
open import Relation.Binary
open import Relation.Binary.Product.Pointwise using (_├Ќ-РЅЪ_)
open import Relation.Binary.PropositionalEquality using (_РЅА_; refl)
open import Relation.Nullary using (┬г_; yes; no)

open import RoutingLib.Data.Path.Valid

module RoutingLib.Data.Path.Valid.Relation.Equality where

----------------------------------------------------------------------------
-- Relations

infix 4 _РЅѕРѓџ_ _РЅЅРѓџ_

data _РЅѕРѓџ_ : Rel PathРЂ┐рхЌ РёЊРѓђ where
  []  : [] РЅѕРѓџ []
  _Рѕи_ : Рѕђ {e f p q x y} Рєњ e РЅА f Рєњ p РЅѕРѓџ q Рєњ e Рѕи p РѕБ x РЅѕРѓџ f Рѕи q РѕБ y

_РЅЅРѓџ_ : Rel PathРЂ┐рхЌ РёЊРѓђ
p РЅЅРѓџ q = ┬г (p РЅѕРѓџ q)


----------------------------------------------------------------------------
-- Properties

private

  _РЅЪ­Юћ╝_ : Decidable {A = РёЋ ├Ќ РёЋ} _РЅА_
  _РЅЪ­Юћ╝_ = _РЅЪРёЋ_ ├Ќ-РЅЪ _РЅЪРёЋ_

abstract

  pРЅЅiРѕиp : Рѕђ {e} {p : PathРЂ┐рхЌ} {eРЄ┐p} Рєњ ┬г (p РЅѕРѓџ e Рѕи p РѕБ eРЄ┐p)
  pРЅЅiРѕиp {p = []}        ()
  pРЅЅiРѕиp {p = _ Рѕи _ РѕБ _} (_ Рѕи pРЅѕРѓџiРѕиp) = pРЅЅiРѕиp pРЅѕРѓџiРѕиp

  -- Injectivity properties

  module _ {i j k l p q x y} where

    Рѕи╦А-injectiveРѓЂ : (i , j) Рѕи p РѕБ x РЅѕРѓџ (k , l) Рѕи q РѕБ y Рєњ i РЅА k
    Рѕи╦А-injectiveРѓЂ (refl Рѕи _) = refl

    Рѕи╦А-injectiveРѓѓ : (i , j) Рѕи p РѕБ x РЅѕРѓџ (k , l) Рѕи q РѕБ y Рєњ j РЅА l
    Рѕи╦А-injectiveРѓѓ (refl Рѕи _) = refl

    Рѕи╩│-injective : (i , j) Рѕи p РѕБ x РЅѕРѓџ (k , l) Рѕи q РѕБ y Рєњ p РЅѕРѓџ q
    Рѕи╩│-injective (_ Рѕи pРЅѕq) = pРЅѕq

  -- Algebraic properties
  РЅѕРѓџ-refl : Reflexive _РЅѕРѓџ_
  РЅѕРѓџ-refl {[]}        = []
  РЅѕРѓџ-refl {_ Рѕи _ РѕБ _} = refl Рѕи РЅѕРѓџ-refl

  РЅѕРѓџ-reflexive : _РЅА_ РЄњ _РЅѕРѓџ_
  РЅѕРѓџ-reflexive refl = РЅѕРѓџ-refl

  РЅѕРѓџ-sym : Symmetric _РЅѕРѓџ_
  РЅѕРѓџ-sym []           = []
  РЅѕРѓџ-sym (refl Рѕи pРЅѕРѓџq) = refl Рѕи (РЅѕРѓџ-sym pРЅѕРѓџq)

  РЅѕРѓџ-trans : Transitive _РЅѕРѓџ_
  РЅѕРѓџ-trans []            []           = []
  РЅѕРѓџ-trans (refl Рѕи pРЅѕРѓџq)  (refl Рѕи qРЅѕРѓџr) = refl Рѕи (РЅѕРѓџ-trans pРЅѕРѓџq qРЅѕРѓџr)

  _РЅЪРѓџ_ : Decidable _РЅѕРѓџ_
  []          РЅЪРѓџ []              = yes []
  []          РЅЪРѓџ (k Рѕи q РѕБ _) = no ╬╗()
  (i Рѕи p РѕБ _) РЅЪРѓџ []              = no ╬╗()
  (i Рѕи p РѕБ _) РЅЪРѓџ (k Рѕи q РѕБ _) with i РЅЪ­Юћ╝ k | p РЅЪРѓџ q
  ... | no  iРЅбk | _       = no (╬╗{(iРЅАk Рѕи _) Рєњ iРЅбk iРЅАk})
  ... | _       | no  pРЅбq = no (╬╗{(_ Рѕи pРЅАq) Рєњ pРЅбq pРЅАq})
  ... | yes iРЅАk | yes pРЅАq = yes (iРЅАk Рѕи pРЅАq)

  РЅѕРѓџ-isEquivalence : IsEquivalence _РЅѕРѓџ_
  РЅѕРѓџ-isEquivalence = record
    { refl  = РЅѕРѓџ-refl
    ; sym   = РЅѕРѓџ-sym
    ; trans = РЅѕРѓџ-trans
    }

  РЅѕРѓџ-isDecEquivalence : IsDecEquivalence _РЅѕРѓџ_
  РЅѕРѓџ-isDecEquivalence = record
    { isEquivalence = РЅѕРѓџ-isEquivalence
    ; _РЅЪ_           = _РЅЪРѓџ_
    }

РёЎРѓЏ : Setoid РёЊРѓђ РёЊРѓђ
РёЎРѓЏ = record
  { Carrier       = PathРЂ┐рхЌ
  ; _РЅѕ_           = _РЅѕРѓџ_
  ; isEquivalence = РЅѕРѓџ-isEquivalence
  }

РёЎРѓЏ? : DecSetoid РёЊРѓђ РёЊРѓђ
РёЎРѓЏ? = record
  { Carrier          = PathРЂ┐рхЌ
  ; _РЅѕ_              = _РЅѕРѓџ_
  ; isDecEquivalence = РЅѕРѓџ-isDecEquivalence
  }
