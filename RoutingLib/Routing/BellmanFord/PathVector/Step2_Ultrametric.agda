open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; _,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ) renaming (map to map‚Çö)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_]‚Ä≤)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (m‚â§m+n; m+n‚à∏m‚â°n; ‚â§+‚â¢‚áí<; suc-injective; ‚â§-trans; ‚â§-refl; ‚â§-reflexive; <-trans ≥; <-transÀ°; <-irrefl; ‚â§-antisym; ‚äì-sel; ‚â∞‚áí‚â•; +-comm; +-assoc; +-mono-‚â§; ‚à∏-mono; m‚â§m‚äîn; ‚äî-mono-‚â§; ‚äì-mono-‚â§; m‚äìn‚â§m; ‚äì-idem; ‚äì-assoc; ‚äî-identity ≥; ‚äì-comm; +-cancelÀ°-‚â°; +-distribÀ°-‚äî; n‚â§m‚äîn; +-mono ≥-<; <‚áí‚â§; +-distrib ≥-‚äî; +-suc;  module ‚â§-Reasoning)
open import Data.Fin using (Fin) renaming (zero to fzero)
open import Data.Maybe using (Maybe; just; nothing)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (Decidable)
open import Function using (_‚àò_; _$_; id)

open import RoutingLib.Data.Graph.SimplePath using (SimplePath) renaming (length to length‚Çö)
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Data.Graph
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím+o‚â°n; ‚à∏-distribÀ°-‚äì-‚äî; ‚äî-monoÀ°-‚â§; m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; +-mono ≥-‚â§; ‚â§-stepsÀ°; ‚à∏-monoÀ°-<; m‚â§n‚áím‚äìn‚â°m; ‚à∏-cancelÀ°; n<m‚áín‚äìo<m; ‚äî-triangulate; n‚â¢0‚áí0<n; ‚â§-steps ≥; m>n‚áím‚à∏n‚â¢0; m<n‚áín‚â¢0)
open import RoutingLib.Data.Matrix using (min‚Å∫; map; max‚Å∫; zipWith)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫-cong; max‚Å∫-constant; zipWith-sym; max‚Å∫-cong; max‚Å∫[M]‚â§max‚Å∫[N]; M‚â§max‚Å∫[M]; max‚Å∫[M]-distrib-‚äî)
open import RoutingLib.Data.Matrix.Membership.Propositional.Properties using (max‚Å∫[M]‚ààM)
open import RoutingLib.Function using (_‚àò‚ÇÇ_)
open import RoutingLib.Function.Distance using (IsUltrametric; MaxTriangleIneq)

open import RoutingLib.Routing.Definitions
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
import RoutingLib.Routing.BellmanFord.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.Step1_HeightFunction as Step1
import RoutingLib.Routing.BellmanFord.DistanceVector.Step2_Ultrametric as Step2·∂ú

module RoutingLib.Routing.BellmanFord.PathVector.Step2_Ultrametric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí

  open Step1 ùìüùì¢ùìí
  
  open Step2·∂ú ùì°ùìü·∂ú ùì¢ùìí
    using ()
    renaming
    ( D            to D·∂ú
    ; D‚Çõ·µ§‚Çö         to D·∂ú‚Çõ·µ§‚Çö
    ; D‚Çò‚Çê‚Çì         to D·∂ú‚Çò‚Çê‚Çì
    ; D‚â°0‚áíX‚âàY      to D·∂ú‚â°0‚áíX‚âàY
    ; X‚âàY‚áíD‚â°0      to X‚âàY‚áíD·∂ú‚â°0
    ; D-sym        to D·∂ú-sym
    ; D-cong‚ÇÇ      to D·∂ú-cong
    ; D-maxTriIneq to D·∂ú-maxTriIneq
    ; D‚â§D‚Çõ·µ§‚Çö       to D·∂ú‚â§D·∂ú‚Çõ·µ§‚Çö
    ; D‚â§d‚Çò‚Çê‚Çì       to D·∂ú‚â§D·∂ú‚Çò‚Çê‚Çì
    ; 1‚â§D‚Çò‚Çê‚Çì       to 1‚â§D·∂ú‚Çò‚Çê‚Çì
    )

  abstract

    H·∂ú : ‚Ñï
    H·∂ú = D·∂ú‚Çò‚Çê‚Çì

    1‚â§H·∂ú : 1 ‚â§ H·∂ú
    1‚â§H·∂ú = 1‚â§D·∂ú‚Çò‚Çê‚Çì

    D·∂ú‚â§H·∂ú : ‚àÄ X Y ‚Üí D·∂ú X Y ‚â§ H·∂ú
    D·∂ú‚â§H·∂ú = D·∂ú‚â§D·∂ú‚Çò‚Çê‚Çì
{-
    h‚Å±x‚â§H·∂ú+H‚Å± : ‚àÄ x ‚Üí h‚Å± x < H·∂ú + H‚Å±
    h‚Å±x‚â§H·∂ú+H‚Å± x = +-mono-‚â§ 1‚â§D·∂ú‚Çò‚Çê‚Çì (h‚Å±[r]‚â§n x)
-}

  ------------------------------------------------------------------------------
  -- Mapping length into the right range
  ------------------------------------------------------------------------------
  -- Maps a path length to the corresponding distance
  
    invert : ‚Ñï ‚Üí ‚Ñï
    invert x = H‚Å± ‚à∏ x

    invert-‚â§ : ‚àÄ {x y} ‚Üí y ‚â§ x ‚Üí invert x ‚â§ invert y
    invert-‚â§ y‚â§x = ‚à∏-mono ‚â§-refl y‚â§x
  
    invert-< : ‚àÄ {x y} ‚Üí y < x ‚Üí x < n ‚Üí invert x < invert y
    invert-< {x} {y} y<x x<n = ‚à∏-monoÀ°-< y<x x<n
  
    invert-¬¨cong : ‚àÄ {x y} ‚Üí x ‚â§ n ‚Üí y ‚â§ n ‚Üí x ‚â¢ y ‚Üí invert x ‚â¢ invert y
    invert-¬¨cong x‚â§n y‚â§n x‚â¢y = x‚â¢y ‚àò ‚à∏-cancelÀ° x‚â§n y‚â§n

{-
    invert‚â¢0 : ‚àÄ {x} ‚Üí x < H‚Å± ‚Üí invert x ‚â¢ 0
    invert‚â¢0 x<H‚Å± = m>n‚áím‚à∏n‚â¢0 x<H‚Å±
-}

{-
  invert-distr : ‚àÄ X Y Z ‚Üí invert (‚ü™ X ‚ü´ ‚äì ‚ü™ Y ‚ü´ ‚äì ‚ü™ Z ‚ü´) ‚â°
                           invert (‚ü™ X ‚ü´ ‚äì ‚ü™ Y ‚ü´) ‚äî invert (‚ü™ Y ‚ü´ ‚äì ‚ü™ Z ‚ü´)
  invert-distr X Y Z = begin
    invert (‚ü™ X ‚ü´ ‚äì ‚ü™ Y ‚ü´ ‚äì ‚ü™ Z ‚ü´)                  ‚â°‚ü® cong invert (‚äì-triangulate (‚ü™ X ‚ü´) _ _) ‚ü©
    invert ((‚ü™ X ‚ü´ ‚äì ‚ü™ Y ‚ü´) ‚äì (‚ü™ Y ‚ü´ ‚äì ‚ü™ Z ‚ü´))       ‚â°‚ü® invert-distr2 (‚ü™ X ‚ü´ ‚äì ‚ü™ Y ‚ü´) (‚ü™ Y ‚ü´ ‚äì ‚ü™ Z ‚ü´) ‚ü©
    invert (‚ü™ X ‚ü´ ‚äì ‚ü™ Y ‚ü´) ‚äî invert (‚ü™ Y ‚ü´ ‚äì ‚ü™ Z ‚ü´)  ‚àé
    where open ‚â°-Reasoning
-}

  ------------------------------------------------------------------------------
  -- Distance metric for inconsistent routes
  ------------------------------------------------------------------------------

  abstract
  
    d‚Å± : Route ‚Üí Route ‚Üí ‚Ñï
    d‚Å± x y with x ‚âü y
    ... | yes _ = 0
    ... | no  _ = H‚Å± ‚à∏ (h‚Å± x ‚äì h‚Å± y)
  
    d‚Å±-cong : d‚Å± Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
    d‚Å±-cong {u} {v} {x} {y} u‚âàv x‚âày with u ‚âü x | v ‚âü y
    ... | yes _   | yes _   = refl
    ... | yes u‚âàx | no  v‚âây = contradiction (‚âà-trans (‚âà-trans (‚âà-sym u‚âàv) u‚âàx) x‚âày) v‚âây
    ... | no  u‚ââx | yes v‚âày = contradiction (‚âà-trans (‚âà-trans u‚âàv v‚âày) (‚âà-sym x‚âày)) u‚ââx
    ... | no  _   | no  _   = cong‚ÇÇ (invert ‚àò‚ÇÇ _‚äì_) (h‚Å±-cong u‚âàv) (h‚Å±-cong x‚âày)

    x‚âày‚áíd‚Å±‚â°0 : ‚àÄ {x y} ‚Üí x ‚âà y ‚Üí d‚Å± x y ‚â° 0
    x‚âày‚áíd‚Å±‚â°0 {x} {y} x‚âày with x ‚âü y
    ... | yes _   = refl
    ... | no  x‚âây = contradiction x‚âày x‚âây

    d‚Å±‚â°0‚áíx‚âày : ‚àÄ {x y} ‚Üí d‚Å± x y ‚â° 0 ‚Üí x ‚âà y
    d‚Å±‚â°0‚áíx‚âày {x} {y} d‚Å±xy‚â°0 with x ‚âü y
    ... | yes x‚âày = x‚âày
    ... | no  _   = contradiction d‚Å±xy‚â°0 (m>n‚áím‚à∏n‚â¢0 (n<m‚áín‚äìo<m _ (s‚â§s (h‚Å±‚â§n-1 x))))
    
    d‚Å±-sym : ‚àÄ x y ‚Üí d‚Å± x y ‚â° d‚Å± y x
    d‚Å±-sym x y with x ‚âü y | y ‚âü x
    ... | yes _   | yes _   = refl
    ... | yes x‚âày | no  y‚ââx = contradiction (‚âà-sym x‚âày) y‚ââx
    ... | no  x‚âây | yes y‚âàx = contradiction (‚âà-sym y‚âàx) x‚âây
    ... | no  _   | no  _   = cong invert (‚äì-comm (h‚Å± x) (h‚Å± y))
  
    d‚Å±-maxTriIneq : MaxTriangleIneq S d‚Å±
    d‚Å±-maxTriIneq x y z with x ‚âü z | x ‚âü y | y ‚âü z
    ... | yes _   | _       | _       = z‚â§n
    ... | no  x‚ââz | yes x‚âày | yes y‚âàz = contradiction (‚âà-trans x‚âày y‚âàz) x‚ââz
    ... | no  _   | yes x‚âày | no  _   = ‚â§-reflexive (cong (Œª v ‚Üí invert (v ‚äì h‚Å± z)) (h‚Å±-cong x‚âày))
    ... | no  _   | no  _   | yes y‚âàz = ‚â§-reflexive (trans (cong (Œª v ‚Üí invert (h‚Å± x ‚äì v)) (h‚Å±-cong (‚âà-sym y‚âàz))) (sym (‚äî-identity ≥ _) ))
    ... | no  _   | no  _   | no  _   = begin
      invert (h‚Å± x ‚äì h‚Å± z)                                              ‚â°‚ü® ‚à∏-distribÀ°-‚äì-‚äî _ (h‚Å± x) (h‚Å± z) ‚ü©
      invert (h‚Å± x) ‚äî invert (h‚Å± z)                                     ‚â§‚ü® ‚äî-monoÀ°-‚â§ (invert (h‚Å± z)) (m‚â§m‚äîn (invert (h‚Å± x)) (invert (h‚Å± y))) ‚ü©
      (invert (h‚Å± x) ‚äî invert (h‚Å± y)) ‚äî invert (h‚Å± z)                   ‚â°‚ü® ‚äî-triangulate (invert (h‚Å± x)) (invert (h‚Å± y)) (invert (h‚Å± z)) ‚ü©
      (invert (h‚Å± x) ‚äî invert (h‚Å± y)) ‚äî (invert (h‚Å± y) ‚äî invert (h‚Å± z)) ‚â°‚ü® sym (cong‚ÇÇ _‚äî_ (‚à∏-distribÀ°-‚äì-‚äî _ (h‚Å± x) (h‚Å± y)) (‚à∏-distribÀ°-‚äì-‚äî _ (h‚Å± y) (h‚Å± z))) ‚ü©
      invert (h‚Å± x ‚äì h‚Å± y) ‚äî invert (h‚Å± y ‚äì h‚Å± z)                       ‚àé
      where open ‚â§-Reasoning

  ------------------------------------------------------------------------------
  -- Distance metric for inconsistent routes
  ------------------------------------------------------------------------------

  abstract
  
    D‚Å± : RMatrix ‚Üí RMatrix ‚Üí ‚Ñï
    D‚Å± X Y = max‚Å∫ (zipWith d‚Å± X Y)
    
    D‚Å±-cong : ‚àÄ {W X Y Z} ‚Üí W ‚âà‚Çò Y ‚Üí X ‚âà‚Çò Z ‚Üí D‚Å± W X ‚â° D‚Å± Y Z
    D‚Å±-cong W‚âàY X‚âàZ = max‚Å∫-cong (Œª i j ‚Üí d‚Å±-cong (W‚âàY i j) (X‚âàZ i j))

{-
    X‚âàY‚áíD‚Å±‚â°0 : ‚àÄ {X Y} ‚Üí X ‚âà‚Çò Y ‚Üí D‚Å± X Y ‚â° 0
    X‚âàY‚áíD‚Å±‚â°0 {X} {Y} X‚âàY = max‚Å∫-constant (Œª i j ‚Üí x‚âày‚áíd‚Å±‚â°0 (X‚âàY i j))

    D‚Å±‚â°0‚áíX‚âàY : ‚àÄ {X Y} ‚Üí D‚Å± X Y ‚â° 0 ‚Üí X ‚âà‚Çò Y
    D‚Å±‚â°0‚áíX‚âàY {X} {Y} DXY‚â°0 i j = d‚Å±‚â°0‚áíx‚âày (‚â§-antisym (subst (d‚Å± (X i j) (Y i j) ‚â§_) DXY‚â°0 (M‚â§max‚Å∫[M] (zipWith d‚Å± X Y) i j)) z‚â§n)

-}

    D‚Å±-sym : ‚àÄ X Y ‚Üí D‚Å± X Y ‚â° D‚Å± Y X
    D‚Å±-sym X Y = max‚Å∫-cong (zipWith-sym _‚â°_ d‚Å±-sym X Y)


    D‚Å±-maxTriIneq : MaxTriangleIneq ‚ÑùùïÑ‚Çõ D‚Å±
    D‚Å±-maxTriIneq X Y Z = begin
      D‚Å± X Z                                                 ‚â°‚ü® refl ‚ü©
      max‚Å∫ (Œª i j ‚Üí d‚Å± (X i j) (Z i j))                      ‚â§‚ü® max‚Å∫[M]‚â§max‚Å∫[N] (Œª i j ‚Üí d‚Å±-maxTriIneq (X i j) (Y i j) (Z i j)) ‚ü©
      max‚Å∫ (Œª i j ‚Üí d‚Å± (X i j) (Y i j) ‚äî d‚Å± (Y i j) (Z i j)) ‚â°‚ü® sym (max‚Å∫[M]-distrib-‚äî (zipWith d‚Å± X Y) (zipWith d‚Å± Y Z)) ‚ü©
      D‚Å± X Y ‚äî D‚Å± Y Z ‚àé
      where open ‚â§-Reasoning
    
    

    X‚Å±Y·∂ú‚áíD‚Å±XY‚â°D‚Å±X : ‚àÄ {X Y} ‚Üí ùë∞‚Çò X ‚Üí ùë™‚Çò Y ‚Üí D‚Å± X Y ‚â° max‚Å∫ (map (invert ‚àò h‚Å±) X)
    X‚Å±Y·∂ú‚áíD‚Å±XY‚â°D‚Å±X {X} {Y} X‚Å± Y·∂ú with max‚Å∫[M]‚ààM (zipWith d‚Å± X Y) | ùë∞‚Çò-witness X‚Å±
    ... | (i , j , max[M]‚â°dX·µ¢‚±ºY·µ¢‚±º) | (k , l , X‚Çñ‚Çó‚Å±) = begin
      max‚Å∫ (zipWith d‚Å± X Y)      ‚â°‚ü® {!!} ‚ü©
      max‚Å∫ (map (invert ‚àò h‚Å±) X) ‚àé
      where open ‚â°-Reasoning
{-
    X‚Å±Y·∂úZ·∂ú‚áíD‚Å±XZ‚â§D‚Å±XY : ‚àÄ {X Y Z} ‚Üí ùë∞‚Çò X ‚Üí ùë™‚Çò Y ‚Üí ùë™‚Çò Z ‚Üí D‚Å± X Z ‚â§ D‚Å± X Y
    X‚Å±Y·∂úZ·∂ú‚áíD‚Å±XZ‚â§D‚Å±XY X‚Å± Y·∂ú Z·∂ú = ‚â§-reflexive (trans (X‚Å±Y·∂ú‚áíD‚Å±XY‚â°D‚Å±X X‚Å± Z·∂ú) (sym (X‚Å±Y·∂ú‚áíD‚Å±XY‚â°D‚Å±X X‚Å± Y·∂ú)))
    
    X·∂úY·∂úZ‚Å±‚áíD‚Å±XZ‚â§D‚Å±YZ : ‚àÄ {X Y Z} ‚Üí ùë™‚Çò X ‚Üí ùë™‚Çò Y ‚Üí ùë∞‚Çò Z ‚Üí D‚Å± X Z ‚â§ D‚Å± Y Z
    X·∂úY·∂úZ‚Å±‚áíD‚Å±XZ‚â§D‚Å±YZ X·∂ú Y·∂ú Z‚Å± = subst‚ÇÇ _‚â§_ (D‚Å±-sym _ _) (D‚Å±-sym _ _) (X‚Å±Y·∂úZ·∂ú‚áíD‚Å±XZ‚â§D‚Å±XY Z‚Å± Y·∂ú X·∂ú)


  ------------------------------------------------------------------------------
  -- Distance function
  ------------------------------------------------------------------------------
  -- A true distance function over IMatrices

  D : RMatrix ‚Üí RMatrix ‚Üí ‚Ñï
  D X Y with X ‚âü‚Çò Y | ùë™‚Çò? X | ùë™‚Çò? Y
  ... | yes _ | _      | _     = zero
  ... | no  _ | yes X·∂ú | yes Y·∂ú = D·∂ú (toCMatrix X·∂ú) (toCMatrix Y·∂ú)
  ... | no  _ | _      | _     = H·∂ú + D‚Å± X Y

{-
  D-cong : D Preserves‚ÇÇ _‚âà‚Çò_ ‚ü∂ _‚âà‚Çò_ ‚ü∂ _‚â°_
  D-cong {W} {X} {Y} {Z} W‚âàX Y‚âàZ with W ‚âü‚Çò Y | X ‚âü‚Çò Z 
  ... | yes _   | yes _   = refl
  ... | yes W‚âàY | no  X‚ââZ = contradiction (‚âà‚Çò-trans (‚âà‚Çò-trans (‚âà‚Çò-sym W‚âàX) W‚âàY) Y‚âàZ) X‚ââZ
  ... | no  W‚ââY | yes X‚âàZ = contradiction (‚âà‚Çò-trans (‚âà‚Çò-trans W‚âàX X‚âàZ) (‚âà‚Çò-sym Y‚âàZ)) W‚ââY
  ... | no _    | no _    with ùë™‚Çò? W | ùë™‚Çò? X | ùë™‚Çò? Y | ùë™‚Çò? Z
  ...   | no  W‚Å± | yes X·∂ú | _      | _      = contradiction (ùë™‚Çò-cong (‚âà‚Çò-sym W‚âàX) X·∂ú) W‚Å±
  ...   | yes W·∂ú | no  X‚Å± | _      |  _     = contradiction (ùë™‚Çò-cong W‚âàX W·∂ú) X‚Å±
  ...   | _      | _      | yes Y·∂ú | no  Z‚Å± = contradiction (ùë™‚Çò-cong Y‚âàZ Y·∂ú) Z‚Å±
  ...   | _      | _      | no  Y‚Å± | yes Z·∂ú = contradiction (ùë™‚Çò-cong (‚âà‚Çò-sym Y‚âàZ) Z·∂ú) Y‚Å±
  ...   | no _   | no _   | _      | _      = cong (H·∂ú +_) (D‚Å±-cong W‚âàX Y‚âàZ)
  ...   | yes _  | yes _  | no  _  | no  _  = cong (H·∂ú +_) (D‚Å±-cong W‚âàX Y‚âàZ)
  ...   | yes _  | yes _  | yes _  | yes _  = D·∂ú-cong W‚âàX Y‚âàZ

  X‚âàY‚áíD‚â°0 : ‚àÄ {X Y} ‚Üí X ‚âà‚Çò Y ‚Üí D X Y ‚â° 0
  X‚âàY‚áíD‚â°0 {X} {Y} X‚âàY with X ‚âü‚Çò Y
  ... | yes _   = refl
  ... | no  X‚ââY = contradiction X‚âàY X‚ââY

  D‚â°0‚áíX‚âàY : ‚àÄ {X Y} ‚Üí D X Y ‚â° 0 ‚Üí X ‚âà‚Çò Y
  D‚â°0‚áíX‚âàY {X} {Y} D‚â°0 with X ‚âü‚Çò Y
  ... | yes X‚âàY = X‚âàY
  ... | no  _   with ùë™‚Çò? X | ùë™‚Çò? Y
  ...   | yes X·∂ú | yes Y·∂ú = D·∂ú‚â°0‚áíX‚âàY D‚â°0
  ...   | no  X‚Å± | _     = contradiction D‚â°0 (m<n‚áín‚â¢0 (‚â§-steps ≥ _ 1‚â§H·∂ú))
  ...   | yes X·∂ú | no  Y‚Å± = contradiction D‚â°0 (m<n‚áín‚â¢0 (‚â§-steps ≥ _ 1‚â§H·∂ú))
  
  D-sym : ‚àÄ X Y ‚Üí D X Y ‚â° D Y X
  D-sym X Y with X ‚âü‚Çò Y | Y ‚âü‚Çò X
  ... | yes _   | yes _   = refl
  ... | yes X‚âàY | no  Y‚ââX = contradiction (‚âà‚Çò-sym X‚âàY) Y‚ââX
  ... | no  X‚ââY | yes Y‚âàX = contradiction (‚âà‚Çò-sym Y‚âàX) X‚ââY
  ... | no _    | no _    with ùë™‚Çò? X | ùë™‚Çò? Y
  ...   | yes _ | yes _ = D·∂ú-sym _ _
  ...   | no  _ | no  _ = cong (H·∂ú +_) (D‚Å±-sym X Y)
  ...   | no  _ | yes _ = cong (H·∂ú +_) (D‚Å±-sym X Y)
  ...   | yes _ | no  _ = cong (H·∂ú +_) (D‚Å±-sym X Y)
-}
  
  D-maxTriIneq-lemma : ‚àÄ X Y Z ‚Üí H·∂ú + D‚Å± X Z ‚â§ (H·∂ú + D‚Å± X Y) ‚äî (H·∂ú + D‚Å± Y Z)
  D-maxTriIneq-lemma X Y Z = begin
    H·∂ú + D‚Å± X Z                   ‚â§‚ü® +-mono ≥-‚â§ H·∂ú (D‚Å±-maxTriIneq X Y Z) ‚ü©
    H·∂ú + (D‚Å± X Y ‚äî D‚Å± Y Z)        ‚â°‚ü® +-distribÀ°-‚äî H·∂ú _ _ ‚ü©
    (H·∂ú + D‚Å± X Y) ‚äî (H·∂ú + D‚Å± Y Z) ‚àé
    where open ‚â§-Reasoning

  --D-maxTriIneq-lemma‚ÇÇ : ‚àÄ X Y Z ‚Üí X ‚âà·∂ú‚Çò Y ‚Üí D·∂ú X Z ‚â§ D·∂ú Y Z
  
  D-maxTriIneq : MaxTriangleIneq ‚ÑùùïÑ‚Çõ D
  D-maxTriIneq X Y Z with X ‚âü‚Çò Z | X ‚âü‚Çò Y | Y ‚âü‚Çò Z
  D-maxTriIneq X Y Z | yes _   | _       | _       = z‚â§n
  D-maxTriIneq X Y Z | no  X‚ââZ | yes X‚âàY | yes Y‚âàZ = contradiction (‚âà‚Çò-trans X‚âàY Y‚âàZ) X‚ââZ
  D-maxTriIneq X Y Z | no  _   | yes X‚âàY | no  _   with ùë™‚Çò? X | ùë™‚Çò? Y | ùë™‚Çò? Z
  ... | yes X·∂ú | yes Y·∂ú | yes _ = ‚â§-reflexive (D·∂ú-cong (toCMatrix-cong X·∂ú Y·∂ú X‚âàY) ‚âà‚Çò-refl)
  ... | yes X·∂ú | no  Y‚Å± | _     = contradiction (ùë™‚Çò-cong X‚âàY X·∂ú) Y‚Å±
  ... | no  X‚Å± | yes Y·∂ú | _     = contradiction (ùë™‚Çò-cong (‚âà‚Çò-sym X‚âàY) Y·∂ú) X‚Å±
  ... | yes _  | yes _  | no  _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (D‚Å±-cong X‚âàY ‚âà‚Çò-refl))
  ... | no  _  | no  _  | yes _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (D‚Å±-cong X‚âàY ‚âà‚Çò-refl))
  ... | no  _  | no  _  | no  _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (D‚Å±-cong X‚âàY ‚âà‚Çò-refl))
  D-maxTriIneq X Y Z | no  _   | no  _   | yes Y‚âàZ with ùë™‚Çò? X | ùë™‚Çò? Y | ùë™‚Çò? Z
  ... | yes _  | yes Y·∂ú | yes Z·∂ú = m‚â§n‚áím‚â§n‚äîo 0 (‚â§-reflexive (D·∂ú-cong ‚âà‚Çò-refl ((toCMatrix-cong Z·∂ú Y·∂ú (‚âà‚Çò-sym Y‚âàZ)))))
  ... | _      | yes Y·∂ú | no  Z‚Å± = contradiction (ùë™‚Çò-cong Y‚âàZ Y·∂ú) Z‚Å±
  ... | _      | no  Y‚Å± | yes Z·∂ú = contradiction (ùë™‚Çò-cong (‚âà‚Çò-sym Y‚âàZ) Z·∂ú) Y‚Å±
  ... | no  _  | yes _  | yes _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (D‚Å±-cong ‚âà‚Çò-refl (‚âà‚Çò-sym Y‚âàZ))))
  ... | yes _  | no  _  | no  _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (D‚Å±-cong ‚âà‚Çò-refl (‚âà‚Çò-sym Y‚âàZ))))
  ... | no  _  | no  _  | no  _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (D‚Å±-cong ‚âà‚Çò-refl (‚âà‚Çò-sym Y‚âàZ))))
  D-maxTriIneq X Y Z | no  _   | no  _   | no  _   with ùë™‚Çò? X | ùë™‚Çò? Y | ùë™‚Çò? Z
  ... | yes _  | yes _  | yes _  = D·∂ú-maxTriIneq _ _ _
  ... | yes X·∂ú | yes Y·∂ú | no  Z‚Å± = m‚â§o‚áím‚â§n‚äîo (D·∂ú _ _) (+-mono ≥-‚â§ H·∂ú (X·∂úY·∂úZ‚Å±‚áíD‚Å±XZ‚â§D‚Å±YZ X·∂ú Y·∂ú Z‚Å±)) --()
  ... | no  X‚Å± | yes Y·∂ú | yes Z·∂ú = m‚â§n‚áím‚â§n‚äîo {a = H·∂ú + D‚Å± X Y} (D·∂ú _ _) (+-mono ≥-‚â§ H·∂ú (X‚Å±Y·∂úZ·∂ú‚áíD‚Å±XZ‚â§D‚Å±XY X‚Å± Y·∂ú Z·∂ú)) --()
  ... | yes X·∂ú | no  Y‚Å± | yes Z·∂ú = m‚â§n‚áím‚â§n‚äîo (H·∂ú + D‚Å± Y Z) (‚â§-steps ≥ _ (D·∂ú‚â§H·∂ú _ _) )
  ... | yes _  | no  _  | no  _  = D-maxTriIneq-lemma X Y Z
  ... | no  _  | yes _  | no  _  = D-maxTriIneq-lemma X Y Z
  ... | no  _  | no  _  | yes _  = D-maxTriIneq-lemma X Y Z
  ... | no  _  | no  _  | no  _  = D-maxTriIneq-lemma X Y Z

{-

  
  
    }
    
{-
  d‚â°d·∂ú : ‚àÄ X Y ‚Üí d (toI‚Çò X) (toI‚Çò Y) ‚â° d·∂ú X Y
  d‚â°d·∂ú X Y with toI‚Çò X ‚âü‚Å±‚Çò toI‚Çò Y
  ... | yes toX‚âàtoY = ‚â°-sym (X‚âàY‚áíd·∂ú‚â°0 (toI‚Çò-injective toX‚âàtoY))
  ... | no  toX‚ââtoY with ùë™‚Çò? (toI‚Çò X) | ùë™‚Çò? (toI‚Çò Y)
  ...   | no  toX‚Å± | _        = contradiction (toI‚Çò·∂ú X) toX‚Å±
  ...   | yes _   | no  toY‚Å± = contradiction (toI‚Çò·∂ú Y) toY‚Å±
  ...   | yes toX·∂ú | yes toY·∂ú  = d·∂ú-cong (fromI‚Çò-toI‚Çò toX·∂ú) (fromI‚Çò-toI‚Çò toY·∂ú)
-}

-}
-}
