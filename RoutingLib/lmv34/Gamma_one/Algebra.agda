open import Algebra.Core
open import Data.Bool.Base using (true; false; not)
open import Data.Nat using (‚Ñï)
open import Data.Fin using (Fin; _<_)
open import Data.Fin.Properties as Fin‚Çö
  using (_‚â§?_; <-cmp)
open import Data.List using ([]; _‚à∑_; List; foldr; filter; map; tabulate)
import Data.List.Relation.Binary.Permutation.Setoid as PermutationEq
open import Data.Product.Relation.Binary.Lex.NonStrict using (√ó-decTotalOrder)
open import Data.Product.Relation.Binary.Pointwise.NonDependent using (√ó-decSetoid)
open import Data.Vec.Functional using (Vector)
open import Data.Vec.Functional.Relation.Binary.Pointwise.Properties using () renaming (setoid to Vec-setoid)
open import Function using (_‚àò_)
open import Level using (_‚äî_; 0‚Ñì; lift) renaming (suc to lsuc)
open import Relation.Binary using (Rel; DecTotalOrder; Setoid; DecSetoid)
import Relation.Binary.Reasoning.Setoid as EqReasoning
open import Relation.Binary using (Trichotomous; tri<; tri‚âà; tri>)
open import Relation.Binary.PropositionalEquality using (_‚â°_)
open import Relation.Nullary using (Dec; yes; no; ¬¨_; does; proof)
open import Relation.Nullary.Negation using (¬¨?; ¬¨-reflects)
open import Relation.Unary using (Pred; Decidable; ‚àÅ)
open import Data.Product as Prod using (_√ó_; _,_)

open import RoutingLib.Routing.Algebra using (RawRoutingAlgebra; IsRoutingAlgebra)
import RoutingLib.Routing as Routing
import RoutingLib.Routing.Algebra.Properties.RoutingAlgebra as RoutingAlgebra
import RoutingLib.Data.Vec.Functional.Relation.Binary.Equality as TableEquality
open import RoutingLib.Data.List using (strictMerge)
import RoutingLib.Data.List.Sorting.InsertionSort as InsertionSort

module RoutingLib.lmv34.Gamma_one.Algebra
  {a b ‚Ñì} {algebra : RawRoutingAlgebra a b ‚Ñì}
  (isRoutingAlgebra : IsRoutingAlgebra algebra)
  (n : ‚Ñï) where

open Routing algebra n using (ùïã‚Çõ; RoutingMatrix; AdjacencyMatrix)
open RawRoutingAlgebra algebra
open RoutingAlgebra isRoutingAlgebra using (‚â§‚Çä-decTotalOrder)

--------------------------------------------------------------------------------
-- Routing sets

RoutingSet : Set a
RoutingSet = List (Fin n √ó Route)

√ò : RoutingSet
√ò = []

-- RoutingVector setoid
FinRoute-decSetoid = √ó-decSetoid (Fin‚Çö.‚â°-decSetoid n) DS
open DecSetoid FinRoute-decSetoid public using () renaming (setoid to FinRoute-setoid)
open PermutationEq FinRoute-setoid public

--------------------------------------------------------------------------------
-- Routing vector

RoutingVector : Set a
RoutingVector = Vector RoutingSet n

√ò·µ• : RoutingVector
√ò·µ• i = √ò

ùïç‚Çõ : Setoid a (a ‚äî ‚Ñì)
ùïç‚Çõ = Vec-setoid ‚Ü≠-setoid n

open Setoid ùïç‚Çõ public using ()
  renaming
  ( _‚âà_           to _‚âà·µ•_
  ; reflexive     to ‚âà·µ•-reflexive
  ; refl          to ‚âà·µ•-refl
  ; sym           to ‚âà·µ•-sym
  ; trans         to ‚âà·µ•-trans
  ; isEquivalence to ‚âà·µ•-isEquivalence
  )

--------------------------------------------------------------------------------
-- Auxilaries

IsInvalid : Pred (Fin n √ó Route) _
IsInvalid (d , v) = v ‚âà ‚àû#

IsInvalid? : Decidable IsInvalid
IsInvalid? (d , v) = v ‚âü ‚àû#

IsValid : Pred (Fin n √ó Route) _
IsValid = ‚àÅ IsInvalid

IsValid? : Decidable IsValid
IsValid? p = ¬¨? (IsInvalid? p)

decTotalOrder : DecTotalOrder a ‚Ñì ‚Ñì
decTotalOrder = √ó-decTotalOrder (Fin‚Çö.‚â§-decTotalOrder n) ‚â§‚Çä-decTotalOrder

open DecTotalOrder decTotalOrder public
  using () renaming (isPreorder to ‚â§‚ÇÇ-isPreorder)

-- MATTHEW: If I were you I'd create a general version of this function
-- called `strictMerge` in `RoutingList.Data.List` and prove the properties
-- about it in general. You'll find it much easier going.

_<‚ÇÅ_ : Rel (Fin n √ó Route) _
_<‚ÇÅ_ (d‚ÇÅ , v‚ÇÅ) (d‚ÇÇ , v‚ÇÇ) = d‚ÇÅ < d‚ÇÇ

_‚âà‚ÇÅ_ : Rel (Fin n √ó Route) _
(d‚ÇÅ , v‚ÇÅ) ‚âà‚ÇÅ (d‚ÇÇ , v‚ÇÇ) = d‚ÇÅ ‚â° d‚ÇÇ

<‚ÇÅ-cmp : Trichotomous _‚âà‚ÇÅ_ _<‚ÇÅ_
<‚ÇÅ-cmp (d‚ÇÅ , v‚ÇÅ) (d‚ÇÇ , v‚ÇÇ) = <-cmp d‚ÇÅ d‚ÇÇ

_‚äï‚ÇÇ_ : Op‚ÇÇ (Fin n √ó Route)
(d‚ÇÅ , v‚ÇÅ) ‚äï‚ÇÇ (d‚ÇÇ , v‚ÇÇ) = (d‚ÇÅ , v‚ÇÅ ‚äï v‚ÇÇ)

mergeSorted : Op‚ÇÇ RoutingSet
mergeSorted = strictMerge <‚ÇÅ-cmp _‚äï‚ÇÇ_

--------------------------------------------------------------------------------
-- Definitions

-- Remove invalid routes
infix 11 _‚Ä†
_‚Ä† : RoutingSet ‚Üí RoutingSet
xs ‚Ä† = filter IsValid? xs

-- Set addition
infixl 10 _‚äï‚Çõ_
_‚äï‚Çõ_ : Op‚ÇÇ RoutingSet
S‚ÇÅ ‚äï‚Çõ S‚ÇÇ = mergeSorted (sort S‚ÇÅ) (sort S‚ÇÇ)
  where open InsertionSort decTotalOrder using (sort)

-- Vector addition
infixl 9 _‚äï·µ•_
_‚äï·µ•_ : Op‚ÇÇ RoutingVector
(V‚ÇÅ ‚äï·µ• V‚ÇÇ) i = (V‚ÇÅ i) ‚äï‚Çõ (V‚ÇÇ i)

-- Big addition
infix 5 ‚®Å‚Çõ
‚®Å‚Çõ : ‚àÄ {k} ‚Üí (Fin k ‚Üí RoutingSet) ‚Üí RoutingSet
‚®Å‚Çõ iter = foldr _‚äï‚Çõ_ √ò (tabulate iter)

-- Matrix to vector-of-sets transformation (Gamma_0 to Gamma_1)
infix 12 ~_
~_ : RoutingMatrix ‚Üí RoutingVector
(~ M) i = (tabulate Œª j ‚Üí (j , M i j)) ‚Ä†

map‚ÇÇ : ‚àÄ {a b c} {A : Set a} {B : Set b} {C : Set c} ‚Üí (A ‚Üí B) ‚Üí List (C √ó A) ‚Üí List (C √ó B)
map‚ÇÇ f = map (Prod.map‚ÇÇ f)

-- Function application to sets
infix 13 _[_]
_[_] : (Route ‚Üí Route) ‚Üí RoutingSet ‚Üí RoutingSet
f [ X ] = (map‚ÇÇ f X) ‚Ä†

-- Matrix application to vector-of-sets
infix 10 _„Äö_„Äõ
_„Äö_„Äõ : AdjacencyMatrix ‚Üí RoutingVector ‚Üí RoutingVector
(A „Äö V „Äõ) i = ‚®Å‚Çõ (Œª q ‚Üí (A i q ‚ñ∑_) [ V q ])
