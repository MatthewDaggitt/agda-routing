open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; z‚â§n; s‚â§s; _‚à∏_) renaming (_<_ to _<‚Ñï_; _‚â§_ to _‚â§‚Ñï_; _‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (n‚â§1+n)
open import Data.Fin.Properties using () renaming (_‚âü_ to _‚âüùîΩ_)
open import Data.Product using (‚àÉ‚ÇÇ; _,_; _√ó_; proj‚ÇÅ)
open import Function using (_‚àò_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (module DecTotalOrder)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; subst; subst‚ÇÇ; cong; cong‚ÇÇ; inspect; [_]) renaming (refl to ‚â°-refl; sym to ‚â°-sym; trans to ‚â°-trans)

open import RoutingLib.Routing.Definitions using (RoutingProblem; RoutingAlgebra)
open import RoutingLib.Data.Nat.Properties using (m<n‚â§o‚áío‚à∏n<o‚à∏m; n‚â¢0‚áí0<n; <‚áí‚â§) renaming (‚â§-antisym to ‚â§‚Ñï-antisym; ‚â§-trans to ‚â§‚Ñï-trans)

open import RoutingLib.Routing.BellmanFord.GeneralConvergence.SufficientConditions

module RoutingLib.Routing.BellmanFord.GeneralConvergence.Step3_StrictlyContracting
  {a b ‚Ñì n-1}
  {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  (ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)) 
  (sc : SufficientConditions ùì°ùìê)
  where
  
  open import RoutingLib.Routing.BellmanFord.GeneralConvergence.Step1_HeightFunction ùì°ùìü sc
  open import RoutingLib.Routing.BellmanFord.GeneralConvergence.Step2_UltrametricAlt ùì°ùìü sc
  open import RoutingLib.Routing.BellmanFord.GeneralConvergence.SufficientConditions.Properties ùì°ùìü sc using (œÉX·µ¢·µ¢‚âàœÉY·µ¢·µ¢; œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º; œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º)

  open import RoutingLib.Routing.BellmanFord ùì°ùìü
  open import RoutingLib.Routing.BellmanFord.Properties ùì°ùìü using (I·µ¢‚±º‚â°0#)

  open RoutingProblem ùì°ùìü
  open SufficientConditions sc
  

  ---------------------------
  -- Similarity increasing --
  ---------------------------
  -- In this module we show that an application of œÉ always strictly
  -- decreases the difference between two different routing matrices.
  -- The inner module below allows us to abstract over whether the
  -- minimal disagreement between two RMatrices X and Y has the smaller
  -- component in X or in Y. (i.e. d‚Çë(œÉX·µ¢‚±º,œÉY·µ¢‚±º) = h(X·µ¢‚±º) 
  -- or h(Y·µ¢‚±º))

  module PostDisagreementResult 
    {X Y i j}
    (œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º : œÉ X i j ‚ââ œÉ Y i j)
    (d‚â°d‚Çë·µ¢‚±º : d (œÉ X) (œÉ Y) ‚â° d‚Çë (œÉ X i j) (œÉ Y i j))
    (d‚Çë·µ¢‚±º‚â°d‚Çõ·µ§‚Çö‚à∏hœÉX·µ¢‚±º : d‚Çë (œÉ X i j) (œÉ Y i j) ‚â° d‚Çõ·µ§‚Çö ‚à∏ h (œÉ X i j)) 
    where 

    h[œÉX·µ¢‚±º]‚â§h[œÉY·µ¢‚±º] : h (œÉ X i j) ‚â§‚Ñï h (œÉ Y i j)
    h[œÉX·µ¢‚±º]‚â§h[œÉY·µ¢‚±º] = d‚Çë‚â°d‚Çõ·µ§‚Çö‚à∏hx‚áíhx‚â§hy d‚Çë·µ¢‚±º‚â°d‚Çõ·µ§‚Çö‚à∏hœÉX·µ¢‚±º
    
    abstract

      -- Result for when the minimal disagreement lies on the diagonal of the matrices
      diagonal-result : j ‚â° i ‚Üí d (œÉ X) (œÉ Y) <‚Ñï d X Y
      diagonal-result ‚â°-refl = contradiction (œÉX·µ¢·µ¢‚âàœÉY·µ¢·µ¢ X Y i) œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º


      -- Result for when the minimal disagreement is taken from the identity matrix
      drop-result : j ‚â¢ i ‚Üí œÉ X i j ‚âà 0# ‚Üí d (œÉ X) (œÉ Y) <‚Ñï d X Y
      drop-result j‚â¢i œÉX·µ¢‚±º‚âà0# = 
        contradiction 
          (‚âà-resp-h 
            (‚â§‚Ñï-antisym 
              h[œÉX·µ¢‚±º]‚â§h[œÉY·µ¢‚±º] 
              (subst (h (œÉ Y i j) ‚â§‚Ñï_) (h-resp-‚âà (sym œÉX·µ¢‚±º‚âà0#)) (h-resp-‚â§ (0#-id‚Çó-‚äï (œÉ Y i j))))))
          œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º


      -- Result for when the minimal disagreement is an extension of some path in the previous state
      extend-lemma : ‚àÄ {k} ‚Üí œÉ X i j ‚âà A i k ‚ñ∑ X k j ‚Üí X k j ‚ââ Y k j
      extend-lemma {k} œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º X‚Çñ‚±º‚âàY‚Çñ‚±º = 
        œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º (
          ‚â§-antisym 
            (‚â§-resp-h h[œÉX·µ¢‚±º]‚â§h[œÉY·µ¢‚±º]) 
            (‚â§-resp·µ£-‚âà (sym (trans œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º (‚ñ∑-cong (A i k) X‚Çñ‚±º‚âàY‚Çñ‚±º))) (œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y i j k)))

      extend-result : ‚àÄ {k} ‚Üí j ‚â¢ i ‚Üí œÉ X i j ‚âà A i k ‚ñ∑ X k j ‚Üí X k j ‚ââ 0# ‚Üí d (œÉ X) (œÉ Y) <‚Ñï d X Y
      extend-result {k} j‚â¢i œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º X‚Çñ‚±º‚ââ0# =
        begin
          suc (d (œÉ X) (œÉ Y))             ‚â°‚ü® cong suc (‚â°-trans d‚â°d‚Çë·µ¢‚±º d‚Çë·µ¢‚±º‚â°d‚Çõ·µ§‚Çö‚à∏hœÉX·µ¢‚±º) ‚ü© 
          suc (d‚Çõ·µ§‚Çö ‚à∏ h (œÉ X i j))        ‚â°‚ü® cong suc (cong (d‚Çõ·µ§‚Çö ‚à∏_) (h-resp-‚âà œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º)) ‚ü© 
          suc (d‚Çõ·µ§‚Çö ‚à∏ h (A i k ‚ñ∑ X k j))  ‚â§‚ü® m<n‚â§o‚áío‚à∏n<o‚à∏m (h-resp-< (‚äï-almost-strictly-absorbs-‚ñ∑ (A i k) X‚Çñ‚±º‚ââ0#)) (<‚áí‚â§ (s‚â§s h‚â§h‚Çò‚Çê‚Çì)) ‚ü©
          d‚Çõ·µ§‚Çö ‚à∏ h (X k j)                ‚â§‚ü® d‚Çõ·µ§‚Çö‚à∏hX·µ¢‚±º‚â§d (extend-lemma œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º) ‚ü©
          d X Y
        ‚àé
        where open Data.Nat.‚â§-Reasoning


      -- Putting the three cases together to get the required result
      result : d (œÉ X) (œÉ Y) <‚Ñï d X Y
      result with j ‚âüùîΩ i 
      ...  | yes j‚â°i = diagonal-result j‚â°i
      ...  | no  j‚â¢i with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º X i j
      ...    | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º = drop-result j‚â¢i (trans œÉX·µ¢‚±º‚âàI·µ¢‚±º (reflexive (I·µ¢‚±º‚â°0# j‚â¢i)))
      ...    | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º) with X k j ‚âü 0#
      ...      | yes X‚Çñ‚±º‚âà0# = drop-result j‚â¢i (trans œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º (trans (‚ñ∑-cong (A i k) X‚Çñ‚±º‚âà0#) (0#-an·µ£-‚ñ∑ (A i k))))
      ...      | no  X‚Çñ‚±º‚ââ0# = extend-result j‚â¢i œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º X‚Çñ‚±º‚ââ0#


  abstract

    open PostDisagreementResult using (result)
    open import RoutingLib.Function.Distance ‚ÑùùïÑ‚Çõ using (_StrContrOver_; _StrContrOnOrbitsOver_)
    open import RoutingLib.Function.Distance.Properties using (strContr‚áístrContrOnOrbits)

    œÉ-strictlyContracting : œÉ StrContrOver d
    œÉ-strictlyContracting {X} {Y} Y‚ââX with œÉ X ‚âü‚Çò œÉ Y | d X Y ‚âü‚Ñï 0
    ... | yes œÉX‚âàœÉY | yes d‚â°0 = contradiction (d‚â°0‚áíX‚âàY d‚â°0) (Y‚ââX ‚àò ‚âà‚Çò-sym)
    ... | yes œÉX‚âàœÉY | no  d‚â¢0 rewrite X‚âàY‚áíd‚â°0 œÉX‚âàœÉY = n‚â¢0‚áí0<n d‚â¢0
    ... | no  œÉX‚ââœÉY | _       with d-findWorstDisagreement œÉX‚ââœÉY
    ...   | i , j , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º , d‚â°d‚Çë·µ¢‚±º , inj‚ÇÅ d‚Çë·µ¢‚±º‚â°d‚Çõ·µ§‚Çö‚à∏hœÉX·µ¢‚±º = result œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º d‚â°d‚Çë·µ¢‚±º d‚Çë·µ¢‚±º‚â°d‚Çõ·µ§‚Çö‚à∏hœÉX·µ¢‚±º 
    ...   | i , j , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º , d‚â°d‚Çë·µ¢‚±º , inj‚ÇÇ d‚Çë·µ¢‚±º‚â°d‚Çõ·µ§‚Çö‚à∏hœÉY·µ¢‚±º = 
      subst‚ÇÇ _<‚Ñï_ (d-sym (œÉ Y) (œÉ X)) (d-sym Y X) (
        result 
          (œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º ‚àò sym) 
          (‚â°-trans (‚â°-trans (d-sym (œÉ Y) (œÉ X)) d‚â°d‚Çë·µ¢‚±º) (d‚Çë-sym (œÉ X i j) (œÉ Y i j))) 
          (‚â°-trans (d‚Çë-sym (œÉ Y i j) (œÉ X i j)) d‚Çë·µ¢‚±º‚â°d‚Çõ·µ§‚Çö‚à∏hœÉY·µ¢‚±º))

    œÉ-strictlyContractingOnOrbits : œÉ StrContrOnOrbitsOver d
    œÉ-strictlyContractingOnOrbits = strContr‚áístrContrOnOrbits ‚ÑùùïÑ‚Çõ œÉ-strictlyContracting
