open import Data.Fin using (Fin; zero)
open import Data.List using (List)
open import Data.List.Any.Membership.Propositional using (_‚àà_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Nat using (‚Ñï; suc; zero; z‚â§n; s‚â§s; _‚äî_; _*_; _‚à∏_) renaming (_‚â§_ to _‚â§‚Ñï_; _<_ to _<‚Ñï_)
open import Data.Nat.Properties as ‚Ñï‚Çö using (‚äî-mono-‚â§) renaming (‚â§-trans to ‚â§‚Ñï-trans; ‚â§-antisym to ‚â§‚Ñï-antisym; ‚â§-decTotalOrder to ‚â§‚Ñï-decTotalOrder)
open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.List using (upTo)
open import Function using (_‚àò_)
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; sym; trans; cong; subst; module ‚â°-Reasoning)
import Relation.Binary.PartialOrderReasoning as PO-Reasoning

open import RoutingLib.Data.List using (between)
open import RoutingLib.Data.List.Uniqueness.Propositional using (Unique)
open import RoutingLib.Data.List.Membership.Propositional.Properties using (‚àà-upTo‚Å∫)
open import RoutingLib.Data.List.Sorting using (Sorted)
open import RoutingLib.Data.Table using (Table; max‚Å∫; zipWith)
open import RoutingLib.Data.Nat.Properties as R‚Ñï‚Çö using (‚Ñï‚Çõ; n‚â¢0‚áí0<n)
open import RoutingLib.Function.Distance using (IsUltrametric; MaxTriangleIneq)
open import RoutingLib.Data.Matrix using (Matrix)
open import RoutingLib.Data.Matrix.Properties using (max‚Å∫-cong; M‚â§max‚Å∫[M]; max‚Å∫[M]‚â°x; max‚Å∫[M]‚â§x; max‚Å∫-constant; zipWith-sym)
open import RoutingLib.Data.Matrix.Membership.Propositional.Properties using (max‚Å∫[M]‚ààM)
open import RoutingLib.Data.Matrix.Relation.Pointwise using (zipWith-cong)

open import RoutingLib.Routing.Definitions using (RoutingProblem; RoutingAlgebra)
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions
open import RoutingLib.Function.Distance using (Ultrametric)
import RoutingLib.Routing.BellmanFord.DistanceVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.DistanceVector.Step2_RouteMetric as Step2
import RoutingLib.Function.Distance.MaxLift as MaxLift
open import RoutingLib.Function.Image using (FiniteImage)

module RoutingLib.Routing.BellmanFord.DistanceVector.Step3_StateMetric
  {a b ‚Ñì n-1}
  {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  (ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)) 
  (ùì¢ùìí : SufficientConditions ùì°ùìê)
  where
  
  open Prelude ùì°ùìü ùì¢ùìí
  open Step2 ùì°ùìü ùì¢ùìí using
    ( d
    ; d-cong
    ; x‚âày‚áíd‚â°0
    ; d‚â°0‚áíx‚âày
    ; d-sym
    ; d-maxTriIneq
    ; d-strContr
    ; d-mono
    ; d‚â§H
    ; d-ultrametric
    )


  -------------------------------------
  -- Ultrametric over routing tables --
  -------------------------------------

  d·µ¢-ultrametric : Ultrametric _
  d·µ¢-ultrametric = MaxLift.ultrametric {n = n} (Œª _ ‚Üí S) (Œª _ ‚Üí d-ultrametric)

  open Ultrametric d·µ¢-ultrametric public using ()
    renaming
    ( d to d·µ¢
    ; isUltrametric to d·µ¢-isUltrametric
    )

  d·µ¢‚â§H : ‚àÄ X Y ‚Üí d·µ¢ X Y ‚â§‚Ñï H
  d·µ¢‚â§H = MaxLift.bounded (Œª _ ‚Üí S) _ H d‚â§H

  -------------------------------------
  -- Ultrametric over routing states --
  -------------------------------------
  
  D-ultrametric : Ultrametric _
  D-ultrametric = MaxLift.ultrametric {n = n} (Œª _ ‚Üí _) (Œª _ ‚Üí d·µ¢-ultrametric)

  open Ultrametric D-ultrametric public using ()
    renaming
    ( d to D
    ; 0‚áíeq to D‚â°0‚áíX‚âàY
    ; eq‚áí0 to X‚âàY‚áíD‚â°0
    ; sym to D-sym
    )

  D‚â§H : ‚àÄ X Y ‚Üí D X Y ‚â§‚Ñï H
  D‚â§H = MaxLift.bounded (Œª _ ‚Üí ‚Ñùùïã‚Çõ) _ H d·µ¢‚â§H

  d‚â§D : ‚àÄ X Y i j ‚Üí d (X i j) (Y i j) ‚â§‚Ñï D X Y
  d‚â§D X Y i j = ‚â§‚Ñï-trans (MaxLift.d·µ¢‚â§d (Œª _ ‚Üí S) (Œª {i} ‚Üí d) (X i) (Y i) j) (MaxLift.d·µ¢‚â§d (Œª _ ‚Üí ‚Ñùùïã‚Çõ) (Œª {i} ‚Üí d·µ¢) X Y i)

  postulate D-witness : ‚àÄ {X Y} ‚Üí X ‚ââ‚Çò Y ‚Üí ‚àÉ‚ÇÇ Œª i j ‚Üí D X Y ‚â° d (X i j) (Y i j) √ó X i j ‚ââ Y i j
  --D-witness X‚ââY = {!!}
  
  D-image : ‚àÄ X ‚Üí FiniteImage ‚Ñï‚Çõ (D X)
  D-image X = record
    { image    = upTo (suc H)
    ; complete = Œª Y ‚Üí ‚àà-upTo‚Å∫ (s‚â§s (D‚â§H X Y))
    }




  -- Strictly contracting --

  module PostDisagreementResult 
    {X Y i j} (D‚â°d·µ¢‚±º : D (œÉ X) (œÉ Y) ‚â° d (œÉ X i j) (œÉ Y i j))
    (œÉX·µ¢‚±º<œÉY·µ¢‚±º : œÉ X i j < œÉ Y i j) 
    where 

    œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º : œÉ X i j ‚â§ œÉ Y i j
    œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º = proj‚ÇÅ œÉX·µ¢‚±º<œÉY·µ¢‚±º

    œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º : œÉ X i j ‚ââ œÉ Y i j
    œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º = proj‚ÇÇ œÉX·µ¢‚±º<œÉY·µ¢‚±º
    
    i‚â¢j : i ‚â¢ j
    i‚â¢j refl = œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º (œÉX·µ¢·µ¢‚âàœÉY·µ¢·µ¢ X Y i)

    œÉX·µ¢‚±º‚ââI·µ¢‚±º : œÉ X i j ‚ââ I i j
    œÉX·µ¢‚±º‚ââI·µ¢‚±º œÉX·µ¢‚±º‚âàI·µ¢‚±º = œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º (‚â§-antisym œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (begin
      œÉ Y i j   ‚â§‚ü® 0#-id‚Çó-‚äï _ ‚ü©
      0#        ‚âà‚ü® ‚âà-sym (‚âà-reflexive (I·µ¢‚±º‚â°0# (i‚â¢j ‚àò sym))) ‚ü©
      I i j     ‚âà‚ü® ‚âà-sym œÉX·µ¢‚±º‚âàI·µ¢‚±º ‚ü©
      œÉ X i j   ‚àé))
      where open PO-Reasoning ‚â§-poset

    X‚Çñ‚±º‚ââY‚Çñ‚±º : ‚àÄ {k} ‚Üí œÉ X i j ‚âà A i k ‚ñ∑ X k j ‚Üí X k j ‚ââ Y k j
    X‚Çñ‚±º‚ââY‚Çñ‚±º {k} œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º X‚Çñ‚±º‚âàY‚Çñ‚±º = œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º ( ‚â§-antisym œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (begin
      œÉ Y i j       ‚â§‚ü® œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y i j k ‚ü©
      A i k ‚ñ∑ Y k j ‚âà‚ü® ‚ñ∑-cong (A i k) (‚âà-sym X‚Çñ‚±º‚âàY‚Çñ‚±º) ‚ü©
      A i k ‚ñ∑ X k j ‚âà‚ü® ‚âà-sym œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º ‚ü©
      œÉ X i j       ‚àé))
      where open PO-Reasoning ‚â§-poset

    œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º : ‚àÄ k ‚Üí œÉ X i j ‚â§ A i k ‚ñ∑ Y k j
    œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º k = ‚â§-trans œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y i j k)
    
    œÉX·µ¢‚±º‚ââA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º : ‚àÄ k ‚Üí œÉ X i j ‚ââ A i k ‚ñ∑ Y k j
    œÉX·µ¢‚±º‚ââA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º k œÉX·µ¢‚±º‚âàA·µ¢‚ÇñY‚Çñ‚±º = œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º (‚â§-antisym œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (‚â§-trans (œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y i j k) (‚â§-reflexive (‚âà-sym œÉX·µ¢‚±º‚âàA·µ¢‚ÇñY‚Çñ‚±º))))


    DœÉXœÉY<DXY : D (œÉ X) (œÉ Y) <‚Ñï D X Y
    DœÉXœÉY<DXY with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º X i j
    ... | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º           = contradiction œÉX·µ¢‚±º‚âàI·µ¢‚±º œÉX·µ¢‚±º‚ââI·µ¢‚±º
    ... | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º) = begin
      D (œÉ X) (œÉ Y)                      ‚â°‚ü® D‚â°d·µ¢‚±º ‚ü© 
      d (œÉ X i j) (œÉ Y i j)              ‚â§‚ü® d-mono œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º k , œÉX·µ¢‚±º‚ââA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º k) ‚ü©
      d (œÉ X i j) (A i k ‚ñ∑ Y k j)        ‚â°‚ü® d-cong œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º ‚âà-refl ‚ü©
      d (A i k ‚ñ∑ X k j) (A i k ‚ñ∑ Y k j)  <‚ü® d-strContr (A i k) (X‚Çñ‚±º‚ââY‚Çñ‚±º œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º) ‚ü©
      d (X k j) (Y k j)                  ‚â§‚ü® d‚â§D X Y k j ‚ü©
      D X Y                              ‚àé
      where open R‚Ñï‚Çö.‚â§-Reasoning


  abstract

    open PostDisagreementResult using (DœÉXœÉY<DXY)
    
    open import RoutingLib.Function.Distance ‚ÑùùïÑ‚Çõ using (_StrContrOver_; _StrContrOnOrbitsOver_)
    open import RoutingLib.Function.Distance.Properties using (strContr‚áístrContrOnOrbits)

    œÉ-strictlyContracting : œÉ StrContrOver D
    œÉ-strictlyContracting {X} {Y} Y‚ââX with œÉ X ‚âü‚Çò œÉ Y
    ... | yes œÉX‚âàœÉY = begin
      D (œÉ X) (œÉ Y) ‚â°‚ü® X‚âàY‚áíD‚â°0 œÉX‚âàœÉY ‚ü©
      0             <‚ü® n‚â¢0‚áí0<n (Y‚ââX ‚àò ‚âà‚Çò-sym ‚àò D‚â°0‚áíX‚âàY) ‚ü©
      D X Y         ‚àé
      where open R‚Ñï‚Çö.‚â§-Reasoning
    ... | no  œÉX‚ââœÉY with D-witness œÉX‚ââœÉY
    ...   | i , j , D‚â°d·µ¢‚±º , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º with ‚â§-total (œÉ X i j) (œÉ Y i j)
    ...     | inj‚ÇÅ œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º = DœÉXœÉY<DXY {X} {Y} D‚â°d·µ¢‚±º (œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º)
    ...     | inj‚ÇÇ œÉY·µ¢‚±º‚â§œÉX·µ¢‚±º = begin
      D (œÉ X) (œÉ Y) ‚â°‚ü® D-sym (œÉ X) (œÉ Y) ‚ü©
      D (œÉ Y) (œÉ X) <‚ü® DœÉXœÉY<DXY {Y} {X} (trans (trans (D-sym (œÉ Y) (œÉ X)) D‚â°d·µ¢‚±º) (d-sym (œÉ X i j) (œÉ Y i j))) (œÉY·µ¢‚±º‚â§œÉX·µ¢‚±º , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º ‚àò ‚âà-sym) ‚ü©
      D Y X         ‚â°‚ü® D-sym Y X ‚ü©
      D X Y         ‚àé
      where open R‚Ñï‚Çö.‚â§-Reasoning
