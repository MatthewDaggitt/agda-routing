open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (‚â§-trans; ‚â§-refl; ‚â§-reflexive; m‚â§m+n; m+n‚à∏m‚â°n; +-mono-‚â§; ‚à∏-mono;  ‚äì-mono-<; ‚äî-mono-‚â§; m‚â§m‚äîn; m‚äìn‚â§m; ‚â∞‚áí‚â•; <‚áí‚â¢; n‚â§m‚äîn; m‚äìn‚â§n; <-transÀ°; <-trans ≥; +-distribÀ°-‚äî)
open import Data.Fin using (Fin)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; map)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; subst; subst‚ÇÇ; cong‚ÇÇ)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_)

open import RoutingLib.Routing.Definitions
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Data.Graph
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions using () renaming (SufficientConditions to GeneralSufficientConditions)
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; n<m‚áín‚äìo<m; n‚â§m‚áín‚äìo‚â§m; m<n‚áín‚â¢0; ‚â§-steps ≥; +-mono ≥-‚â§; +-mono ≥-<; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Data.Table using (Table; max‚Å∫; zipWith)
open import RoutingLib.Data.Table.Properties using (t‚â§max‚Å∫[t]; max‚Å∫-cong; max‚Å∫[t]‚â§x)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max‚Å∫[t]‚ààt)
import RoutingLib.Function.Distance as Distance 
import RoutingLib.Function.Distance.MaxLift as MaxLift

import RoutingLib.Routing.BellmanFord.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.Step2_InconsistentRouteMetric as Step2

module RoutingLib.Routing.BellmanFord.PathVector.Step3_InconsistentTableMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
  open Step2 ùìüùì¢ùìí
  open Distance ‚Ñùùïã‚Çõ using (Ultrametric; Bounded; MaxTriangleIneq)

  d‚Çú‚Å± : RTable ‚Üí RTable ‚Üí ‚Ñï
  d‚Çú‚Å± x y = max‚Å∫ (zipWith d·µ£‚Å± x y)

  d‚Çú‚Å±-cong : d‚Çú‚Å± Preserves‚ÇÇ _‚âà‚Çú_ ‚ü∂ _‚âà‚Çú_ ‚ü∂ _‚â°_
  d‚Çú‚Å±-cong x‚âày u‚âàv = max‚Å∫-cong (Œª i ‚Üí d·µ£‚Å±-cong (x‚âày i) (u‚âàv i))
  
  d‚Çú‚Å±-sym : ‚àÄ x y ‚Üí d‚Çú‚Å± x y ‚â° d‚Çú‚Å± y x
  d‚Çú‚Å±-sym x y = max‚Å∫-cong (Œª i ‚Üí d·µ£‚Å±-sym (x i) (y i))

  d‚Çú‚Å±-maxTriIneq : MaxTriangleIneq d‚Çú‚Å±
  d‚Çú‚Å±-maxTriIneq x y z with max‚Å∫[t]‚ààt (zipWith d·µ£‚Å± x z)
  ... | i , d‚Çú‚Å±‚â°d·µ£‚Å±x·µ¢z‚Å± = begin
    d‚Çú‚Å± x z                           ‚â°‚ü® d‚Çú‚Å±‚â°d·µ£‚Å±x·µ¢z‚Å± ‚ü©
    d·µ£‚Å± (x i) (z i)                   ‚â§‚ü® d·µ£‚Å±-maxTriIneq _ _ _ ‚ü©
    d·µ£‚Å± (x i) (y i) ‚äî d·µ£‚Å± (y i) (z i) ‚â§‚ü® ‚äî-mono-‚â§ (t‚â§max‚Å∫[t] _ i) (t‚â§max‚Å∫[t] _ i) ‚ü©
    d‚Çú‚Å± x y ‚äî d‚Çú‚Å± y z                 ‚àé
    where open ‚â§-Reasoning

  d‚Çú‚Å±-bounded : Bounded d‚Çú‚Å±
  d‚Çú‚Å±-bounded with d·µ£‚Å±-bounded
  ... | (v , d·µ£‚Å±‚â§v) = (v , Œª x y ‚Üí max‚Å∫[t]‚â§x (Œª i ‚Üí d·µ£‚Å±‚â§v (x i) (y i)))


  postulate X‚Å±Y·∂úZ·∂ú‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±XY : ‚àÄ {X Y Z} ‚Üí ùë∞‚Çú X ‚Üí ùë™‚Çú Y ‚Üí ùë™‚Çú Z ‚Üí d‚Çú‚Å± X Z ‚â§ d‚Çú‚Å± X Y
  --X‚Å±Y·∂úZ·∂ú‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±XY X‚Å± Y·∂ú Z·∂ú = {!!}
    --‚â§-reflexive (trans (X‚Å±Y·∂ú‚áíD‚Å±XY‚â°D‚Å±X X‚Å± Z·∂ú) (sym (X‚Å±Y·∂ú‚áíD‚Å±XY‚â°D‚Å±X X‚Å± Y·∂ú)))
    
  X·∂úY·∂úZ‚Å±‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±YZ : ‚àÄ {X Y Z} ‚Üí ùë™‚Çú X ‚Üí ùë™‚Çú Y ‚Üí ùë∞‚Çú Z ‚Üí d‚Çú‚Å± X Z ‚â§ d‚Çú‚Å± Y Z
  X·∂úY·∂úZ‚Å±‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±YZ {X} {Y} {Z} X·∂ú Y·∂ú Z‚Å± =
    subst‚ÇÇ _‚â§_ (d‚Çú‚Å±-sym Z X) (d‚Çú‚Å±-sym Z Y) (X‚Å±Y·∂úZ·∂ú‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±XY Z‚Å± Y·∂ú X·∂ú)


  

  d‚Çú‚Å±-force-ùë∞ : ‚àÄ {x y i} ‚Üí d‚Çú‚Å± x y ‚â° d·µ£‚Å± (x i) (y i) ‚Üí ùë∞‚Çú x ‚äé ùë∞‚Çú y ‚Üí ùë∞ (x i) ‚äé ùë∞ (y i)
  d‚Çú‚Å±-force-ùë∞ {x} {y} {i} d‚Çú‚Å±xy‚â°d·µ£‚Å±x·µ¢y·µ¢ x‚Å±‚äéy‚Å± with ùë™? (x i) | ùë™? (y i)
  ... | no  x·µ¢‚Å± | _       = inj‚ÇÅ x·µ¢‚Å±
  ... | _       | no  y·µ¢‚Å± = inj‚ÇÇ y·µ¢‚Å±
  ... | yes x·µ¢·∂ú | yes y·µ¢·∂ú with map ùë∞‚Çú-witness ùë∞‚Çú-witness x‚Å±‚äéy‚Å±
  ...   | inj‚ÇÅ (j , x‚±º‚Å±) = contradiction (sym d‚Çú‚Å±xy‚â°d·µ£‚Å±x·µ¢y·µ¢) (<‚áí‚â¢ (<-transÀ° (d·µ£‚Å±-mono-ùë∞ùë™ x·µ¢·∂ú y·µ¢·∂ú (inj‚ÇÅ x‚±º‚Å±)) (t‚â§max‚Å∫[t] _ j)))
  ...   | inj‚ÇÇ (j , y‚±º‚Å±) = contradiction (sym d‚Çú‚Å±xy‚â°d·µ£‚Å±x·µ¢y·µ¢) (<‚áí‚â¢ (<-transÀ° (d·µ£‚Å±-mono-ùë∞ùë™ x·µ¢·∂ú y·µ¢·∂ú (inj‚ÇÇ y‚±º‚Å±)) (t‚â§max‚Å∫[t] _ j)))

  d‚Çú‚Å±-force-‚â§ :  ‚àÄ {X Y : RMatrix} {r s} ‚Üí
                 d‚Çú‚Å± (X r) (Y r) ‚â° d·µ£‚Å± (X r s) (Y r s) ‚Üí
                 (‚àÄ s  ‚Üí ùë∞‚Çú (X s) ‚äé ùë∞‚Çú (Y s) ‚Üí d‚Çú‚Å± (X s) (Y s) ‚â§ d‚Çú‚Å± (X r) (Y r)) ‚Üí
                 ‚àÄ k l ‚Üí ùë∞ (X k l) ‚äé ùë∞ (Y k l) ‚Üí d·µ£‚Å± (X k l) (Y k l) ‚â§ d·µ£‚Å± (X r s) (Y r s)
  d‚Çú‚Å±-force-‚â§ {X} {Y} {r} {s} d‚Çú‚Å±X·µ£Y·µ£‚â°d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ d‚Çú‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ k l X‚Çñ‚Çó‚Å±‚äéY‚Çñ‚Çó = begin
    d·µ£‚Å± (X k l) (Y k l)   ‚â§‚ü® t‚â§max‚Å∫[t] _ l ‚ü©
    d‚Çú‚Å± (X k)   (Y k)     ‚â§‚ü® d‚Çú‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ k (map ùë∞‚áíùë∞‚Çú ùë∞‚áíùë∞‚Çú X‚Çñ‚Çó‚Å±‚äéY‚Çñ‚Çó) ‚ü©
    d‚Çú‚Å± (X r)   (Y r)     ‚â°‚ü® d‚Çú‚Å±X·µ£Y·µ£‚â°d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ ‚ü©
    d·µ£‚Å± (X r s) (Y r s)   ‚àé
    where open ‚â§-Reasoning
    
  d‚Çú‚Å±-strContr : ‚àÄ {i r X Y} ‚Üí ùë∞‚Çú (œÉ X i) ‚äé ùë∞‚Çú (œÉ Y i) ‚Üí
                 (‚àÄ s ‚Üí ùë∞‚Çú (X s) ‚äé ùë∞‚Çú (Y s) ‚Üí d‚Çú‚Å± (X s) (Y s) ‚â§ d‚Çú‚Å± (X r) (Y r)) ‚Üí
                 d‚Çú‚Å± (œÉ X i) (œÉ Y i) < d‚Çú‚Å± (X r) (Y r)
  d‚Çú‚Å±-strContr {i} {r} {X} {Y} œÉX‚Çñ‚Å±‚äéœÉY‚Çñ‚Å± d‚Çú‚Å±‚â§d‚Çú‚Å±X·µ£Y·µ£
    with max‚Å∫[t]‚ààt (Œª j ‚Üí d·µ£‚Å± (X r j) (Y r j))
       | max‚Å∫[t]‚ààt (Œª j ‚Üí d·µ£‚Å± (œÉ X i j) (œÉ Y i j))
  ... | s , d‚Çú‚Å±‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ | j , d‚Çú‚Å±‚â°d·µ£œÉX·µ¢‚±ºœÉY·µ¢‚±º = begin
    d‚Çú‚Å± (œÉ X i)  (œÉ Y i)          ‚â°‚ü® d‚Çú‚Å±‚â°d·µ£œÉX·µ¢‚±ºœÉY·µ¢‚±º ‚ü©
    d·µ£‚Å± (œÉ X i j) (œÉ Y i j)        <‚ü® d·µ£‚Å±-strContr {i} {j} {r} {s} {X} {Y}
                                      (d‚Çú‚Å±-force-ùë∞ d‚Çú‚Å±‚â°d·µ£œÉX·µ¢‚±ºœÉY·µ¢‚±º œÉX‚Çñ‚Å±‚äéœÉY‚Çñ‚Å±)
                                      (d‚Çú‚Å±-force-‚â§ d‚Çú‚Å±‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ d‚Çú‚Å±‚â§d‚Çú‚Å±X·µ£Y·µ£) ‚ü©
    d·µ£‚Å± (X r s)   (Y r s)          ‚â°‚ü® sym d‚Çú‚Å±‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ ‚ü©
    d‚Çú‚Å± (X r)     (Y r)            ‚àé
    where open ‚â§-Reasoning

  
