open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (‚â§-trans; ‚â§-refl; ‚â§-reflexive; m‚â§m+n; n‚â§1+n; m+n‚à∏m‚â°n; n‚â§m+n; +-mono-‚â§; ‚à∏-mono;  ‚äì-mono-<;+-cancelÀ°-‚â§;  m‚â§m‚äîn; m‚äìn‚â§m; ‚â∞‚áí‚â•; n‚â§m‚äîn; m‚äìn‚â§n; <-transÀ°; <-trans ≥; +-distribÀ°-‚äî; <‚áí‚â§)
open import Data.Fin using (Fin)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; sym; trans; cong; subst; subst‚ÇÇ; cong‚ÇÇ)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_)

open import RoutingLib.Routing.Definitions
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Data.Graph
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions using () renaming (SufficientConditions to GeneralSufficientConditions)
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; n<m‚áín‚äìo<m; n‚â§m‚áín‚äìo‚â§m; m<n‚áín‚â¢0; ‚â§-steps ≥; +-mono ≥-‚â§; +-mono ≥-<; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Data.Matrix using (Any; map; min‚Å∫)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫[M]<min‚Å∫[N])
open import RoutingLib.Data.Table using (Table)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
open import RoutingLib.Function.Distance using (Ultrametric; IsUltrametric; Bounded; MaxTriangleIneq)
import RoutingLib.Function.Distance.MaxLift as MaxLift

import RoutingLib.Routing.BellmanFord.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.Step3_InconsistentTableMetric as Step3
import RoutingLib.Routing.BellmanFord.PathVector.Step4_ConsistentTableMetric as Step4

module RoutingLib.Routing.BellmanFord.PathVector.Step5_TableMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
  open Step3 ùìüùì¢ùìí
  open Step4 ùìüùì¢ùìí

  H·∂ú : ‚Ñï
  H·∂ú = suc (proj‚ÇÅ d‚Çú·∂ú-bounded)

  H‚Å± : ‚Ñï
  H‚Å± = proj‚ÇÅ d‚Çú‚Å±-bounded

  d‚Çú·∂ú<H·∂ú+x : ‚àÄ {x y} (x·∂ú : ùë™‚Çú x) (y·∂ú : ùë™‚Çú y) z ‚Üí d‚Çú·∂ú x·∂ú y·∂ú < H·∂ú + z
  d‚Çú·∂ú<H·∂ú+x x·∂ú y·∂ú z = s‚â§s (‚â§-trans (proj‚ÇÇ d‚Çú·∂ú-bounded x·∂ú y·∂ú) (m‚â§m+n _ z))
  
  --------------------------------
  -- An ultrametric over tables --
  --------------------------------

  d‚Çú : RTable ‚Üí RTable ‚Üí ‚Ñï
  d‚Çú x y with x ‚âü‚Çú y | ùë™‚Çú? x | ùë™‚Çú? y
  ... | yes _ | _      | _      = zero
  ... | no  _ | yes x·∂ú | yes y·∂ú = d‚Çú·∂ú x·∂ú y·∂ú
  ... | no  _ | _      | _      = H·∂ú + d‚Çú‚Å± x y
  
  d‚Çú-cong : d‚Çú Preserves‚ÇÇ _‚âà‚Çú_ ‚ü∂ _‚âà‚Çú_ ‚ü∂ _‚â°_
  d‚Çú-cong {W} {X} {Y} {Z} W‚âàX Y‚âàZ with W ‚âü‚Çú Y | X ‚âü‚Çú Z 
  ... | yes _   | yes _   = refl
  ... | yes W‚âàY | no  X‚ââZ = contradiction (‚âà‚Çú-trans (‚âà‚Çú-trans (‚âà‚Çú-sym W‚âàX) W‚âàY) Y‚âàZ) X‚ââZ
  ... | no  W‚ââY | yes X‚âàZ = contradiction (‚âà‚Çú-trans (‚âà‚Çú-trans W‚âàX X‚âàZ) (‚âà‚Çú-sym Y‚âàZ)) W‚ââY
  ... | no _    | no _    with ùë™‚Çú? W | ùë™‚Çú? X | ùë™‚Çú? Y | ùë™‚Çú? Z
  ...   | no  W‚Å± | yes X·∂ú | _      | _      = contradiction (ùë™‚Çú-cong (‚âà‚Çú-sym W‚âàX) X·∂ú) W‚Å±
  ...   | yes W·∂ú | no  X‚Å± | _      |  _     = contradiction (ùë™‚Çú-cong W‚âàX W·∂ú) X‚Å±
  ...   | _      | _      | yes Y·∂ú | no  Z‚Å± = contradiction (ùë™‚Çú-cong Y‚âàZ Y·∂ú) Z‚Å±
  ...   | _      | _      | no  Y‚Å± | yes Z·∂ú = contradiction (ùë™‚Çú-cong (‚âà‚Çú-sym Y‚âàZ) Z·∂ú) Y‚Å±
  ...   | no _   | no _   | _      | _      = cong (H·∂ú +_) (d‚Çú‚Å±-cong W‚âàX Y‚âàZ)
  ...   | yes _  | yes _  | no  _  | no  _  = cong (H·∂ú +_) (d‚Çú‚Å±-cong W‚âàX Y‚âàZ)
  ...   | yes w·∂ú | yes x·∂ú | yes y·∂ú | yes z·∂ú = d‚Çú·∂ú-cong w·∂ú y·∂ú x·∂ú z·∂ú W‚âàX Y‚âàZ

  x‚âày‚áíd‚Çú‚â°0 : ‚àÄ {X Y} ‚Üí X ‚âà‚Çú Y ‚Üí d‚Çú X Y ‚â° 0
  x‚âày‚áíd‚Çú‚â°0 {X} {Y} X‚âàY with X ‚âü‚Çú Y
  ... | yes _   = refl
  ... | no  X‚ââY = contradiction X‚âàY X‚ââY

  d‚Çú‚â°0‚áíx‚âày : ‚àÄ {X Y} ‚Üí d‚Çú X Y ‚â° 0 ‚Üí X ‚âà‚Çú Y
  d‚Çú‚â°0‚áíx‚âày {X} {Y} d‚Çú‚â°0 with X ‚âü‚Çú Y
  ... | yes X‚âàY = X‚âàY
  ... | no  _   with ùë™‚Çú? X | ùë™‚Çú? Y
  ...   | yes X·∂ú | yes Y·∂ú  = d‚Çú·∂ú‚â°0‚áíx‚âày X·∂ú Y·∂ú d‚Çú‚â°0
  ...   | no  X‚Å± | _      = contradiction d‚Çú‚â°0 Œª()
  ...   | yes X·∂ú | no  Y‚Å± = contradiction d‚Çú‚â°0 Œª()
  
  d‚Çú-sym : ‚àÄ X Y ‚Üí d‚Çú X Y ‚â° d‚Çú Y X
  d‚Çú-sym X Y with X ‚âü‚Çú Y | Y ‚âü‚Çú X
  ... | yes _   | yes _   = refl
  ... | yes X‚âàY | no  Y‚ââX = contradiction (‚âà‚Çú-sym X‚âàY) Y‚ââX
  ... | no  X‚ââY | yes Y‚âàX = contradiction (‚âà‚Çú-sym Y‚âàX) X‚ââY
  ... | no _    | no _    with ùë™‚Çú? X | ùë™‚Çú? Y
  ...   | yes X·∂ú | yes Y·∂ú = d‚Çú·∂ú-sym X·∂ú Y·∂ú
  ...   | no  _  | no  _  = cong (H·∂ú +_) (d‚Çú‚Å±-sym X Y)
  ...   | no  _  | yes _  = cong (H·∂ú +_) (d‚Çú‚Å±-sym X Y)
  ...   | yes _  | no  _  = cong (H·∂ú +_) (d‚Çú‚Å±-sym X Y)
  
  d‚Çú-maxTriIneq-lemma : ‚àÄ X Y Z ‚Üí H·∂ú + d‚Çú‚Å± X Z ‚â§ (H·∂ú + d‚Çú‚Å± X Y) ‚äî (H·∂ú + d‚Çú‚Å± Y Z)
  d‚Çú-maxTriIneq-lemma X Y Z = begin
    H·∂ú + d‚Çú‚Å± X Z                    ‚â§‚ü® +-mono ≥-‚â§ H·∂ú (d‚Çú‚Å±-maxTriIneq X Y Z) ‚ü©
    H·∂ú + (d‚Çú‚Å± X Y ‚äî d‚Çú‚Å± Y Z)        ‚â°‚ü® +-distribÀ°-‚äî H·∂ú _ _ ‚ü©
    (H·∂ú + d‚Çú‚Å± X Y) ‚äî (H·∂ú + d‚Çú‚Å± Y Z) ‚àé
    where open ‚â§-Reasoning
  
  d‚Çú-maxTriIneq : MaxTriangleIneq ‚Ñùùïã‚Çõ d‚Çú
  d‚Çú-maxTriIneq X Y Z with X ‚âü‚Çú Z | X ‚âü‚Çú Y | Y ‚âü‚Çú Z
  d‚Çú-maxTriIneq X Y Z | yes _   | _       | _       = z‚â§n
  d‚Çú-maxTriIneq X Y Z | no  X‚ââZ | yes X‚âàY | yes Y‚âàZ = contradiction (‚âà‚Çú-trans X‚âàY Y‚âàZ) X‚ââZ
  d‚Çú-maxTriIneq X Y Z | no  _   | yes X‚âàY | no  _   with ùë™‚Çú? X | ùë™‚Çú? Y | ùë™‚Çú? Z
  ... | yes X·∂ú | yes Y·∂ú | yes Z·∂ú = ‚â§-reflexive (d‚Çú·∂ú-cong X·∂ú Z·∂ú Y·∂ú Z·∂ú X‚âàY ‚âà‚Çú-refl)
  ... | yes X·∂ú | no  Y‚Å± | _     = contradiction (ùë™‚Çú-cong X‚âàY X·∂ú) Y‚Å±
  ... | no  X‚Å± | yes Y·∂ú | _     = contradiction (ùë™‚Çú-cong (‚âà‚Çú-sym X‚âàY) Y·∂ú) X‚Å±
  ... | yes _  | yes _  | no  _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d‚Çú‚Å±-cong X‚âàY ‚âà‚Çú-refl))
  ... | no  _  | no  _  | yes _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d‚Çú‚Å±-cong X‚âàY ‚âà‚Çú-refl))
  ... | no  _  | no  _  | no  _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d‚Çú‚Å±-cong X‚âàY ‚âà‚Çú-refl))
  d‚Çú-maxTriIneq X Y Z | no  _   | no  _   | yes Y‚âàZ with ùë™‚Çú? X | ùë™‚Çú? Y | ùë™‚Çú? Z
  ... | yes X·∂ú | yes Y·∂ú | yes Z·∂ú = m‚â§n‚áím‚â§n‚äîo 0 (‚â§-reflexive (d‚Çú·∂ú-cong X·∂ú Z·∂ú X·∂ú Y·∂ú ‚âà‚Çú-refl (‚âà‚Çú-sym Y‚âàZ)))
  ... | _      | yes Y·∂ú | no  Z‚Å± = contradiction (ùë™‚Çú-cong Y‚âàZ Y·∂ú) Z‚Å±
  ... | _      | no  Y‚Å± | yes Z·∂ú = contradiction (ùë™‚Çú-cong (‚âà‚Çú-sym Y‚âàZ) Z·∂ú) Y‚Å±
  ... | no  _  | yes _  | yes _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d‚Çú‚Å±-cong ‚âà‚Çú-refl (‚âà‚Çú-sym Y‚âàZ))))
  ... | yes _  | no  _  | no  _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d‚Çú‚Å±-cong ‚âà‚Çú-refl (‚âà‚Çú-sym Y‚âàZ))))
  ... | no  _  | no  _  | no  _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d‚Çú‚Å±-cong ‚âà‚Çú-refl (‚âà‚Çú-sym Y‚âàZ))))
  d‚Çú-maxTriIneq X Y Z | no  _   | no  _   | no  _   with ùë™‚Çú? X | ùë™‚Çú? Y | ùë™‚Çú? Z
  ... | yes X·∂ú | yes Y·∂ú | yes Z·∂ú = d‚Çú·∂ú-maxTriIneq X·∂ú Y·∂ú Z·∂ú
  ... | yes X·∂ú | yes Y·∂ú | no  Z‚Å± = m‚â§o‚áím‚â§n‚äîo (d‚Çú·∂ú X·∂ú Y·∂ú) (+-mono ≥-‚â§ H·∂ú (X·∂úY·∂úZ‚Å±‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±YZ X·∂ú Y·∂ú Z‚Å±))
  ... | no  X‚Å± | yes Y·∂ú | yes Z·∂ú = m‚â§n‚áím‚â§n‚äîo (d‚Çú·∂ú Y·∂ú Z·∂ú) (+-mono ≥-‚â§ H·∂ú (X‚Å±Y·∂úZ·∂ú‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±XY X‚Å± Y·∂ú Z·∂ú))
  ... | yes X·∂ú | no  Y‚Å± | yes Z·∂ú = m‚â§n‚áím‚â§n‚äîo (H·∂ú + d‚Çú‚Å± Y Z) (<‚áí‚â§ (d‚Çú·∂ú<H·∂ú+x X·∂ú Z·∂ú _))
  ... | yes _  | no  _  | no  _  = d‚Çú-maxTriIneq-lemma X Y Z
  ... | no  _  | yes _  | no  _  = d‚Çú-maxTriIneq-lemma X Y Z
  ... | no  _  | no  _  | yes _  = d‚Çú-maxTriIneq-lemma X Y Z
  ... | no  _  | no  _  | no  _  = d‚Çú-maxTriIneq-lemma X Y Z


  H·∂ú+d‚Çú‚Å±‚â§d‚Çú : ‚àÄ {x y} ‚Üí ùë∞‚Çú x ‚äé ùë∞‚Çú y ‚Üí H·∂ú + d‚Çú‚Å± x y ‚â§ d‚Çú x y
  H·∂ú+d‚Çú‚Å±‚â§d‚Çú {x} {y} x‚Å±‚äéy‚Å± with x ‚âü‚Çú y
  ... | yes _ = ?
  ... | no  _ with ùë™‚Çú? x | ùë™‚Çú? y
  ...   | yes x·∂ú | yes y·∂ú = ?
  ...   | no  _  | no  _  = ?
  ...   | no  _  | yes _  = ?
  ...   | yes _  | no  _  = ?
  
  postulate d‚Çú-force-ùë™ : ‚àÄ {k} {X Y : RMatrix} (X‚Çñ·∂ú : ùë™‚Çú (X k)) (Y‚Çñ·∂ú : ùë™‚Çú (Y k)) ‚Üí
                (‚àÄ i ‚Üí d‚Çú (X i) (Y i) ‚â§ d‚Çú·∂ú X‚Çñ·∂ú Y‚Çñ·∂ú) ‚Üí
                Œ£ (ùë™‚Çò X) (Œª X·∂ú ‚Üí Œ£ (ùë™‚Çò Y) (Œª Y·∂ú ‚Üí (‚àÄ i ‚Üí d‚Çú·∂ú (X·∂ú i) (Y·∂ú i) ‚â§ d‚Çú·∂ú (X·∂ú k) (Y·∂ú k))))

  d‚Çú-force-d‚Çú‚Å± : ‚àÄ {X Y : RMatrix} {l} ‚Üí 
                 (‚àÄ i ‚Üí d‚Çú (X i) (Y i) ‚â§ H·∂ú + d‚Çú‚Å± (X l) (Y l)) ‚Üí
                 (‚àÄ i ‚Üí ùë∞‚Çú (X i) ‚äé ùë∞‚Çú (Y i) ‚Üí d‚Çú‚Å± (X i) (Y i) ‚â§ d‚Çú‚Å± (X l) (Y l))
  d‚Çú-force-d‚Çú‚Å± {X} {Y} {l} d‚Çú‚â§H·∂ú+d‚Çú‚Å±X‚ÇóY‚Çó i X·µ¢‚Å±‚äéY·µ¢‚Å± = +-cancelÀ°-‚â§ H·∂ú (‚â§-trans (H·∂ú+d‚Çú‚Å±‚â§d‚Çú X·µ¢‚Å±‚äéY·µ¢‚Å±) (d‚Çú‚â§H·∂ú+d‚Çú‚Å±X‚ÇóY‚Çó i))
    
  d‚Çú-strContr-X·∂úY·∂ú : ‚àÄ {k l X Y} ‚Üí X l ‚ââ‚Çú Y l ‚Üí
                    (X·∂ú : ùë™‚Çò X) (Y·∂ú : ùë™‚Çò Y) ‚Üí 
                    (‚àÄ i ‚Üí d‚Çú (œÉ X i) (œÉ Y i) ‚â§ d‚Çú (œÉ X k) (œÉ Y k)) ‚Üí
                    (‚àÄ i ‚Üí d‚Çú·∂ú (X·∂ú i) (Y·∂ú i)   ‚â§ d‚Çú·∂ú (X·∂ú l) (Y·∂ú l)) ‚Üí
                    d‚Çú (œÉ X k) (œÉ Y k) < d‚Çú·∂ú (X·∂ú l) (Y·∂ú l)
  d‚Çú-strContr-X·∂úY·∂ú {k} {l} {X} {Y} X‚Çó‚ââY‚Çó X·∂ú Y·∂ú d‚Çú‚â§d‚ÇúœÉX‚ÇñœÉY‚Çñ d‚Çú·∂ú‚â§d‚Çú·∂úX‚ÇóY‚Çó with œÉ X k ‚âü‚Çú œÉ Y k
  ... | yes œÉX‚Çñ‚âàœÉY‚Çñ = n‚â¢0‚áí0<n (X‚Çó‚ââY‚Çó ‚àò d‚Çú·∂ú‚â°0‚áíx‚âày (X·∂ú l) (Y·∂ú l))
  ... | no  _        with ùë™‚Çú? (œÉ X k) | ùë™‚Çú? (œÉ Y k)
  ...   | _        | no  œÉY‚Çñ‚Å± = contradiction (œÉ-pres-ùë™‚Çò Y·∂ú k) œÉY‚Çñ‚Å±
  ...   | no  œÉX‚Çñ‚Å± | _        = contradiction (œÉ-pres-ùë™‚Çò X·∂ú k) œÉX‚Çñ‚Å±
  ...   | yes œÉX‚Çñ·∂ú | yes œÉY‚Çñ·∂ú with d‚Çú-force-ùë™ œÉX‚Çñ·∂ú œÉY‚Çñ·∂ú d‚Çú‚â§d‚ÇúœÉX‚ÇñœÉY‚Çñ
  ...     | œÉX·∂ú , œÉY·∂ú , d‚Çú·∂ú‚â§d‚Çú·∂úœÉX‚ÇñœÉY‚Çñ = begin
    d‚Çú·∂ú œÉX‚Çñ·∂ú    œÉY‚Çñ·∂ú    ‚â°‚ü® d‚Çú·∂ú-cong œÉX‚Çñ·∂ú œÉY‚Çñ·∂ú (œÉX·∂ú k) (œÉY·∂ú k) ‚âà‚Çú-refl ‚âà‚Çú-refl  ‚ü©
    d‚Çú·∂ú (œÉX·∂ú k) (œÉY·∂ú k) <‚ü® d‚Çú·∂ú-strContr X‚Çó‚ââY‚Çó X·∂ú Y·∂ú œÉX·∂ú œÉY·∂ú d‚Çú·∂ú‚â§d‚Çú·∂úœÉX‚ÇñœÉY‚Çñ d‚Çú·∂ú‚â§d‚Çú·∂úX‚ÇóY‚Çó ‚ü©
    d‚Çú·∂ú (X·∂ú l)  (Y·∂ú l)  ‚àé
    where open ‚â§-Reasoning
    
  d‚Çú-strContr-XY‚Å± : ‚àÄ {k l X Y} ‚Üí
                    (‚àÄ i ‚Üí d‚Çú (X i) (Y i) ‚â§ H·∂ú + d‚Çú‚Å± (X l) (Y l)) ‚Üí
                    d‚Çú (œÉ X k) (œÉ Y k) < H·∂ú + d‚Çú‚Å± (X l) (Y l)
  d‚Çú-strContr-XY‚Å± {k} {l} {X} {Y} d‚Çú‚â§d‚ÇúX‚ÇóY‚Çó with œÉ X k ‚âü‚Çú œÉ Y k
  ... | yes œÉX‚Çñ‚âàœÉY‚Çñ = s‚â§s z‚â§n
  ... | no  œÉX‚Çñ‚ââœÉY‚Çñ with ùë™‚Çú? (œÉ X k) | ùë™‚Çú? (œÉ Y k)
  ...   | yes œÉX‚Çñ·∂ú | yes œÉY‚Çñ·∂ú = d‚Çú·∂ú<H·∂ú+x œÉX‚Çñ·∂ú œÉY‚Çñ·∂ú _
  ...   | yes _    | no  œÉY‚Çñ‚Å± = +-mono ≥-< H·∂ú (d‚Çú‚Å±-strContr (inj‚ÇÇ œÉY‚Çñ‚Å±) (d‚Çú-force-d‚Çú‚Å± d‚Çú‚â§d‚ÇúX‚ÇóY‚Çó))
  ...   | no  œÉX‚Çñ‚Å± | yes _    = +-mono ≥-< H·∂ú (d‚Çú‚Å±-strContr (inj‚ÇÅ œÉX‚Çñ‚Å±) (d‚Çú-force-d‚Çú‚Å± d‚Çú‚â§d‚ÇúX‚ÇóY‚Çó))
  ...   | no  œÉX‚Çñ‚Å± | no  _    = +-mono ≥-< H·∂ú (d‚Çú‚Å±-strContr (inj‚ÇÅ œÉX‚Çñ‚Å±) (d‚Çú-force-d‚Çú‚Å± d‚Çú‚â§d‚ÇúX‚ÇóY‚Çó))

  d‚Çú-strContracting : ‚àÄ {k l X Y} ‚Üí X l ‚ââ‚Çú Y l ‚Üí 
                      (‚àÄ i ‚Üí d‚Çú (œÉ X i) (œÉ Y i) ‚â§ d‚Çú (œÉ X k) (œÉ Y k)) ‚Üí
                      (‚àÄ i ‚Üí d‚Çú (X i) (Y i) ‚â§ d‚Çú (X l) (Y l)) ‚Üí
                      d‚Çú (œÉ X k) (œÉ Y k) < d‚Çú (X l) (Y l)
  d‚Çú-strContracting {k} {l} {X} {Y} X‚Çó‚ââY‚Çó d‚Çú‚â§d‚ÇúœÉX‚ÇñœÉY‚Çñ d‚Çú‚â§d‚ÇúX‚ÇóY‚Çó with X l ‚âü‚Çú Y l
  ... | yes X‚Çó‚âàY‚Çó = contradiction X‚Çó‚âàY‚Çó X‚Çó‚ââY‚Çó
  ... | no  _     with ùë™‚Çú? (X l) | ùë™‚Çú? (Y l)
  ...   | no  _   | yes _   = d‚Çú-strContr-XY‚Å± d‚Çú‚â§d‚ÇúX‚ÇóY‚Çó
  ...   | yes _   | no  _   = d‚Çú-strContr-XY‚Å± d‚Çú‚â§d‚ÇúX‚ÇóY‚Çó
  ...   | no  _   | no  _   = d‚Çú-strContr-XY‚Å± d‚Çú‚â§d‚ÇúX‚ÇóY‚Çó
  ...   | yes X‚Çó·∂ú | yes Y‚Çó·∂ú with d‚Çú-force-ùë™ X‚Çó·∂ú Y‚Çó·∂ú d‚Çú‚â§d‚ÇúX‚ÇóY‚Çó
  ...     | X·∂ú , Y·∂ú , d‚Çú·∂ú‚â§d‚Çú·∂úX‚ÇñY‚Çñ = begin
    d‚Çú (œÉ X k) (œÉ Y k)  <‚ü® d‚Çú-strContr-X·∂úY·∂ú X‚Çó‚ââY‚Çó X·∂ú Y·∂ú d‚Çú‚â§d‚ÇúœÉX‚ÇñœÉY‚Çñ d‚Çú·∂ú‚â§d‚Çú·∂úX‚ÇñY‚Çñ ‚ü©
    d‚Çú·∂ú (X·∂ú l) (Y·∂ú l)   ‚â°‚ü® d‚Çú·∂ú-cong (X·∂ú l) (Y·∂ú l) X‚Çó·∂ú Y‚Çó·∂ú ‚âà‚Çú-refl ‚âà‚Çú-refl ‚ü©
    d‚Çú·∂ú X‚Çó·∂ú Y‚Çó·∂ú         ‚àé
    where open ‚â§-Reasoning

  d‚Çú‚â§H·∂ú+H‚Å± : ‚àÄ x y ‚Üí d‚Çú x y ‚â§ H·∂ú + H‚Å±
  d‚Çú‚â§H·∂ú+H‚Å± x y with x ‚âü‚Çú y
  ... | yes _ = z‚â§n
  ... | no  _ with ùë™‚Çú? x | ùë™‚Çú? y
  ...   | yes x·∂ú | yes y·∂ú = ‚â§-trans (proj‚ÇÇ d‚Çú·∂ú-bounded x·∂ú y·∂ú) (‚â§-trans (n‚â§1+n _) (m‚â§m+n H·∂ú H‚Å±))
  ...   | no  _  | no  _  = +-mono ≥-‚â§ H·∂ú (proj‚ÇÇ d‚Çú‚Å±-bounded x y)
  ...   | no  _  | yes _  = +-mono ≥-‚â§ H·∂ú (proj‚ÇÇ d‚Çú‚Å±-bounded x y)
  ...   | yes _  | no  _  = +-mono ≥-‚â§ H·∂ú (proj‚ÇÇ d‚Çú‚Å±-bounded x y)
  
  d‚Çú-bounded : Bounded ‚Ñùùïã‚Çõ d‚Çú
  d‚Çú-bounded = H·∂ú + H‚Å± , d‚Çú‚â§H·∂ú+H‚Å±
  
  d‚Çú-isUltrametric : IsUltrametric ‚Ñùùïã‚Çõ d‚Çú
  d‚Çú-isUltrametric = record
    { cong        = d‚Çú-cong
    ; eq‚áí0        = x‚âày‚áíd‚Çú‚â°0
    ; 0‚áíeq        = d‚Çú‚â°0‚áíx‚âày
    ; sym         = d‚Çú-sym
    ; maxTriangle = d‚Çú-maxTriIneq
    }

  d‚Çú-ultrametric : Ultrametric ‚Ñùùïã‚Çõ
  d‚Çú-ultrametric = record
    { d             = d‚Çú
    ; isUltrametric = d‚Çú-isUltrametric
    }
