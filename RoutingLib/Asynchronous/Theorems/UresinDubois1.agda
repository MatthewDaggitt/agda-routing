open import Data.Fin using (Fin)
open import Data.Fin.Subset using () renaming (_‚àà_ to _‚àà‚Çõ_)
open import Data.Fin.Dec using (_‚àà?_)
open import Relation.Binary using (Setoid)
open import Data.Product using (proj‚ÇÇ; proj‚ÇÅ)
open import Induction.WellFounded using (Acc; acc)
open import Induction.Nat using (<-wellFounded)
open import Data.Nat using (‚Ñï; _+_; _‚â§_; zero; suc; _<_; _‚âü_; s‚â§s; z‚â§n; _‚à∏_)
open import Data.Nat.Properties
  using (‚â§-trans; +-identity ≥; m‚â§m+n; <‚áí‚â±; module ‚â§-Reasoning;
        <‚áí‚â§pred; ‚â§+‚â¢‚áí<; m+n‚à∏m‚â°n; ‚â§-antisym; +-suc; ‚â§-refl; n‚â§1+n)
open import Relation.Binary.PropositionalEquality using (subst; cong; refl; sym; trans)
open import Relation.Nullary using (yes; no; ¬¨_)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using () renaming (_‚àà_ to _‚àà·µ§_)
 
open import RoutingLib.Asynchronous.Schedule
open import RoutingLib.Asynchronous using (Parallelisation; IsAsynchronouslySafe)
open import RoutingLib.Asynchronous.Theorems.Core using (TotalACO; ACO)

module RoutingLib.Asynchronous.Theorems.UresinDubois1
  {a ‚Ñì n p} {ùïä·µ¢ : Fin n ‚Üí Setoid a ‚Ñì} (ùìü : Parallelisation ùïä·µ¢)
  (ùìüùì¢ : PseudoperiodicSchedule n) (aco : ACO ùìü p) where

  open Parallelisation ùìü
  open PseudoperiodicSchedule ùìüùì¢
  open ACO aco

  Œ≤-decreasing : ‚àÄ {t} i j ‚Üí 1 ‚â§ t ‚Üí Œ≤ t i j ‚â§ t
  Œ≤-decreasing i j (s‚â§s z‚â§n) = ‚â§-trans (causality _ i j) (n‚â§1+n _)

  œÑ[1+K]-expired : ‚àÄ {t K i j} ‚Üí œÑ (suc K) i ‚â§ t ‚Üí œÑ K j ‚â§ Œ≤ t i j
  œÑ[1+K]-expired {t} {K} {i} {j} œÑ[1+K]‚â§t = begin
    œÑ K j                               ‚â§‚ü® œÑ-expired K (t ‚à∏ œÜ (suc K)) i j ‚ü©
    Œ≤ (œÜ (suc K) + (t ‚à∏ œÜ (suc K))) i j ‚â°‚ü® cong (Œª x ‚Üí Œ≤ x i j) (m+n‚à∏m‚â°n (‚â§-trans (œÑ-after-œÜ (suc K) i) œÑ[1+K]‚â§t)) ‚ü©
    Œ≤ t                             i j ‚àé
    where open ‚â§-Reasoning

  0<œÑ[1+K] : ‚àÄ {K i} ‚Üí 0 < œÑ (suc K) i
  0<œÑ[1+K] {K} {i} = begin
    1            ‚â§‚ü® s‚â§s z‚â§n ‚ü©
    suc K        ‚â§‚ü® œÜ-increasing (suc K) ‚ü©
    œÜ (suc K)    ‚â§‚ü® œÑ-after-œÜ (suc K) i ‚ü©
    œÑ (suc K) i  ‚àé
    where open ‚â§-Reasoning






  module _ {x‚ÇÄ : S} (x‚ÇÄ‚ààD‚ÇÄ : x‚ÇÄ ‚àà D 0) where
    
    async[t]'‚ààD‚ÇÄ : ‚àÄ {t} (acc‚Çú : Acc _<_ t) ‚Üí asyncIter' ùì¢ x‚ÇÄ acc‚Çú ‚àà D 0
    async[t]'‚ààD‚ÇÄ {zero}   _          i = x‚ÇÄ‚ààD‚ÇÄ i
    async[t]'‚ààD‚ÇÄ {suc t}  (acc rec)  i with i ‚àà? Œ± (suc t)
    ... | yes i‚ààŒ± = D-decreasing 0 (F-monotonic 0 (Œª j ‚Üí
          async[t]'‚ààD‚ÇÄ (rec (Œ≤ (suc t) i j) (s‚â§s (causality t i j))) j)) i
    ... | no  i‚àâŒ± = async[t]'‚ààD‚ÇÄ (rec t (s‚â§s ‚â§-refl)) i

    œÑ-stability' : ‚àÄ {t K i} (acc‚Çú : Acc _<_ t) ‚Üí œÑ K i ‚â§ t ‚Üí
                   asyncIter' ùì¢ x‚ÇÄ acc‚Çú i ‚àà·µ§ D K i
    œÑ-stability' {_}      {zero}   {i} acc‚Çú       _      = async[t]'‚ààD‚ÇÄ acc‚Çú i
    œÑ-stability' {zero}   {suc K}  {i} _          œÑ‚â§0    = contradiction œÑ‚â§0 (<‚áí‚â± 0<œÑ[1+K])
    œÑ-stability' {suc t}  {suc K}  {i} (acc rec)  œÑ‚â§1+t  with i ‚àà? Œ± (suc t)
    ... | yes _ = F-monotonic K (Œª j ‚Üí œÑ-stability' _ (œÑ[1+K]-expired œÑ‚â§1+t)) i
    ... | no  i‚àâŒ± with œÑ (suc K) i ‚âü suc t
    ...   | no  œÑ‚â¢1+t = œÑ-stability' _ (<‚áí‚â§pred (‚â§+‚â¢‚áí< œÑ‚â§1+t œÑ‚â¢1+t))
    ...   | yes œÑ‚â°1+t = contradiction (subst (i ‚àà‚Çõ_) (cong Œ± œÑ‚â°1+t) (œÑ-active (suc K) i)) i‚àâŒ±

    œÑ-stability : ‚àÄ {t K i} ‚Üí œÑ K i ‚â§ t ‚Üí asyncIter ùì¢ x‚ÇÄ t i ‚àà·µ§ D K i
    œÑ-stability {t} = œÑ-stability' (<-wellFounded t)


    -- Theorem 1
    
    T : ùïã
    T = proj‚ÇÅ D-finish

    Œæ : S
    Œæ = proj‚ÇÅ (proj‚ÇÇ D-finish)

    D[T]‚âà‚¶ÉŒæ‚¶Ñ : ‚àÄ {s} ‚Üí s ‚àà D T ‚Üí s ‚âà Œæ
    D[T]‚âà‚¶ÉŒæ‚¶Ñ {s} s‚ààD[T] rewrite sym (+-identity ≥ T) = ‚âà-sym (proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ D-finish) 0) s s‚ààD[T])
    
    t·∂ú : ùïã
    t·∂ú = œÜ (suc T)
    
    1‚â§t·∂ú : 1 ‚â§ t·∂ú
    1‚â§t·∂ú = ‚â§-trans (s‚â§s z‚â§n) (œÜ-increasing (suc T))

    async[t·∂ú]‚ààD[T] : ‚àÄ t ‚Üí asyncIter ùì¢ x‚ÇÄ (t·∂ú + t) ‚àà D T
    async[t·∂ú]‚ààD[T] t j = œÑ-stability (begin
      œÑ T j           ‚â§‚ü® œÑ-expired T 0 j j ‚ü©
      Œ≤ (t·∂ú + 0) j j  ‚â°‚ü® cong (Œª v ‚Üí Œ≤ v j j) (+-identity ≥ t·∂ú) ‚ü©
      Œ≤ t·∂ú j j        ‚â§‚ü® Œ≤-decreasing j j 1‚â§t·∂ú ‚ü©
      t·∂ú              ‚â§‚ü® m‚â§m+n t·∂ú t ‚ü©
      t·∂ú + t          ‚àé)
      where open ‚â§-Reasoning

    async-converge : ‚àÄ K ‚Üí asyncIter ùì¢ x‚ÇÄ (t·∂ú + K) ‚âà Œæ
    async-converge K = D[T]‚âà‚¶ÉŒæ‚¶Ñ (async[t·∂ú]‚ààD[T] K)


{-
  module _ {p} (totalACO : TotalACO ùï° p) where

    open TotalACO totalACO
    
    isAsynchronouslySafe : IsAsynchronouslySafe ùï°
    isAsynchronouslySafe = record
      { m*         = proj‚ÇÅ (proj‚ÇÇ D-finish)
      ; m*-reached = Œª ùï§ X ‚Üí async-converge aco ùï§ (total X)
      }
-}
