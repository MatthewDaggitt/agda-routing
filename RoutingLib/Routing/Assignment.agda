--------------------------------------------------------------------------------
-- Agda routing library
--
-- This module contains the basic definitions about the assignment of a route
-- to a node.
--------------------------------------------------------------------------------

open import Data.Fin.Base as Fin using (Fin)
open import Data.Fin.Properties as Fin using (any?)
open import Data.Fin.Subset.Properties using (_‚àà?_)
open import Data.Nat using (‚Ñï)
open import Data.Product using (_√ó_; _,_; ‚àÉ‚ÇÇ; proj‚ÇÅ; proj‚ÇÇ)
import Data.Product.Relation.Binary.Pointwise.NonDependent as DirectProduct
import Data.Product.Relation.Binary.Lex.NonStrict as LexProduct
open import Level using (_‚äî_)
open import Relation.Binary
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; sym; trans)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Negation using (¬¨?; ¬¨-reflects)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary as U using (Pred; _‚àà_; ‚àÅ)
import Relation.Binary.Construct.NonStrictToStrict as NonStrictToStrict


open import RoutingLib.Routing.Algebra

module RoutingLib.Routing.Assignment
  {a b ‚Ñì} (algebra : RawRoutingAlgebra a b ‚Ñì) (n : ‚Ñï)
  where

open RawRoutingAlgebra algebra

--------------------------------------------------------------------------------
-- Definition

Assignment : Set a
Assignment = Fin n √ó Route

--------------------------------------------------------------------------------
-- Functions

node : Assignment ‚Üí Fin n
node = proj‚ÇÅ

value : Assignment ‚Üí Route
value = proj‚ÇÇ

--------------------------------------------------------------------------------
-- Predicates

IsInvalid : Pred Assignment ‚Ñì
IsInvalid (d , v) = v ‚âà ‚àû#

IsInvalid? : U.Decidable IsInvalid
IsInvalid? (d , v) = v ‚âü ‚àû#

IsValid : Pred Assignment ‚Ñì
IsValid = ‚àÅ IsInvalid

IsValid? : U.Decidable IsValid
IsValid? p = ¬¨? (IsInvalid? p)

--------------------------------------------------------------------------------
-- Equality relation

Decùî∏‚Çõ : DecSetoid a ‚Ñì
Decùî∏‚Çõ = DirectProduct.√ó-decSetoid (Fin.‚â°-decSetoid n) DS

open DecSetoid Decùî∏‚Çõ public
  using () renaming
  ( _‚âà_           to _‚âà‚Çê_
  ; _‚ââ_           to _‚ââ‚Çê_
  ; refl          to ‚âà‚Çê-refl
  ; trans         to ‚âà‚Çê-trans
  ; sym           to ‚âà‚Çê-sym
  ; _‚âü_           to _‚âü‚Çê_
  ; isEquivalence to ‚âà‚Çê-isEquivalence
  ; setoid        to ùî∏‚Çõ
  )

--------------------------------------------------------------------------------
-- Partial ordering relation

-- In this ordering, only assignments to the same node may be compared.

_‚â§‚Çê‚Çö_ : Rel Assignment ‚Ñì
_‚â§‚Çê‚Çö_ = DirectProduct.Pointwise _‚â°_ _‚â§‚Çä_

_‚â§‚Çê‚Çö?_ : Decidable _‚â§‚Çê‚Çö_
_‚â§‚Çê‚Çö?_ = DirectProduct.√ó-decidable Fin._‚âü_ _‚â§‚Çä?_

--------------------------------------------------------------------------------
-- Total ordering relation

-- In this ordering, all assignments may be compared

_‚â§‚Çê‚Çú_ : Rel Assignment ‚Ñì
_‚â§‚Çê‚Çú_ = LexProduct.√ó-Lex _‚â°_ Fin._‚â§_ _‚â§‚Çä_

_<‚Çê‚Çú_ : Rel Assignment ‚Ñì
_<‚Çê‚Çú_ = NonStrictToStrict._<_ _‚âà‚Çê_ _‚â§‚Çê‚Çú_

_‚â§‚Çê‚Çú?_ : Decidable _‚â§‚Çê‚Çú_
_‚â§‚Çê‚Çú?_ = LexProduct.√ó-decidable Fin._‚âü_ Fin._‚â§?_ _‚â§‚Çä?_

_<‚Çê‚Çú?_ : Decidable _<‚Çê‚Çú_
_<‚Çê‚Çú?_ = NonStrictToStrict.<-decidable _ _ _‚âü‚Çê_ _‚â§‚Çê‚Çú?_
