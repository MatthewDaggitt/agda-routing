open import Algebra.FunctionProperties
open import Data.Nat using (‚Ñï; _‚âü_)
open import Data.Nat.Properties
  using (_<?_; <-trans; <-irrefl; <-asym; m+n‚âÆn; m‚â§m+n; <‚áí‚â±; ‚â§-refl; ‚â§-trans)
  renaming (<-cmp to compare)
open import Data.List using (List)
open import Data.Bool as ùîπ using (Bool; _‚àß_; _‚à®_)
open import Data.Product using (_,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Fin using (Fin; to‚Ñï; from‚Ñï‚â§)
open import Data.Sum using (_‚äé_; [_,_]‚Ä≤; inj‚ÇÅ; inj‚ÇÇ)
open import Function using (_‚àò_)
open import Relation.Unary using (Pred)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; sym; trans; subst; cong; cong‚ÇÇ; inspect; [_]; module ‚â°-Reasoning)
open import Relation.Binary using (Minimum; Maximum)
open import Level using () renaming (zero to ‚Ñì‚ÇÄ; suc to lsuc)

import RoutingLib.Relation.Binary.Construct.NaturalOrder.Right as RightNaturalOrder
import RoutingLib.Algebra.Construct.NaturalChoice.Min.TotalOrder as NaturalChoice

open import RoutingLib.Data.Path.Uncertified using (inflate; deflate; length)
open import RoutingLib.Data.Path.Uncertified.Properties
  using (‚àà-deflate‚Åª; ‚áø-deflate‚Å∫; deflate-inflate; deflate-skip; ij‚áøp‚áíi‚â¢j; _‚â§‚Çó‚Çë‚Çì?_; ‚â§‚Çó‚Çë‚Çì-total; ‚â§‚Çó‚Çë‚Çì-antisym)
open import RoutingLib.Data.Path.UncertifiedI hiding (length)
open import RoutingLib.Data.Path.UncertifiedI.Properties

open import RoutingLib.Routing.Algebra
import RoutingLib.Routing.Algebra.Comparable as Comparable

open import RoutingLib.Routing.Protocols.BGPLite
open import RoutingLib.Routing.Protocols.BGPLite.Components.Route
open import RoutingLib.Routing.Protocols.BGPLite.Components.Policy
  using (Policy; apply; reject; apply-result)
open import RoutingLib.Routing.Protocols.BGPLite.Components.Communities

module RoutingLib.Routing.Protocols.BGPLite.Properties where

open module Choice = NaturalChoice ‚â§·µ£-totalOrder

---------------------
-- Routing algebra --
---------------------


{-
‚äï-sel : Selective _‚â°_ _‚äï_
‚äï-sel invalid        invalid        = inj‚ÇÅ refl
‚äï-sel invalid        (valid m ds q) = inj‚ÇÇ refl
‚äï-sel (valid l cs p) invalid        = inj‚ÇÅ refl
‚äï-sel (valid l cs p) (valid m ds q) with compare l m
... | tri< _ _ _ = inj‚ÇÅ refl
... | tri> _ _ _ = inj‚ÇÇ refl
... | tri‚âà _ _ _ with compare (length p) (length q)
...   | tri< _ _ _  = inj‚ÇÅ refl
...   | tri> _ _ _  = inj‚ÇÇ refl
...   | tri‚âà _ _ _  with p ‚â§‚Çó‚Çë‚Çì? q
...     | yes p‚â§q = inj‚ÇÅ refl
...     | no  q‚â§p = inj‚ÇÇ refl

‚äï-comm : ComparablyCommutative _‚â°_ _‚äï_
‚äï-comm {invalid}      {invalid}      x‚âéy = refl
‚äï-comm {invalid}      {valid l cs p} x‚âéy = refl
‚äï-comm {valid l cs p} {invalid}      x‚âéy = refl
‚äï-comm {valid l cs p} {valid k ds q} x‚âéy with compare l k | compare k l
... | tri< _   _ _ | tri> _ _ _   = refl
... | tri< l<k _ _ | tri‚âà _ _ l‚âÆk = contradiction l<k l‚âÆk
... | tri< l<k _ _ | tri< _ _ l‚âÆk = contradiction l<k l‚âÆk
... | tri> _   _ _ | tri< _ _ _   = refl
... | tri> _ _ k<l | tri‚âà k‚âÆl _ _ = contradiction k<l k‚âÆl
... | tri> _ _ k<l | tri> k‚âÆl _ _ = contradiction k<l k‚âÆl
... | tri‚âà _ l‚â°k _ | tri< _ k‚â¢l _ = contradiction (sym l‚â°k) k‚â¢l
... | tri‚âà _ l‚â°k _ | tri> _ k‚â¢l _ = contradiction (sym l‚â°k) k‚â¢l
... | tri‚âà _ l‚â°k _ | tri‚âà _ _ _   with compare (length·µ• p) (length·µ• q) | compare (length·µ• q) (length·µ• p)
...   | tri< _ _ _       | tri> _ _ _       = refl
...   | tri< |p|<|q| _ _ | tri‚âà _ _ |p|‚âÆ|q| = contradiction |p|<|q| |p|‚âÆ|q|
...   | tri< |p|<|q| _ _ | tri< _ _ |p|‚âÆ|q| = contradiction |p|<|q| |p|‚âÆ|q|
...   | tri> _ _ _       | tri< _ _ _       = refl
...   | tri> _ _ |q|<|p| | tri‚âà |q|‚âÆ|p| _ _ = contradiction |q|<|p| |q|‚âÆ|p|
...   | tri> _ _ |q|<|p| | tri> |q|‚âÆ|p| _ _ = contradiction |q|<|p| |q|‚âÆ|p|
...   | tri‚âà _ |p|‚â°|q| _ | tri< _ |q|‚â¢|p| _ = contradiction (sym |p|‚â°|q|) |q|‚â¢|p|
...   | tri‚âà _ |p|‚â°|q| _ | tri> _ |q|‚â¢|p| _ = contradiction (sym |p|‚â°|q|) |q|‚â¢|p|
...   | tri‚âà _ |p|‚â°|q| _ | tri‚âà _ _ _       with p ‚â§‚Çó‚Çë‚Çì? q | q ‚â§‚Çó‚Çë‚Çì? p
...     | yes p‚â§q | yes q‚â§p = contradiction (‚â§‚Çó‚Çë‚Çì-antisym p‚â§q q‚â§p) (‚âé‚áípath‚â¢ l‚â°k x‚âéy)
...     | yes p‚â§q | no  q‚â§p = refl
...     | no  p‚â∞q | yes q‚â§p = refl
...     | no  p‚â∞q | no  q‚â∞p with ‚â§‚Çó‚Çë‚Çì-total p q
...       | inj‚ÇÅ p‚â§q = contradiction p‚â§q p‚â∞q
...       | inj‚ÇÇ q‚â§p = contradiction q‚â§p q‚â∞p
-}

‚äï-identity ≥  : RightIdentity _‚â°_ invalid _‚äï_
‚äï-identity ≥ invalid        = refl
‚äï-identity ≥ (valid l cs p) = refl

{-
‚äï-zero ≥ : RightZero _‚â°_ 0# _‚äï_
‚äï-zero ≥ invalid = refl
‚äï-zero ≥ (valid l cs p) with compare l 0
... | tri< l<0 _ _ = contradiction l<0 Œª()
... | tri> _   _ _ = refl
... | tri‚âà _   _ _ with compare (length p) 0
...   | tri< |p|<0 _ _ = contradiction |p|<0 Œª()
...   | tri> _     _ _ = refl
...   | tri‚âà _     _ _ with p ‚â§‚Çó‚Çë‚Çì? []
...     | yes []‚â§p = {!!}
...     | no  _    = refl
-}

--------------------------------------------------------------------------------
-- The algebra always converges (proved via a simulation with an equivalent but
-- better behaved routing algebra).

open import RoutingLib.Routing.Protocols.BGPLite.Simulation
open import RoutingLib.Routing.VectorBased.Asynchronous.Convergence

Œ¥-alwaysConvergent : AlwaysConvergent A
Œ¥-alwaysConvergent = simulate A‚Çê‚Çó‚Çú-simulates-A A‚Çê‚Çó‚Çú-alwaysConvergent
