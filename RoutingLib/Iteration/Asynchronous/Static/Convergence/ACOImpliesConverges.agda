--------------------------------------------------------------------------
-- A proof that F being an ACO implies that the iteration converges over
-- the initial box. The same result is also derived in
-- `RoutingLib.Iteration.Asynchronous.Static.ToDynamic` by going via
-- dynamic iterations. This version of the proof is included for the
-- JAR 2019 paper submission.
--
-- It's also instructive to compare this with the dynamic proof in
-- `RoutingLib.Iteration.Asynchronous.Dynamic.Convergence.ACOImpliesConvergent`
-- in order to appreciate how the addition of epochs and participants
-- complicate the proofs.
--------------------------------------------------------------------------

open import RoutingLib.Relation.Unary.Indexed

open import RoutingLib.Iteration.Asynchronous.Static
open import RoutingLib.Iteration.Asynchronous.Static.Convergence.Conditions

module RoutingLib.Iteration.Asynchronous.Static.Convergence.ACOImpliesConverges
  {a ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ n}
  (I‚à• : AsyncIterable a ‚Ñì‚ÇÅ n)
  {X‚ÇÄ : IPred _ ‚Ñì‚ÇÇ}
  (aco : PartialACO I‚à• X‚ÇÄ ‚Ñì‚ÇÉ)
  where

open import Data.Fin using (Fin)
open import Data.Fin.Subset using (Subset; ‚ä§)
  renaming (_‚àà_ to _‚àà‚Çõ_; _‚àâ_ to _‚àâ‚Çõ_)
open import Data.Fin.Dec using (_‚àà?_)
open import Data.Maybe using (just; nothing)
open import Data.Nat renaming (_‚âü_ to _‚âü‚Ñï_) hiding (_‚äî_)
open import Data.Nat.Properties hiding (_‚âü_)
open import Data.Product using (‚àÉ; proj‚ÇÇ; proj‚ÇÅ; _,_; _√ó_; map)
open import Function using (id; _‚àò_; _$_)
open import Induction.WellFounded using (Acc; acc)
open import Induction.Nat using (<-wellFounded)
open import Level using (_‚äî_)
open import Relation.Binary using (tri<; tri‚âà; tri>)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; subst; subst‚ÇÇ; cong; cong‚ÇÇ; refl; sym; trans)
open import Relation.Nullary using (yes; no; ¬¨_)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (Pred; _‚äÜ_; _‚àà_)

open import RoutingLib.Relation.Binary.Indexed.Homogeneous
open import RoutingLib.Relation.Unary.Properties
open import RoutingLib.Function
open import RoutingLib.Function.Reasoning

open import RoutingLib.Iteration.Asynchronous.Static.Schedule
import RoutingLib.Iteration.Asynchronous.Static.Schedule.Pseudoperiod
  as Pseudoperiods
import RoutingLib.Iteration.Asynchronous.Static.Convergence.Properties.ACO
  as ACOProperties

open AsyncIterable I‚à•
open PartialACO  aco
open ACOProperties I‚à• aco

------------------------------------------------------------------------
-- Notation

module _ {x : S} (x‚ààX‚ÇÄ : x ‚àà·µ¢ X‚ÇÄ) (œà : Schedule n) where

  open Schedule œà
  open Pseudoperiods œà

  -- Some shorthand notation where the epoch and participant indices are
  -- replaced with a time index.

  Œ¥' : S ‚Üí ‚àÄ {t} ‚Üí Acc _<_ t ‚Üí S
  Œ¥' = asyncIter' I‚à• œà
  
  Œ¥ : S ‚Üí ùïã ‚Üí S
  Œ¥ x t = Œ¥' x (<-wellFounded t)


  -- The concept of being locally safe

  StateOfNode_InBox_AtTime_ : Fin n ‚Üí ‚Ñï ‚Üí ùïã ‚Üí Set ‚Ñì‚ÇÉ
  StateOfNode i InBox k AtTime t = (t‚Çê : Acc _<_ t) ‚Üí Œ¥' x t‚Çê i ‚àà D k i

  StateInBox_AtTime_ : ‚Ñï ‚Üí ùïã ‚Üí Set ‚Ñì‚ÇÉ
  StateInBox k AtTime t = ‚àÄ i ‚Üí StateOfNode i InBox k AtTime t

  MessagesToNode_InBox_AtTime_ : Fin n ‚Üí ‚Ñï ‚Üí ùïã ‚Üí Set ‚Ñì‚ÇÉ
  MessagesToNode i InBox k AtTime t = ‚àÄ {s} ‚Üí t < s ‚Üí ‚àÄ {j} ‚Üí (Œ≤‚Çê : Acc _<_ (Œ≤ s i j)) ‚Üí Œ¥' x Œ≤‚Çê j ‚àà D k j

  MessagesInBox_AtTime_ : ‚Ñï ‚Üí ùïã ‚Üí Set ‚Ñì‚ÇÉ
  MessagesInBox k AtTime t = ‚àÄ i ‚Üí MessagesToNode i InBox k AtTime t

  ComputationInBox_AtTime_ : ‚Ñï ‚Üí ùïã ‚Üí Set ‚Ñì‚ÇÉ
  ComputationInBox k AtTime t = ‚àÄ i ‚Üí MessagesToNode i InBox (k ‚à∏ 1) AtTime t
                                    √ó StateOfNode i InBox k AtTime t

--------------------------------------------------------------------------
-- Actual proofs
--------------------------------------------------------------------------
-- Base case: the asynchronous iteration is always in the initial box

  state‚ààD‚ÇÄ : ‚àÄ t ‚Üí StateInBox 0 AtTime t
  state‚ààD‚ÇÄ zero    i (acc rec) = proj‚ÇÅ X‚ÇÄ‚âãD‚ÇÄ (x‚ààX‚ÇÄ i)
  state‚ààD‚ÇÄ (suc t) i (acc rec) with i ‚àà? Œ± (suc t)
  ... | no  _ = state‚ààD‚ÇÄ t i (rec t _)
  ... | yes _ = F-resp-D‚ÇÄ (Œª j ‚Üí state‚ààD‚ÇÄ (Œ≤ (suc t) i j) j _) i 

  messages‚ààD‚ÇÄ : ‚àÄ t ‚Üí MessagesInBox 0 AtTime t
  messages‚ààD‚ÇÄ t i {s} t<s {j} = state‚ààD‚ÇÄ (Œ≤ s i j) j

  computation‚ààD‚ÇÄ : ‚àÄ t ‚Üí ComputationInBox 0 AtTime t
  computation‚ààD‚ÇÄ t i = messages‚ààD‚ÇÄ t i , state‚ààD‚ÇÄ t i
  
--------------------------------------------------------------------------
-- Preservation: if the asynchronous iteration is in a box, 
-- then it will still be in that box in the future.

  state-stability : ‚àÄ {k s e i} ‚Üí s ‚â§ e ‚Üí
                    MessagesToNode i InBox (k ‚à∏ 1) AtTime s √ó
                    StateOfNode i InBox k AtTime s ‚Üí
                    StateOfNode i InBox k AtTime e
  state-stability {k}     {s} {zero}  {i} z‚â§n   (_ , s‚ààD‚Çñ) = s‚ààD‚Çñ
  state-stability {zero}  {s} {suc e} {i} s‚â§1+e (_ , _) = state‚ààD‚ÇÄ (suc e) i
  state-stability {suc k} {s} {suc e} {i} s‚â§1+e (m‚ààD‚Çñ , s‚ààD‚ÇÅ‚Çä‚Çñ) (acc rec) with <-cmp s (suc e)
  ... | tri‚âà _ refl _      = s‚ààD‚ÇÅ‚Çä‚Çñ (acc rec)
  ... | tri> _ _ s>1+e     = contradiction s‚â§1+e (<‚áí‚â± s>1+e)
  ... | tri< (s‚â§s s‚â§e) _ _ with i ‚àà? Œ± (suc e)
  ...   | no  _ = state-stability s‚â§e (m‚ààD‚Çñ , s‚ààD‚ÇÅ‚Çä‚Çñ) (rec e ‚â§-refl)
  ...   | yes _ = F-mono-D (Œª j ‚Üí m‚ààD‚Çñ (s‚â§s s‚â§e) _) i

  message-stability : ‚àÄ {k s e i} ‚Üí s ‚â§ e ‚Üí
                      MessagesToNode i InBox k AtTime s ‚Üí
                      MessagesToNode i InBox k AtTime e
  message-stability s‚â§e m‚ààb e<t = m‚ààb (<-trans ≥ s‚â§e e<t)

  computation-stability : ‚àÄ {k s e} ‚Üí s ‚â§ e ‚Üí
                          ComputationInBox k AtTime s ‚Üí
                          ComputationInBox k AtTime e
  computation-stability s‚â§e c‚ààD‚Çñ i =
    message-stability s‚â§e (proj‚ÇÅ (c‚ààD‚Çñ i)) , state-stability s‚â§e (c‚ààD‚Çñ i)

--------------------------------------------------------------------------
-- Step: after one pseudoperiod the node is guaranteed to have
-- advanced at least one box

  advance-state : ‚àÄ {s e i k} ‚Üí
                   i IsActiveIn [ s , e ] ‚Üí
                   MessagesToNode i InBox k AtTime s ‚Üí
                   StateOfNode i InBox (suc k) AtTime e
  advance-state {s} {zero}  {i} (mk‚Çê m ()  z‚â§n   i‚ààŒ±‚Çò)
  advance-state {s} {suc e} {i} (mk‚Çê m s<m m‚â§1+e i‚ààŒ±‚Çò) m‚ààD‚Çñ (acc rec‚Çë)
    with i ‚àà? Œ± (suc e)
  ...   | yes _ = F-mono-D (Œª j ‚Üí m‚ààD‚Çñ (‚â§-trans s<m m‚â§1+e) _) i
  ...   | no  i‚àâŒ±‚ÇÅ‚Çä‚Çë with m ‚âü‚Ñï suc e
  ...     | yes refl  = contradiction i‚ààŒ±‚Çò i‚àâŒ±‚ÇÅ‚Çä‚Çë
  ...     | no  m‚â¢1+e = advance-state (mk‚Çê m s<m m‚â§e i‚ààŒ±‚Çò) m‚ààD‚Çñ _
    where m‚â§e = ‚â§-pred (‚â§‚àß‚â¢‚áí< m‚â§1+e m‚â¢1+e)

  advance-messages : ‚àÄ {s e k i} ‚Üí
                     MessagesTo i ExpireIn [ s , e ] ‚Üí
                     ComputationInBox k AtTime s ‚Üí
                     MessagesToNode i InBox k AtTime e
  advance-messages (mk‚Çë _ expiry·µ¢) c‚ààD‚Çñ e<t {j} =
    state-stability (expiry·µ¢ j e<t) (c‚ààD‚Çñ j)

  advance-computation‚ÇÅ : ‚àÄ {s e k} ‚Üí
                         Pseudocycle [ s , e ] ‚Üí
                         ComputationInBox k       AtTime s ‚Üí
                         ComputationInBox (suc k) AtTime e
  advance-computation‚ÇÅ pp c‚ààD‚Çñ i = messages·µâ‚ààD‚Çñ , state·µâ‚ààD‚Çñ‚Çä‚ÇÅ 
    where
    open Pseudocycle pp
    messages·µê‚ààD‚Çñ  = advance-messages (Œ≤[s,m] i) c‚ààD‚Çñ
    messages·µâ‚ààD‚Çñ  = message-stability (mid·µ¢‚â§end i) messages·µê‚ààD‚Çñ
    state·µâ‚ààD‚Çñ‚Çä‚ÇÅ   = advance-state (Œ±[m,e] i) messages·µê‚ààD‚Çñ

  advance-computation‚Çô : ‚àÄ {s e k n} ‚Üí
                         MultiPseudocycle n [ s , e ] ‚Üí
                         ComputationInBox k       AtTime s ‚Üí
                         ComputationInBox (k + n) AtTime e
  advance-computation‚Çô {_} {_} {k} {zero}  none            c‚ààD‚Çñ rewrite +-identity ≥ k = c‚ààD‚Çñ
  advance-computation‚Çô {s} {e} {k} {suc n} (next m pp mpp) c‚ààD‚Çñ = begin‚ü® c‚ààD‚Çñ ‚ü©
    ‚à¥ ComputationInBox k           AtTime s $‚ü® advance-computation‚ÇÅ pp ‚ü©
    ‚à¥ ComputationInBox (suc k)     AtTime m $‚ü® advance-computation‚Çô mpp ‚ü©
    ‚à¥ ComputationInBox (suc k + n) AtTime e $‚ü® subst (ComputationInBox_AtTime e) (sym (+-suc k n)) ‚ü©
    ‚à¥ ComputationInBox (k + suc n) AtTime e ‚àé

--------------------------------------------------------------------------
-- Convergence

  x*-reached : ‚àÄ {s e : ùïã} ‚Üí
               MultiPseudocycle k* [ s , e ] ‚Üí
               ‚àÄ {t : ùïã} ‚Üí e ‚â§ t ‚Üí 
               Œ¥ x t ‚âà x*
  x*-reached {s} {e} mpp {t} e‚â§t = begin‚ü® computation‚ààD‚ÇÄ s ‚ü©
    ‚à¥ ComputationInBox 0  AtTime s $‚ü® advance-computation‚Çô mpp ‚ü©
    ‚à¥ ComputationInBox k* AtTime e $‚ü® state-stability e‚â§t ‚àò_ ‚ü©
    ‚à¥ StateInBox k* AtTime t       $‚ü® (Œª prf i ‚Üí prf i (<-wellFounded t)) ‚ü©
    ‚à¥ Œ¥ x t ‚àà·µ¢ D k*                $‚ü® x‚ààD[k*]‚áíx‚âàx* ‚ü©
    ‚à¥ Œ¥ x t ‚âà x*                   ‚àé

convergent : PartiallyConverges I‚à• X‚ÇÄ 
convergent = record
  { x*         = x*
  ; k*         = k*
  ; x*-fixed   = x*-fixed
  ; x*-reached = x*-reached
  }
