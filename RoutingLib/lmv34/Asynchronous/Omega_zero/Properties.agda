open import RoutingLib.Routing.Algebra using (RawRoutingAlgebra)
open import RoutingLib.Routing.Prelude as RoutingPrelude using () renaming (AdjacencyMatrix to AdjacencyMatrix')

module RoutingLib.lmv34.Asynchronous.Omega_zero.Properties
  {a b ‚Ñì} (algebra : RawRoutingAlgebra a b ‚Ñì)
  {n} (A : AdjacencyMatrix' algebra n)
  where

open import Data.Fin using (Fin)
open import Data.Fin.Subset using (‚ä§; ‚ä•)
open import Data.Fin.Subset.Properties using (_‚àà?_; ‚àà‚ä§; ‚àâ‚ä•)
open import Data.Nat using (zero; suc; _<_; s‚â§s)
open import Data.Nat.Induction using (<-wellFounded)
open import Data.Nat.Properties using (‚â§-refl)
open import Function using (const)
open import Induction.WellFounded using (Acc; acc)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)
open import Relation.Binary.Indexed.Homogeneous using (IndexedDecSetoid)
import Relation.Binary.Reasoning.Setoid as EqReasoning
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)

open import RoutingLib.Iteration.Asynchronous.Static using (AsyncIterable; asyncIter'; asyncIter)
open import RoutingLib.Iteration.Asynchronous.Static.Schedule using (Schedule)
open import RoutingLib.Iteration.Asynchronous.Static.Schedule.Construct.Synchronous using (œàÀ¢ ∏‚Åø·∂ú; Œ±À¢ ∏‚Åø·∂ú)
open import RoutingLib.Iteration.Synchronous using (_^_)
open import RoutingLib.lmv34.Asynchronous.Omega_zero algebra A
open import RoutingLib.lmv34.Asynchronous.Omega_zero.Algebra algebra A
open import RoutingLib.lmv34.Synchronous.Gamma_zero algebra A using (Œì‚ÇÄ)
open import RoutingLib.lmv34.Synchronous.Gamma_zero.Properties algebra A using (Œì‚ÇÄ-cong; ‚®Å-cong; ‚äï‚Çò-cong)

open RawRoutingAlgebra algebra using (‚ñ∑-cong; ‚âà-refl)
open RoutingPrelude algebra n using (RoutingMatrix; RoutingTable; ‚âà‚Çò-refl; _‚âà‚Çú_; ‚ÑùùïÑ‚Çõ; Dec‚ÑùùïÑ‚Çõ‚Å±) renaming (_‚âà‚Çò_ to infix 4 _‚âà‚Çò_)
open IndexedDecSetoid Dec‚ÑùùïÑ‚Çõ‚Å± using () renaming (isDecEquivalence·µ¢ to ‚ÑùùïÑ-isDecEquivalence·µ¢)

--------------------------------------------------------------------------------
-- Operation properties

[,]-‚ä§ : ‚àÄ {X Y : RoutingMatrix} ‚Üí [ X , Y ] ‚ä§ ‚âà‚Çò X
[,]-‚ä§ {X} {Y} i j with i ‚àà? ‚ä§
... | no  i‚àâ‚ä§ = contradiction ‚àà‚ä§ i‚àâ‚ä§
... | yes _   = ‚âà-refl

[,]-‚ä• : ‚àÄ {X Y : RoutingMatrix} ‚Üí [ X , Y ] ‚ä• ‚âà‚Çò Y
[,]-‚ä• {X} {Y} i j with i ‚àà? ‚ä•
... | no  _   = ‚âà-refl
... | yes i‚àà‚ä• = contradiction i‚àà‚ä• ‚àâ‚ä•

[,]-‚ä§·µ¢ : ‚àÄ {A : Fin n ‚Üí Set a} ‚Üí ‚àÄ {X Y : Vector·µ¢ A} ‚Üí ‚àÄ i ‚Üí ([ X , Y ] ‚ä§) i ‚â° X i
[,]-‚ä§·µ¢ {A} {X} {Y} i with i ‚àà? ‚ä§
... | no  i‚àâ‚ä§ = contradiction ‚àà‚ä§ i‚àâ‚ä§
... | yes _   = refl

[,]-‚ä•·µ¢ : ‚àÄ {A : Fin n ‚Üí Set a} ‚Üí ‚àÄ {X Y : Vector·µ¢ A} ‚Üí ‚àÄ i ‚Üí ([ X , Y ] ‚ä•) i ‚â° Y i
[,]-‚ä•·µ¢ {A} {X} {Y} i with i ‚àà? ‚ä•
... | no  _   = refl
... | yes i‚àà‚ä• = contradiction i‚àà‚ä• ‚àâ‚ä•

‚ù™‚ù´-cong : ‚àÄ {X X'} ‚Üí (‚àÄ i ‚Üí X i ‚âà‚Çò X' i) ‚Üí A ‚ù™ X ‚ù´ ‚âà‚Çò A ‚ù™ X' ‚ù´
‚ù™‚ù´-cong X=X' i j = ‚®Å-cong (Œª {k} ‚Üí ‚ñ∑-cong (A i k) (X=X' i k j))

Œì‚ÇÄ'-cong : ‚àÄ {X X'} ‚Üí (‚àÄ i ‚Üí X i ‚âà‚Çò X' i) ‚Üí Œì‚ÇÄ' X ‚âà‚Çò Œì‚ÇÄ' X'
Œì‚ÇÄ'-cong X=X' = ‚äï‚Çò-cong (‚ù™‚ù´-cong X=X') ‚âà‚Çò-refl

--------------------------------------------------------------------------------
-- Proof that Œ©‚ÇÄ is equivalent to a definition using asyncIter

Œì‚ÇÄ‚à• : AsyncIterable a ‚Ñì n
Œì‚ÇÄ‚à• = record
  { S·µ¢   = const RoutingTable
  ; _‚âà·µ¢_ = _‚âà‚Çú_
  ; F    = Œì‚ÇÄ
  ; isAsyncIterable = record
    { isDecEquivalence·µ¢ = ‚ÑùùïÑ-isDecEquivalence·µ¢
    ; F-cong = Œì‚ÇÄ-cong
    }
  }

module _ (œà : Schedule n) where
  open Schedule œà

  Œ©‚ÇÄ'-asyncIter' : ‚àÄ X {t} (acc‚Çú : Acc _<_ t) ‚Üí Œ©‚ÇÄ' œà X acc‚Çú ‚âà‚Çò (asyncIter' Œì‚ÇÄ‚à•) œà X acc‚Çú
  Œ©‚ÇÄ'-asyncIter' X {zero}  _         = ‚âà‚Çò-refl
  Œ©‚ÇÄ'-asyncIter' X {suc t} (acc rec) i with i ‚àà? Œ± (suc t)
  ... | no  _ = Œ©‚ÇÄ'-asyncIter' X (rec t ‚â§-refl) i
  ... | yes _ = Œì‚ÇÄ'-cong (Œª i q j ‚Üí Œ©‚ÇÄ'-asyncIter' X (rec (Œ≤ (suc t) i q) (s‚â§s (Œ≤-causality t i q))) q j) i
  
Œ©‚ÇÄ-asyncIter : ‚àÄ œà X t ‚Üí Œ©‚ÇÄ œà X t ‚âà‚Çò (asyncIter Œì‚ÇÄ‚à•) œà X t
Œ©‚ÇÄ-asyncIter œà X t = Œ©‚ÇÄ'-asyncIter' œà X (<-wellFounded t)

--------------------------------------------------------------------------------
-- Proof that Œì‚ÇÄ is indeed the synchronous version of Œ©‚ÇÄ

Œ©‚ÇÄÀ¢ ∏‚Åø·∂ú=Œì‚ÇÄ' : ‚àÄ X {t} (acc‚Çú : Acc _<_ t) ‚Üí Œ©‚ÇÄ' œàÀ¢ ∏‚Åø·∂ú X acc‚Çú ‚âà‚Çò (Œì‚ÇÄ ^ t) X
Œ©‚ÇÄÀ¢ ∏‚Åø·∂ú=Œì‚ÇÄ' X {zero}  _         = ‚âà‚Çò-refl
Œ©‚ÇÄÀ¢ ∏‚Åø·∂ú=Œì‚ÇÄ' X {suc t} (acc rec) = begin
  Œ©‚ÇÄ' œàÀ¢ ∏‚Åø·∂ú X (acc rec)            ‚â°‚ü®‚ü©
  [ Œì‚ÇÄ X[t] , X[t] ] Œ±À¢ ∏‚Åø·∂ú (suc t) ‚â°‚ü®‚ü©
  [ Œì‚ÇÄ X[t] , X[t] ] ‚ä§             ‚âà‚ü® [,]-‚ä§ ‚ü©
  Œì‚ÇÄ X[t]                          ‚âà‚ü® Œì‚ÇÄ-cong (Œ©‚ÇÄÀ¢ ∏‚Åø·∂ú=Œì‚ÇÄ' X (rec t ‚â§-refl)) ‚ü©
  (Œì‚ÇÄ ^ (suc t)) X                 ‚àé
  where open EqReasoning ‚ÑùùïÑ‚Çõ
        X[t] : RoutingMatrix
        X[t] = Œ©‚ÇÄ' œàÀ¢ ∏‚Åø·∂ú X (rec t ‚â§-refl)

Œ©‚ÇÄÀ¢ ∏‚Åø·∂ú=Œì‚ÇÄ : ‚àÄ X t ‚Üí Œ©‚ÇÄ œàÀ¢ ∏‚Åø·∂ú X t ‚âà‚Çò (Œì‚ÇÄ ^ t) X
Œ©‚ÇÄÀ¢ ∏‚Åø·∂ú=Œì‚ÇÄ X t = Œ©‚ÇÄÀ¢ ∏‚Åø·∂ú=Œì‚ÇÄ' X (<-wellFounded t)
