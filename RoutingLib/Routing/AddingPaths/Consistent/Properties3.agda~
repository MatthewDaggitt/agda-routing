open import Level using (_⊔_)
open import Data.Nat using (ℕ; suc; zero)
open import Data.Nat.Properties using (1+n≰n)
open import Data.Sum using (inj₁; inj₂)
open import Relation.Nullary using (¬_; yes; no)
open import Data.Product using (_×_; _,_; proj₁)
open import Data.Fin using (Fin) renaming (zero to fzero; suc to fsuc)
open import Data.Fin.Properties using () renaming (_≟_ to _≟ᶠ_)
open import Data.Maybe using (just; nothing)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (Decidable; Rel; IsDecEquivalence; Transitive)
open import Relation.Binary.PropositionalEquality using (_≡_; _≢_; subst) renaming (refl to ≡-refl; sym to ≡-sym; trans to ≡-trans)
open import Algebra.FunctionProperties using (Op₂; Associative; Commutative; RightIdentity; RightZero)
open import Function using (id; _∘_)

open import RoutingLib.Algebra.FunctionProperties using (Selective; _×-Preserves_)
open import RoutingLib.Routing.Definitions
open import RoutingLib.Data.Graph using (Graph; _ᵉ∈ᵍ_; _ᵉ∈ᵍ?_)
open import RoutingLib.Data.Graph.EGPath using (EGPath; [_]; _∷_∣_∣_; _≤ₗ_; _≤ₚ_; _≈ₚ_; _≉ₚ_; source; destination; allPaths)
open import RoutingLib.Data.Graph.EGPath.Properties

module RoutingLib.Routing.AddingPaths.Consistent.Properties3
  {a b ℓ} (ra : RoutingAlgebra a b ℓ) 
  (⊕-sel : Selective (RoutingAlgebra._≈_ ra) (RoutingAlgebra._⊕_ ra))
  (one : (RoutingAlgebra.Route ra))
  {n-1 : ℕ}
  (G : Graph (RoutingAlgebra.Step ra) (suc n-1))
  where

  open RoutingAlgebra ra
  open import RoutingLib.Routing.AddingPaths.Consistent2 ra ⊕-sel one G
  open import RoutingLib.Algebra.Selectivity.Properties _≈_ _⊕_ ⊕-sel using (selection; sel₁; sel₂; sel≈; SelCase)
  open import RoutingLib.Algebra.Selectivity.NaturalOrders ≈-setoid _⊕_ ⊕-pres-≈ using (_≤ᵣ_; ≤ᵣ-trans; ≤ᵣ⇨≤ₗ; ≤ₗ⇨≤ᵣ)


  abstract

    -------------------
    -- ⊕ᶜ properties --
    -------------------
 {- 
    -- ≤ₗₚ
  
    open import RoutingLib.Relation.Binary.PreorderLex (_≤ₗ_ {G = G}) _≤ₚ_ using (×-trans)

    ≤ₗₚ-trans : Transitive _≤ₗₚ_
    ≤ₗₚ-trans = ×-trans ≤ₗ-trans ≤ₚ-trans

  
    -- ⊕ᵖ
  
    open import RoutingLib.Algebra.Selectivity.NaturalChoice ≤ₗₚ-total as NC using () renaming (comm to ass⇨⊕ᵖ-comm; assoc to ass⇨⊕ᵖ-assoc) public

    ⊕ᵖ-sel : Selective _≈ₚ_ _⊕ᵖ_
    ⊕ᵖ-sel = ass⇨⊕ᵖ-sel _≈ₚ_ ≈ₚ-refl

    ⊕ᵖ-comm : Commutative _≈ₚ_ _⊕ᵖ_
    ⊕ᵖ-comm = ass⇨⊕ᵖ-comm _≈ₚ_ ≈ₚ-refl ≤ₗₚ-antisym

    ⊕ᵖ-assoc : Associative _≈ₚ_ _⊕ᵖ_
    ⊕ᵖ-assoc = ass⇨⊕ᵖ-assoc _≈ₚ_ ≈ₚ-refl ≤ₗₚ-antisym ≤ₗₚ-trans


    -- ⊕ʳᵖ

    open import RoutingLib.Algebra.Selectivity.LexProduct _≈_ ≈-isDecEquivalence _⊕_ ⊕-sel _⊕ᵖ_ as Lex using () renaming (comm to ass⇨⊕ʳᵖ-comm; assoc to ass⇨⊕ʳᵖ-assoc; select to selectʳ)

    ⊕ʳᵖ-sel : Selective _≈ʳᵖ_ _⊕ʳᵖ_
    ⊕ʳᵖ-sel = ass⇨⊕ʳᵖ-sel _≈ₚ_ ≈ₚ-refl ⊕ᵖ-sel

    ⊕ʳᵖ-comm : Commutative _≈_ _⊕_ → Commutative _≈ʳᵖ_ _⊕ʳᵖ_
    ⊕ʳᵖ-comm comm = ass⇨⊕ʳᵖ-comm _≈ₚ_ comm ≈ₚ-refl ⊕ᵖ-comm

    ⊕ʳᵖ-assoc : Commutative _≈_ _⊕_ → Associative _≈_ _⊕_ → Associative _≈ʳᵖ_ _⊕ʳᵖ_
    ⊕ʳᵖ-assoc comm assoc = ass⇨⊕ʳᵖ-assoc _≈ₚ_ comm ⊕-pres-≈ assoc ≈ₚ-refl ⊕ᵖ-assoc 


    -- ⊕ⁿⁿ

    open import RoutingLib.Algebra.Selectivity.Lifting _≈ʳᵖ_ _⊕ʳᵖ_ ⊕ʳᵖ-sel NNCRoute.xp using (module Properties)
    open Properties _≈ⁿⁿ_ id using () renaming (app to lift-app; sel to lift-sel; comm to lift-comm; assoc to lift-assoc)

    ⊕ⁿⁿ-sel : Selective _≈ⁿⁿ_ _⊕ⁿⁿ_
    ⊕ⁿⁿ-sel = lift-sel ≈ʳᵖ-refl

    ⊕ⁿⁿ-comm : Commutative _≈_ _⊕_ → Commutative _≈ⁿⁿ_ _⊕ⁿⁿ_
    ⊕ⁿⁿ-comm comm = lift-comm ≈ʳᵖ-refl ≈ʳᵖ-sym ≈ʳᵖ-trans (⊕ʳᵖ-comm comm)
  
    ⊕ⁿⁿ-assoc : Commutative _≈_ _⊕_ → Associative _≈_ _⊕_ → Associative _≈ⁿⁿ_ _⊕ⁿⁿ_
    ⊕ⁿⁿ-assoc comm assoc = lift-assoc ≈ʳᵖ-refl ≈ʳᵖ-sym ≈ʳᵖ-trans ⊕ʳᵖ-pres-≈ʳᵖ (⊕ʳᵖ-assoc comm assoc)


    -- ⊕ᶜ

    open BiIdentity _⊕ⁿⁿ_ renaming (⊕ₑ-sel to ass⇨⊕ᶜ-sel; ⊕ₑ-comm to ass⇨⊕ᶜ-comm; ⊕ₑ-assoc to ass⇨⊕ᶜ-assoc)

    ⊕ᶜ-sel : Selective _≈ᶜ_ _⊕ᶜ_
    ⊕ᶜ-sel = ass⇨⊕ᶜ-sel (λ {x} → ≈ⁿⁿ-refl {x}) ⊕ⁿⁿ-sel

    ⊕ᶜ-comm : Commutative _≈_ _⊕_ → Commutative _≈ᶜ_ _⊕ᶜ_
    ⊕ᶜ-comm comm = ass⇨⊕ᶜ-comm (λ {x} → ≈ⁿⁿ-refl {x}) (⊕ⁿⁿ-comm comm)

-}

    ⊕ᶜ-assoc : Commutative _≈_ _⊕_ → Associative _≈_ _⊕_ → Associative _≈ᶜ_ _⊕ᶜ_
    ⊕ᶜ-assoc comm assoc cnull          cnull          cnull          = ≈ᶜ-refl
    ⊕ᶜ-assoc comm assoc cnull          cnull          (croute _ _ _) = ≈ᶜ-refl
    ⊕ᶜ-assoc comm assoc cnull          (croute _ _ _) cnull          = ≈ᶜ-refl
    ⊕ᶜ-assoc comm assoc cnull          (croute _ _ _) (croute _ _ _) = ≈ᶜ-refl
    ⊕ᶜ-assoc comm assoc (croute _ _ _) cnull          cnull          = ≈ᶜ-refl
    ⊕ᶜ-assoc comm assoc (croute _ _ _) cnull          (croute _ _ _) = ≈ᶜ-refl
    ⊕ᶜ-assoc comm assoc (croute x p _) (croute y q _) cnull          with select x y
    ... | sel₁ _ _ = ≈ᶜ-refl
    ... | sel₂ _ _ = ≈ᶜ-refl
    ... | sel≈ _ _ with p ≤ₚ? q
    ...   | yes _ = ≈ᶜ-refl
    ...   | no  _ = ≈ᶜ-refl
    ⊕ᶜ-assoc comm assoc (croute x p x≈w[p]) (croute y q y≈w[q]) (croute z r z≈w[r]) = res

      where

      res : (croute x p x≈w[p] ⊕ᶜ croute y q y≈w[q]) ⊕ᶜ croute z r z≈w[r] ≈ᶜ croute x p x≈w[p] ⊕ᶜ (croute y q y≈w[q] ⊕ᶜ croute z r z≈w[r])
      res with select x y | select y z
      res | sel₁ _   _   | sel₁ _   _   with select x y | select x z 
      res | sel₁ _   _   | sel₁ _   _   | sel₁ _   _   | sel₁ _   _   = ≈ᶜ-refl
      res | sel₁ x≤y _   | sel₁ _   z≰y | sel₁ _   _   | sel₂ _   z≤x = contradiction (≤ᵣ-trans assoc z≤x (≤ₗ⇨≤ᵣ comm x≤y)) z≰y
      res | sel₁ x≤y _   | sel₁ _   z≰y | sel₁ _   _   | sel≈ _   z≤x = contradiction (≤ᵣ-trans assoc z≤x (≤ₗ⇨≤ᵣ comm x≤y)) z≰y
      res | sel₁ x≤y _   | sel₁ _   _   | sel₂ x≰y _   | _            = contradiction x≤y x≰y
      res | sel₁ _   y≰x | sel₁ _   _   | sel≈ _   y≤x | _            = contradiction y≤x y≰x
      res | sel₁ _   _   | sel₂ _   _   = ≈ᶜ-refl
      res | sel₁ _   _   | sel≈ _   _   with q ≤ₚ? r
      res | sel₁ _   _   | sel≈ _   _   | yes _        with select x y | select x z
      res | sel₁ _   _   | sel≈ _   _   | yes _        | sel₁ _   _   | sel₁ _   _   = ≈ᶜ-refl
      res | sel₁ x≤y _   | sel≈ y≤z _   | yes _        | sel₁ _   _   | sel₂ x≰z _   = contradiction (≤ᵣ⇨≤ₗ comm (≤ᵣ-trans assoc (≤ₗ⇨≤ᵣ comm x≤y) (≤ₗ⇨≤ᵣ comm y≤z))) x≰z
      res | sel₁ _   y≰x | sel≈ y≤z _   | yes _        | sel₁ _   _   | sel≈ _   z≤x = contradiction (≤ᵣ-trans assoc (≤ₗ⇨≤ᵣ comm y≤z) z≤x) y≰x
      res | sel₁ x≤y _   | sel≈ _   _   | yes _        | sel₂ x≰y _   | _            = contradiction x≤y x≰y
      res | sel₁ _   y≰x | sel≈ _   _   | yes _        | sel≈ _   y≤x | _            = contradiction y≤x y≰x
      res | sel₁ _   _   | sel≈ _   _   | no  _        = ≈ᶜ-refl
      res | sel₂ _   _   | sel₁ _   _   with select x y | select y z
      res | sel₂ _   y≤x | sel₁ _   _   | sel₁ _   y≰x | _            = contradiction y≤x y≰x
      res | sel₂ _   _   | sel₁ _   _   | sel₂ _   _   | sel₁ _   _   = ≈ᶜ-refl
      res | sel₂ x≰y _   | sel₁ _   _   | sel≈ x≤y _   | _            = contradiction x≤y x≰y
      res | sel₂ _   _   | sel₁ y≤z _   | _            | sel₂ y≰z _   = contradiction y≤z y≰z
      res | sel₂ _   _   | sel₁ _   z≰y | _            | sel≈ _   z≤y = contradiction z≤y z≰y
      res | sel₂ _   _   | sel₂ _   _   with select x z | select y z
      res | sel₂ _   _   | sel₂ _   z≤y | _            | sel₁ _   z≰y = contradiction z≤y z≰y
      res | sel₂ x≰y _   | sel₂ _   z≤y | sel₁ x≤z _   | sel₂ _   _   = contradiction (≤ᵣ⇨≤ₗ comm (≤ᵣ-trans assoc (≤ₗ⇨≤ᵣ comm x≤z) z≤y)) x≰y
      res | sel₂ _   _   | sel₂ _   _   | sel₂ _   _   | sel₂ _   _   = ≈ᶜ-refl
      res | sel₂ x≰y _   | sel₂ _   z≤y | sel≈ x≤z _   | sel₂ _   _   = contradiction (≤ᵣ⇨≤ₗ comm (≤ᵣ-trans assoc (≤ₗ⇨≤ᵣ comm x≤z) z≤y)) x≰y
      res | sel₂ _   _   | sel₂ y≰z _   | _            | sel≈ y≤z _   = contradiction y≤z y≰z
      res | sel₂ _   _   | sel≈ _   _   with q ≤ₚ? r
      res | sel₂ _   _   | sel≈ _   _   | yes _        with select x y | select y z
      res | sel₂ _   y≤x | sel≈ _   _   | yes _        | sel₁ _   y≰x | _            = contradiction y≤x y≰x
      res | sel₂ _   _   | sel≈ _   z≤y | yes _        | _            | sel₁ _   z≰y = contradiction z≤y z≰y
      res | sel₂ _   _   | sel≈ y≤z _   | yes _        | _            | sel₂ y≰z _   = contradiction y≤z y≰z
      res | sel₂ _   _   | sel≈ _   _   | yes _        | sel₂ _   _   | sel≈ _   _   with q ≤ₚ? r
      res | sel₂ _   _   | sel≈ _   _   | yes _        | sel₂ _   _   | sel≈ _   _   | yes _        = ≈ᶜ-refl
      res | sel₂ _   _   | sel≈ _   _   | yes q≤r      | sel₂ _   _   | sel≈ _   _   | no  q≰r      = contradiction q≤r q≰r
      res | sel₂ x≰y _   | sel≈ _   _   | yes _        | sel≈ x≤y _   | _            = contradiction x≤y x≰y
      res | sel₂ _   _   | sel≈ _   _   | no  _        with select x z | select y z
      res | sel₂ _   _   | sel≈ _   z≤y | no  _        | _            | sel₁ _   z≰y = contradiction z≤y z≰y
      res | sel₂ _   _   | sel≈ y≤z _   | no  _        | _            | sel₂ y≰z _   = contradiction y≤z y≰z
      res | sel₂ x≰y _   | sel≈ _   z≤y | no  _        | sel₁ x≤z _   | sel≈ _   _   = contradiction (≤ᵣ⇨≤ₗ comm (≤ᵣ-trans assoc (≤ₗ⇨≤ᵣ comm x≤z) z≤y)) x≰y
      res | sel₂ _   _   | sel≈ _   _   | no  _        | sel₂ _   _   | sel≈ _   _   with q ≤ₚ? r
      res | sel₂ _   _   | sel≈ _   _   | no  q≰r      | sel₂ _   _   | sel≈ _   _   | yes q≤r      = contradiction q≤r q≰r
      res | sel₂ _   _   | sel≈ _   _   | no  _        | sel₂ _   _   | sel≈ _   _   | no  _        = ≈ᶜ-refl
      res | sel₂ x≰y _   | sel≈ _   z≤y | no  _        | sel≈ x≤z _   | sel≈ _   _   = contradiction (≤ᵣ⇨≤ₗ comm (≤ᵣ-trans assoc (≤ₗ⇨≤ᵣ comm x≤z) z≤y)) x≰y
      res | sel≈ _   _   | sel₁ _   _   with p ≤ₚ? q
      res | sel≈ _   _   | sel₁ _   _   | yes _        with select x y | select x z
      res | sel≈ _   y≤x | sel₁ _   _   | yes _        | sel₁ _   y≰x | _            = contradiction y≤x y≰x  
      res | sel≈ x≤y _   | sel₁ _   _   | yes _        | sel₂ x≰y _   | _            = contradiction x≤y x≰y
      res | sel≈ _   _   | sel₁ _   _   | yes _        | sel≈ _   _   | sel₁ _   _   with p ≤ₚ? q 
      res | sel≈ _   _   | sel₁ _   _   | yes _        | sel≈ _   _   | sel₁ _   _   | yes _         = ≈ᶜ-refl
      res | sel≈ _   _   | sel₁ _   _   | yes p≤q      | sel≈ _   _   | sel₁ _   _   | no  p≰q       = contradiction p≤q p≰q
      res | sel≈ x≤y _   | sel₁ _   z≰y | yes _        | sel≈ _   _   | sel₂ _   z≤x = contradiction (≤ᵣ-trans assoc z≤x (≤ₗ⇨≤ᵣ comm x≤y)) z≰y 
      res | sel≈ x≤y _   | sel₁ _   z≰y | yes _        | sel≈ _   _   | sel≈ _   z≤x = contradiction (≤ᵣ-trans assoc z≤x (≤ₗ⇨≤ᵣ comm x≤y)) z≰y  
      res | sel≈ _   _   | sel₁ _   _   | no  _        with select x y | select y z
      res | sel≈ _   y≤x | sel₁ _   _   | no  _        | sel₁ _   y≰x | _            = contradiction y≤x y≰x
      res | sel≈ x≤y _   | sel₁ _   _   | no  _        | sel₂ x≰y _   | _            = contradiction x≤y x≰y
      res | sel≈ _   _   | sel₁ _   _   | no  _        | sel≈ _   _   | sel₁ _   _   with p ≤ₚ? q
      res | sel≈ _   _   | sel₁ _   _   | no  p≰q      | sel≈ _   _   | sel₁ _   _   | yes p≤q      = contradiction p≤q p≰q
      res | sel≈ _   _   | sel₁ _   _   | no  _        | sel≈ _   _   | sel₁ _   _   | no  _        = ≈ᶜ-refl
      res | sel≈ _   _   | sel₁ x≤y _   | no  _        | _            | sel₂ x≰y _   = contradiction x≤y x≰y
      res | sel≈ _   _   | sel₁ _   y≰x | no  _        | _            | sel≈ _   y≤x = contradiction y≤x y≰x
      res | sel≈ _   _   | sel₂ _   _   with p ≤ₚ? q
      res | sel≈ _   _   | sel₂ _   _   | yes _        = ≈ᶜ-refl
      res | sel≈ _   _   | sel₂ _   _   | no  _        with select x z | select y z 
      res | sel≈ _   _   | sel₂ _   z≤y | no  _        | _            | sel₁ _   z≰y = contradiction z≤y z≰y
      res | sel≈ _   y≤x | sel₂ y≰z _   | no  _        | sel₁ x≤z _   | sel₂ _   _   = contradiction (≤ᵣ⇨≤ₗ comm (≤ᵣ-trans assoc y≤x (≤ₗ⇨≤ᵣ comm x≤z))) y≰z
      res | sel≈ _   _   | sel₂ _   _   | no  _        | sel₂ _   _   | sel₂ _   _   = ≈ᶜ-refl
      res | sel≈ _   y≤x | sel₂ y≰z _   | no  _        | sel≈ x≤z _   | sel₂ _   _   = contradiction (≤ᵣ⇨≤ₗ comm (≤ᵣ-trans assoc y≤x (≤ₗ⇨≤ᵣ comm x≤z))) y≰z
      res | sel≈ _   _   | sel₂ y≰z _   | no  _        | _            | sel≈ y≤z _   = contradiction y≤z y≰z
      res | sel≈ _   _   | sel≈ _   _   with p ≤ₚ? q | q ≤ₚ? r
      res | sel≈ _   _   | sel≈ _   _   | yes _        | yes _        with select x y | select x z 
      res | sel≈ _   y≤x | sel≈ _   _   | yes _        | yes _        | sel₁ _   y≰x | _            = contradiction y≤x y≰x
      res | sel≈ x≤y _   | sel≈ _   _   | yes _        | yes _        | sel₂ x≰y _   | _            = contradiction x≤y x≰y
      res | sel≈ _   y≤x | sel≈ _   z≤y | yes _        | yes _        | sel≈ _   _   | sel₁ _   z≰x = contradiction (≤ᵣ-trans assoc z≤y y≤x) z≰x
      res | sel≈ x≤y _   | sel≈ y≤z _   | yes _        | yes _        | sel≈ _   _   | sel₂ x≰z _   = contradiction (≤ᵣ⇨≤ₗ comm (≤ᵣ-trans assoc (≤ₗ⇨≤ᵣ comm x≤y) (≤ₗ⇨≤ᵣ comm y≤z))) x≰z
      res | sel≈ _   _   | sel≈ _   _   | yes _        | yes _        | sel≈ _   _   | sel≈ _   _   with p ≤ₚ? q | p ≤ₚ? r
      res | sel≈ _   _   | sel≈ _   _   | yes _        | yes _        | sel≈ _   _   | sel≈ _   _   | yes _       | yes _      = ≈ᶜ-refl
      res | sel≈ _   _   | sel≈ _   _   | yes p≤q      | yes q≤r      | sel≈ _   _   | sel≈ _   _   | yes _       | no  p≰r    = contradiction (≤ₚ-trans p≤q q≤r) p≰r
      res | sel≈ _   _   | sel≈ _   _   | yes p≤q      | yes _        | sel≈ _   _   | sel≈ _   _   | no  p≰q     | _          = contradiction p≤q p≰q
      res | sel≈ _   _   | sel≈ _   _   | yes _        | no  _        = ≈ᶜ-refl
      res | sel≈ _   _   | sel≈ _   _   | no  _        | yes _        with select x y | select y z
      res | sel≈ _   y≤x | sel≈ _   _   | no  _        | yes _        | sel₁ _   y≰x | _            = contradiction y≤x y≰x
      res | sel≈ x≤y _   | sel≈ _   _   | no  _        | yes _        | sel₂ x≰y _   | _            = contradiction x≤y x≰y
      res | sel≈ _   _   | sel≈ _   z≤y | no  _        | yes _        | _            | sel₁ _   z≰y = contradiction z≤y z≰y
      res | sel≈ _   _   | sel≈ y≤z _   | no  _        | yes _        | _            | sel₂ y≰z _   = contradiction y≤z y≰z
      res | sel≈ _   _   | sel≈ _   _   | no  _        | yes _        | sel≈ _   _   | sel≈ _   _   with p ≤ₚ? q | q ≤ₚ? r 
      res | sel≈ _   _   | sel≈ _   _   | no  p≰q      | yes _        | sel≈ _   _   | sel≈ _   _   | yes p≤q     | _          = contradiction p≤q p≰q
      res | sel≈ _   _   | sel≈ _   _   | no  _        | yes q≤r      | sel≈ _   _   | sel≈ _   _   | _           | no  q≰r    = contradiction q≤r q≰r
      res | sel≈ _   _   | sel≈ _   _   | no  _        | yes _        | sel≈ _   _   | sel≈ _   _   | no  _       | yes _      = ≈ᶜ-refl
      res | sel≈ _   _   | sel≈ _   _   | no  _        | no  _        with select x z | select y z
      res | sel≈ _   _   | sel≈ _   z≤y | no  _        | no  _        | _            | sel₁ _   z≰y = contradiction z≤y z≰y
      res | sel≈ _   _   | sel≈ y≤z _   | no  _        | no  _        | _            | sel₂ y≰z _   = contradiction y≤z y≰z
      res | sel≈ _   y≤x | sel≈ _   z≤y | no  _        | no  _        | sel₁ _   z≰x | sel≈ _   _   = contradiction (≤ᵣ-trans assoc z≤y y≤x) z≰x
      res | sel≈ x≤y _   | sel≈ y≤z _   | no  _        | no  _        | sel₂ x≰z _   | sel≈ _   _   = contradiction (≤ᵣ⇨≤ₗ comm (≤ᵣ-trans assoc (≤ₗ⇨≤ᵣ comm x≤y) (≤ₗ⇨≤ᵣ comm y≤z))) x≰z
      res | sel≈ _   _   | sel≈ _   _   | no  _        | no  _        | sel≈ _   _   | sel≈ _   _   with p ≤ₚ? r | q ≤ₚ? r
      res | sel≈ _   _   | sel≈ _   _   | no  _        | no  q≰r      | sel≈ _   _   | sel≈ _   _   | _           | yes q≤r    = contradiction q≤r q≰r
      res | sel≈ _   _   | sel≈ _   _   | no  _        | no  _        | sel≈ _   _   | sel≈ _   _   | no  _       | no  _      = ≈ᶜ-refl
      res | sel≈ _   _   | sel≈ _   _   | no  _        | no  _        | sel≈ _   _   | sel≈ _   _   | yes _       | no  _      with ≤ₚ-total p q
      res | sel≈ _   _   | sel≈ _   _   | no  p≰q      | no  _        | sel≈ _   _   | sel≈ _   _   | yes _       | no  _      | inj₁ p≤q = contradiction p≤q p≰q
      res | sel≈ _   _   | sel≈ _   _   | no  p≰q      | no  q≰r      | sel≈ _   _   | sel≈ _   _   | yes p≤r     | no  _      | inj₂ q≤p = contradiction (≤ₚ-trans q≤p p≤r) q≰r
      
{-
    ----------------------
    -- Properties of ▷ᶜ --
    ----------------------

    Iᶜᵢⱼ≡cnull : ∀ {i j} → j ≢ i → Iᶜ i j ≡ cnull
    Iᶜᵢⱼ≡cnull {i} {j} j≢i with j ≟ᶠ i
    ... | yes j≡i = contradiction j≡i j≢i
    ... | no  _   = ≡-refl

    Iᶜᵢⱼ-idᵣ-⊕ᶜ : ∀ {i j} → j ≢ i → RightIdentity _≈ᶜ_ (Iᶜ i j) _⊕ᶜ_
    Iᶜᵢⱼ-idᵣ-⊕ᶜ j≢i cnull      rewrite Iᶜᵢⱼ≡cnull j≢i = ≈ᶜ-refl
    Iᶜᵢⱼ-idᵣ-⊕ᶜ j≢i (croute _) rewrite Iᶜᵢⱼ≡cnull j≢i = ≈ᶜ-refl

    Iᶜᵢⱼ-anᵣ-▷ᶜ : ∀ {i j} → j ≢ i → ∀ e → e ▷ᶜ Iᶜ i j ≈ᶜ Iᶜ i j
    Iᶜᵢⱼ-anᵣ-▷ᶜ j≢i none     rewrite Iᶜᵢⱼ≡cnull j≢i = cnullEq
    Iᶜᵢⱼ-anᵣ-▷ᶜ j≢i (edge _) rewrite Iᶜᵢⱼ≡cnull j≢i = cnullEq
 
    private
      lemma : ∀ {x y p q} → x ⊕ y ≈ y → ¬ (p ≤ₗₚ q) → (x , p) ⊕ʳᵖ (y , q) ≈ʳᵖ (y , q)
      lemma {x} {y} {p} {q} x⊕y≈y p≰q with selectʳ x y
      ... | sel₁ x⊕y≈x x⊕y≉y = contradiction x⊕y≈y x⊕y≉y
      ... | sel₂ x⊕y≉x _     = ≈ʳᵖ-refl
      ... | sel≈ x⊕y≈x _     with ≤ₗₚ-total p q
      ...   | inj₁ p≤q = contradiction p≤q p≰q
      ...   | inj₂ _   = trans (sym x⊕y≈x) x⊕y≈y , ≈ₚ-refl

    Iᶜᵢᵢ-almost-anᵣ-⊕ᶜ : RightZero _≈_ one _⊕_  → ∀ l s r → (s ▷ᶜ r) ⊕ᶜ Iᶜ l l ≈ᶜ Iᶜ l l
    Iᶜᵢᵢ-almost-anᵣ-⊕ᶜ _ _ none     _     = ≈ᶜ-refl
    Iᶜᵢᵢ-almost-anᵣ-⊕ᶜ _ _ (edge _) cnull = ≈ᶜ-refl
    Iᶜᵢᵢ-almost-anᵣ-⊕ᶜ an l (edge (i , j , e)) (croute (x , p ∣ x≈w[p])) with j ≟ᶠ source p | i ∉? p | (i , j) ᵉ∈ᵍ? G
    ... | no  _      | _        | _       = ≈ᶜ-refl
    ... | yes _      | no _     | _       = ≈ᶜ-refl
    ... | yes _      | yes  _   | no _    = ≈ᶜ-refl
    ... | yes j≡s[p] | yes  i∉p | yes (v , b) with l ≟ᶠ l
    ...   | no  i≢i = contradiction ≡-refl i≢i
    ...   | yes _   = crouteEq (lift-app ≈ʳᵖ-sym ≈ʳᵖ-trans (one , [ l ] ∣ refl) (lemma (an (v ▷ x)) (λ {(() , _)})))
  

    ⊕ᶜ-almost-strictly-absorbs-▷ᶜ : (∀ s r → (s ▷ r) ⊕ r ≈ r) → ∀ s {r} → ¬ (r ≈ᶜ cnull) → ((s ▷ᶜ r) ⊕ᶜ r ≈ᶜ r) × ¬ (r ≈ᶜ s ▷ᶜ r)
    ⊕ᶜ-almost-strictly-absorbs-▷ᶜ _   _      {cnull}     r≉cnull = contradiction cnullEq r≉cnull
    ⊕ᶜ-almost-strictly-absorbs-▷ᶜ _   none   {croute _}  _       = ≈ᶜ-refl , λ()
    ⊕ᶜ-almost-strictly-absorbs-▷ᶜ abs (edge (i , j , e)) {croute (x , p ∣ x≈w[p])} _ with j ≟ᶠ source p | i ∉? p | (i , j) ᵉ∈ᵍ? G
    ... | no  _      | _        | _           = ≈ᶜ-refl , λ()
    ... | yes _      | no _     | _           = ≈ᶜ-refl , λ()
    ... | yes _      | yes  _   | no _        = ≈ᶜ-refl , λ()
    ... | yes j≡s[p] | yes  i∉p | yes (v , b) = 
      crouteEq (lift-app ≈ʳᵖ-sym ≈ʳᵖ-trans (x , p ∣ x≈w[p]) (lemma (abs v x) (1+n≰n ∘ proj₁))) , 
      λ {(crouteEq (_ , p≈i∷p)) → (p≉i∷p (v , subst (λ t → G i t ≡ just v) j≡s[p] b)) p≈i∷p}

    Aᵢⱼ▷cnull≡cnull : ∀ i j → Aᶜ i j ▷ᶜ cnull ≡ cnull
    Aᵢⱼ▷cnull≡cnull i j with G i j
    ... | nothing = ≡-refl
    ... | just _  = ≡-refl


    


 
-}
