open import Data.Product using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; z‚â§n; s‚â§s; _<_; _‚â§_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl; sym; trans; cong; subst; subst‚ÇÇ; cong‚ÇÇ)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_)

open import RoutingLib.Routing.Definitions
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
open import RoutingLib.Data.Nat.Properties using (m<n‚áín‚â¢0; n‚â¢0‚áí0<n; n‚â§0‚áín‚â°0; module ‚â§-Reasoning)
open import RoutingLib.Data.Table using (Table; zipWith; max)
open import RoutingLib.Data.Table.Properties using (max[t]<x)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
open import RoutingLib.Function.Metric as Metric using (IsUltrametric; Bounded)
import RoutingLib.Function.Metric.MaxLift as MaxLift

import RoutingLib.Routing.BellmanFord.PathVector.AsyncConvergence.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.AsyncConvergence.Step4_RouteMetric as Step4

module RoutingLib.Routing.BellmanFord.PathVector.AsyncConvergence.Step5_StateMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
  open Step4 ùìüùì¢ùìí

  ------------------
  -- Table metric --
  ------------------

  d‚Çú : RTable ‚Üí RTable ‚Üí ‚Ñï
  d‚Çú x y = max 0 (zipWith d·µ£ x y)
  
  d‚Çú-isUltrametric : IsUltrametric _ d‚Çú
  d‚Çú-isUltrametric = MaxLift.isUltrametric {n = n} (Œª _ ‚Üí S) d·µ£-isUltrametric

  d‚Çú-bounded : Bounded ‚Ñùùïã‚Çõ d‚Çú  
  d‚Çú-bounded = MaxLift.bounded (Œª _ ‚Üí S) d·µ£-bounded

  ------------------
  -- State metric --
  ------------------

  D : RMatrix ‚Üí RMatrix ‚Üí ‚Ñï
  D X Y = max 0 (zipWith d‚Çú X Y)
  
  D-isUltrametric : IsUltrametric _ D
  D-isUltrametric = MaxLift.isUltrametric {n = n} (Œª _ ‚Üí _) d‚Çú-isUltrametric

  D-bounded : Bounded ‚ÑùùïÑ‚Çõ D  
  D-bounded = MaxLift.bounded (Œª _ ‚Üí ‚Ñùùïã‚Çõ) d‚Çú-bounded

  open IsUltrametric D-isUltrametric public using ()
    renaming
    ( cong to D-cong
    ; 0‚áíeq to D‚â°0‚áíX‚âàY
    ; eq‚áí0 to X‚âàY‚áíD‚â°0
    ; sym to D-sym
    )

  -- Strictly contracting

  open Metric ‚ÑùùïÑ‚Çõ using (_StrContrOnOrbitsOver_; _StrContrOnFixedPointOver_)
  
  œÉ-strContrOrbits : œÉ StrContrOnOrbitsOver D
  œÉ-strContrOrbits {X} œÉX‚ââX with max[t]‚ààt 0 (Œª i ‚Üí d‚Çú (X i) (œÉ X i))
  ... | inj‚ÇÅ dXœÉX‚â°0              = contradiction (‚âà‚Çò-sym (D‚â°0‚áíX‚âàY dXœÉX‚â°0)) œÉX‚ââX
  ... | inj‚ÇÇ (r , DXœÉX‚â°d‚ÇúX·µ£œÉX·µ£) with max[t]‚ààt 0 (Œª i ‚Üí d·µ£ (X r i) (œÉ X r i))
  ...   | inj‚ÇÅ dX·µ£œÉX·µ£‚â°0               = contradiction (‚âà‚Çò-sym (D‚â°0‚áíX‚âàY (trans DXœÉX‚â°d‚ÇúX·µ£œÉX·µ£ dX·µ£œÉX·µ£‚â°0))) œÉX‚ââX
  ...   | inj‚ÇÇ (s , dX·µ£œÉX·µ£‚â°d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ) = begin
    D (œÉ X) (œÉ (œÉ X))   <‚ü® test ‚ü©
    d·µ£ (X r s) (œÉ X r s) ‚â°‚ü® sym DXœÉX‚âàd·µ£X·µ£‚ÇõœÉX·µ£‚Çõ ‚ü©
    D X (œÉ X)            ‚àé
    where
    open ‚â§-Reasoning

    DXœÉX‚âàd·µ£X·µ£‚ÇõœÉX·µ£‚Çõ : D X (œÉ X) ‚â° d·µ£ (X r s) (œÉ X r s)
    DXœÉX‚âàd·µ£X·µ£‚ÇõœÉX·µ£‚Çõ = trans DXœÉX‚â°d‚ÇúX·µ£œÉX·µ£ dX·µ£œÉX·µ£‚â°d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ
    
    X·µ£‚Çõ‚ââœÉX·µ£‚Çõ : X r s ‚ââ œÉ X r s
    X·µ£‚Çõ‚ââœÉX·µ£‚Çõ X·µ£‚Çõ‚âàœÉX·µ£‚Çõ = œÉX‚ââX (‚âà‚Çò-sym (D‚â°0‚áíX‚âàY (trans DXœÉX‚âàd·µ£X·µ£‚ÇõœÉX·µ£‚Çõ (x‚âày‚áíd·µ£‚â°0 X·µ£‚Çõ‚âàœÉX·µ£‚Çõ))))

    d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ : ‚àÄ u v ‚Üí d·µ£ (X u v) (œÉ X u v) ‚â§ d·µ£ (X r s) (œÉ X r s)
    d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ u v = begin
      d·µ£ (X u v) (œÉ X u v) ‚â§‚ü® MaxLift.d·µ¢‚â§d (Œª _ ‚Üí S) d·µ£ (X u) (œÉ X u) v ‚ü©
      d‚Çú (X u)   (œÉ X u)   ‚â§‚ü® MaxLift.d·µ¢‚â§d (Œª _ ‚Üí ‚Ñùùïã‚Çõ) d‚Çú X (œÉ X) u ‚ü©
      D X (œÉ X)           ‚â°‚ü® DXœÉX‚âàd·µ£X·µ£‚ÇõœÉX·µ£‚Çõ ‚ü©
      d·µ£ (X r s) (œÉ X r s) ‚àé

    0<d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ : 0 < d·µ£ (X r s) (œÉ X r s)
    0<d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ = n‚â¢0‚áí0<n (X·µ£‚Çõ‚ââœÉX·µ£‚Çõ ‚àò d·µ£‚â°0‚áíx‚âày)
    
    test : D (œÉ X) (œÉ (œÉ X)) < d·µ£ (X r s) (œÉ X r s)
    test = max[t]<x {t = zipWith d‚Çú (œÉ X) (œÉ (œÉ X))}
             (Œª i ‚Üí max[t]<x {t = zipWith d·µ£ (œÉ X i) (œÉ (œÉ X) i)}
               (Œª j ‚Üí d·µ£-strContrOrbits X·µ£‚Çõ‚ââœÉX·µ£‚Çõ d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ i j)
               0<d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ)
             0<d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ




  -- Strictly contracting when one of the arguments is consistent
  
  œÉ-strContr·∂ú : ‚àÄ {X Y} ‚Üí ùë™‚Çò X ‚Üí X ‚ââ‚Çò Y ‚Üí D (œÉ X) (œÉ Y) < D X Y
  œÉ-strContr·∂ú {X} {Y} X·∂ú X‚ââY with max[t]‚ààt 0 (Œª i ‚Üí d‚Çú (X i) (Y i))
  ... | inj‚ÇÅ dXY‚â°0              = contradiction (D‚â°0‚áíX‚âàY dXY‚â°0) X‚ââY
  ... | inj‚ÇÇ (r , DXY‚â°d‚ÇúX·µ£Y·µ£) with max[t]‚ààt 0 (Œª i ‚Üí d·µ£ (X r i) (Y r i))
  ...   | inj‚ÇÅ dX·µ£Y·µ£‚â°0               = contradiction (D‚â°0‚áíX‚âàY (trans DXY‚â°d‚ÇúX·µ£Y·µ£ dX·µ£Y·µ£‚â°0)) X‚ââY
  ...   | inj‚ÇÇ (s , dX·µ£Y·µ£‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ) = begin
    D  (œÉ X)   (œÉ Y)   <‚ü® test ‚ü©
    d·µ£ (X r s) (Y r s) ‚â°‚ü® sym DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ ‚ü©
    D  X       Y       ‚àé
    where
    open ‚â§-Reasoning

    DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ : D X Y ‚â° d·µ£ (X r s) (Y r s)
    DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ = trans DXY‚â°d‚ÇúX·µ£Y·µ£ dX·µ£Y·µ£‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ
    
    X·µ£‚Çõ‚ââY·µ£‚Çõ : X r s ‚ââ Y r s
    X·µ£‚Çõ‚ââY·µ£‚Çõ X·µ£‚Çõ‚âàY·µ£‚Çõ = X‚ââY (D‚â°0‚áíX‚âàY (trans DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ (x‚âày‚áíd·µ£‚â°0 X·µ£‚Çõ‚âàY·µ£‚Çõ)))

    d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ : ‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ d·µ£ (X r s) (Y r s)
    d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ u v = begin
      d·µ£ (X u v) (Y u v) ‚â§‚ü® MaxLift.d·µ¢‚â§d (Œª _ ‚Üí S) d·µ£ (X u) (Y u) v ‚ü©
      d‚Çú (X u)   (Y u)   ‚â§‚ü® MaxLift.d·µ¢‚â§d (Œª _ ‚Üí ‚Ñùùïã‚Çõ) d‚Çú X (Y) u ‚ü©
      D X (Y)           ‚â°‚ü® DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ ‚ü©
      d·µ£ (X r s) (Y r s) ‚àé

    0<d·µ£X·µ£‚ÇõY·µ£‚Çõ : 0 < d·µ£ (X r s) (Y r s)
    0<d·µ£X·µ£‚ÇõY·µ£‚Çõ = n‚â¢0‚áí0<n (X·µ£‚Çõ‚ââY·µ£‚Çõ ‚àò d·µ£‚â°0‚áíx‚âày)
    
    test : D (œÉ X) (œÉ Y) < d·µ£ (X r s) (Y r s)
    test = max[t]<x {t = zipWith d‚Çú (œÉ X) (œÉ Y)}
             (Œª i ‚Üí max[t]<x {t = zipWith d·µ£ (œÉ X i) (œÉ Y i)}
               (Œª j ‚Üí d·µ£-strContr·∂ú X·∂ú X·µ£‚Çõ‚ââY·µ£‚Çõ d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ i j)
               0<d·µ£X·µ£‚ÇõY·µ£‚Çõ)
             0<d·µ£X·µ£‚ÇõY·µ£‚Çõ
  
  œÉ-strContrOnFP : œÉ StrContrOnFixedPointOver D
  œÉ-strContrOnFP {X} {X*} œÉX*‚âàX* X‚ââX* = begin
    D X*     (œÉ X) ‚â°‚ü® D-cong (‚âà‚Çò-sym œÉX*‚âàX*) (‚âà‚Çò-refl {x = œÉ X}) ‚ü©
    D (œÉ X*) (œÉ X) <‚ü® œÉ-strContr·∂ú (fixed·∂ú œÉX*‚âàX*) (X‚ââX* ‚àò ‚âà‚Çò-sym) ‚ü©
    D X*     X     ‚àé
    where open ‚â§-Reasoning
