open import Level using (_⊔_) renaming (zero to lzero; suc to lsuc)
open import Data.Nat using (ℕ; zero; suc; pred; z≤n; s≤s; _≟_; _<_; _≤_; _∸_; _+_)
open import Data.Nat.Properties using (n≤1+n; ≤-trans)
open import Data.Fin using (Fin)
open import Data.Fin.Subset using (Subset; _∈_; _∉_; _⊆_)
open import Data.Product using (∃; _×_)
open import Relation.Binary using (_Preserves_⟶_)
open import Relation.Binary.PropositionalEquality using (_≡_; _≢_)

module RoutingLib.Asynchronous.Schedule where

--------------------------------------------------------------------------------
-- Time --
--------------------------------------------------------------------------------
-- Some type definitions

-- Time
𝕋 : Set
𝕋 = ℕ

-- Epoch numbers
Epoch : Set
Epoch = ℕ

--------------------------------------------------------------------------------
-- Schedule --
--------------------------------------------------------------------------------
-- An asynchronous schedule for n processors

record Schedule (n : ℕ) : Set where
  field
    -- "η t" is the current epoch at time t
    η : (t : 𝕋) → Epoch
    -- "π e" is the set of participating nodes in epoch e
    π : Epoch → Subset n
    -- "α t" is the subset of nodes that are active at time t
    α : (t : 𝕋) → Subset n
    -- "β t i j" is the time at which the data used by node i at time t was generated by node j
    β : (t : 𝕋) (i j : Fin n) → 𝕋

    -- Old axioms
    -- A1: Information can only be used after it is generated
    β-causality   : ∀ t i j → β (suc t) i j ≤ t
    -- A2: Each element will eventually not need its value at time t
    β-finite      : ∀ t i j → ∃ λ k → ∀ l → β (k + l) i j ≢ t

    -- New axioms
    -- B1: Epochs increase monotonically
    η-mono         : η Preserves _≤_ ⟶ _≤_
    -- B2: Only participants may be active
    α-participants : ∀ t → α t ⊆ π (η t)
    -- B3: If node is an ongoing participant then it must eventually activate
    α-activity    : ∀ i → (∀ e → ∃ λ k → i ∈ π (e + k)) → (∀ t → ∃ λ k → i ∈ α (t + k))

  -- "ρ t" is the set of participants at time t 
  ρ : 𝕋 → Subset n
  ρ t = π (η t)

  -- Some derived properties
  β-decreasing : ∀ {t} i j → 1 ≤ t → β t i j ≤ t
  β-decreasing i j (s≤s z≤n) = ≤-trans (β-causality _ i j) (n≤1+n _)

--------------------------------------------------------------------------------
-- Pseudoperiods --
--------------------------------------------------------------------------------
-- A time period that "emulates" one synchronous iteration. During a
-- pseudoperiod every node activates and then we wait until all data before
-- those activation points are flushed from the system.

module _ {n} (𝓢 : Schedule n) (e : Epoch) where

  record IsPseudoperiod (start end : 𝕋) : Set₁ where
    open Schedule 𝓢

    field
      mid       : 𝕋
      start≤mid : start < mid
      mid≤end   : mid ≤ end
      ηₛ≡e      : η start ≡ e
      ηₑ≡e      : η end   ≡ e
      phase1    : ∀ {i} → i ∈ ρ e → ∃ λ t → start ≤ t × t ≤ mid × i ∈ α t
      phase2    : ∀ i j {t} → end ≤ t → mid < β t i j
      
  data IsPseudoperiods : ℕ → 𝕋 → 𝕋 → Set₁ where
    none : ∀ {s e}     → IsPseudoperiods 0 s e
    next : ∀ {s m e k} → IsPseudoperiods k s m → IsPseudoperiod m e → IsPseudoperiods (suc k) s e

  record Pseudoperiods (k : ℕ) : Set₁ where
    field
      start           : 𝕋
      end             : 𝕋
      kPseudoperiodic : IsPseudoperiods k start end
{-

--------------------------------------------------------------------------------
-- Pseudoperiodic schedule --
--------------------------------------------------------------------------------

record IsPseudoperiodic {n} (𝓢 : Schedule n) : Set where
  open Schedule 𝓢
  field
    φ : ℕ → 𝕋
    τ : ℕ → Fin n → 𝕋

    -- Properties of φ
    φ-increasing : ∀ K → K ≤ φ K

    -- Properties of τ
    τ-expired        : ∀ K t i j → τ K j ≤ β (φ (suc K) + t) i j
    τ-after-φ        : ∀ K i → φ K ≤ τ K i
    τ-active         : ∀ K i → i ∈ α (τ K i)
-}

{-
record PseudoperiodicSchedule (n : ℕ) : Set where

  field
    𝓢 : Schedule n
    isPseudoperiodic : IsPseudoperiodic 𝓢

  open Schedule 𝓢 public
  open IsPseudoperiodic isPseudoperiodic public
-}
