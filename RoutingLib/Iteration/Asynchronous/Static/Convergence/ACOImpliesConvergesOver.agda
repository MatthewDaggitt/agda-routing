--------------------------------------------------------------------------
-- A proof that F being an ACO implies that the iteration converges over
-- the initial box. The same result is also derived in
-- `RoutingLib.Iteration.Asynchronous.Static.ToDynamic` by going via
-- dynamic iterations. This version of the proof is included for the
-- JAR 2019 paper submission.
--
-- It's also instructive to compare this with the dynamic proof in
-- `RoutingLib.Iteration.Asynchronous.Dynamic.Convergence.ACOImpliesConvergent`
-- in order to appreciate how the addition of epochs and participants
-- complicate the proofs.
--------------------------------------------------------------------------

open import Data.Fin using (Fin)
open import Data.Fin.Subset using (Subset; ‚ä§) renaming (_‚àà_ to _‚àà‚Çõ_; _‚àâ_ to _‚àâ‚Çõ_)
open import Data.Fin.Dec using (_‚àà?_)
open import Data.Maybe using (just; nothing)
open import Data.Nat renaming (_‚âü_ to _‚âü‚Ñï_) hiding (_‚äî_)
open import Data.Nat.Properties hiding (_‚âü_)
open import Data.Product as Prod using (‚àÉ; proj‚ÇÇ; proj‚ÇÅ; _,_; _√ó_; map)
open import Function using (id; _‚àò_; _$_)
open import Induction.WellFounded using (Acc; acc)
open import Induction.Nat using (<-wellFounded)
open import Level using (_‚äî_)
open import Relation.Binary using (tri<; tri‚âà; tri>)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; subst; subst‚ÇÇ; cong; cong‚ÇÇ; refl; sym; trans)
open import Relation.Nullary using (yes; no; ¬¨_)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (Pred; _‚äÜ_; _‚àà_)

open import RoutingLib.Relation.Binary.Indexed.Homogeneous
open import RoutingLib.Relation.Unary.Indexed
open import RoutingLib.Relation.Unary.Properties
open import RoutingLib.Function
open import RoutingLib.Function.Reasoning

open import RoutingLib.Iteration.Asynchronous.Static
open import RoutingLib.Iteration.Asynchronous.Static.Convergence.Conditions
open import RoutingLib.Iteration.Asynchronous.Static.Schedule
import RoutingLib.Iteration.Asynchronous.Static.Schedule.Pseudoperiod
  as Pseudoperiods


module RoutingLib.Iteration.Asynchronous.Static.Convergence.ACOImpliesConvergesOver
  {a ‚Ñì ‚Ñì‚ÇÉ n}
  (I‚à• : AsyncIterable a ‚Ñì n)
  (aco : ACO I‚à• ‚Ñì‚ÇÉ)
   where

open AsyncIterable I‚à•
open ACO  aco
-- open ACOProperties I‚à• aco


k* : ‚Ñï
k* = proj‚ÇÅ (B-finish)

x* : S
x* = proj‚ÇÅ (proj‚ÇÇ B-finish)

B* : x*   ‚àà·µ¢ B k* 
B* = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ B-finish) ‚â§-refl)

F* : (F x* ‚àà·µ¢ B (suc k*)) ‚Üí F x* ‚âà x* 
F* = proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ B-finish) (n‚â§1+n k*))

x*-fixed : F x* ‚âà x*
x*-fixed = begin‚ü® B* ‚ü©
  ‚áí x*   ‚àà·µ¢ B k*       ‚à¥‚ü® F-mono-B ‚ü©
  ‚áí F x* ‚àà·µ¢ B (suc k*) ‚à¥‚ü® F* ‚ü©
  ‚áí F x* ‚âà x*          ‚àé

------------------------------------------------------------------------
-- Notation

module _ {x‚ÇÄ : S} (x‚ÇÄ‚ààB‚ÇÄ : x‚ÇÄ ‚àà·µ¢ B 0) (ùì¢ : Schedule n) where

  open Schedule ùì¢
  open Pseudoperiods ùì¢

  -- Some shorthand notation where the epoch and participant indices are
  -- replaced with a time index.

  Œ¥' : S ‚Üí ‚àÄ {t} ‚Üí Acc _<_ t ‚Üí S
  Œ¥' = asyncIter' I‚à• ùì¢

  Œ¥ : S ‚Üí ùïã ‚Üí S
  Œ¥ x‚ÇÄ t = Œ¥' x‚ÇÄ (<-wellFounded t)


  -- The concept of being locally safe

  StateOfNode_InBox_AtTime_ : Fin n ‚Üí ‚Ñï ‚Üí ùïã ‚Üí Set ‚Ñì‚ÇÉ
  StateOfNode i InBox k AtTime t = (acc : Acc _<_ t) ‚Üí Œ¥' x‚ÇÄ acc i ‚àà B k i

  StateInBox_AtTime_ : ‚Ñï ‚Üí ùïã ‚Üí Set ‚Ñì‚ÇÉ
  StateInBox k AtTime t = ‚àÄ i ‚Üí StateOfNode i InBox k AtTime t

  MessagesOfNode_InBox_AtTime_ : Fin n ‚Üí ‚Ñï ‚Üí ùïã ‚Üí Set ‚Ñì‚ÇÉ
  MessagesOfNode i InBox k AtTime t = ‚àÄ {j s} ‚Üí t < s ‚Üí (acc : Acc _<_ (Œ≤ s i j)) ‚Üí Œ¥' x‚ÇÄ acc j ‚àà B k j

  MessagesInBox_AtTime_ : ‚Ñï ‚Üí ùïã ‚Üí Set ‚Ñì‚ÇÉ
  MessagesInBox k AtTime t = ‚àÄ i ‚Üí MessagesOfNode i InBox k AtTime t

  ComputationInBox_AtTime_ : ‚Ñï ‚Üí ùïã ‚Üí Set ‚Ñì‚ÇÉ
  ComputationInBox k AtTime t = MessagesInBox (k ‚à∏ 1) AtTime t √ó StateInBox k AtTime t

--------------------------------------------------------------------------
-- Actual proofs
--------------------------------------------------------------------------
-- Base case: the asynchronous iteration is always in the initial box

  state‚ààB‚ÇÄ : ‚àÄ t ‚Üí StateInBox 0 AtTime t
  state‚ààB‚ÇÄ zero    i (acc rec) = x‚ÇÄ‚ààB‚ÇÄ i
  state‚ààB‚ÇÄ (suc t) i (acc rec) with i ‚àà? Œ± (suc t)
  ... | no  _ = state‚ààB‚ÇÄ t i (rec t _)
  ... | yes _ = F-resp-B‚ÇÄ (Œª j ‚Üí state‚ààB‚ÇÄ (Œ≤ (suc t) i j) j _) i 

  messages‚ààB‚ÇÄ : ‚àÄ t ‚Üí MessagesInBox 0 AtTime t
  messages‚ààB‚ÇÄ t i {j} {s} t<s rec = state‚ààB‚ÇÄ (Œ≤ s i j) j rec

  computation‚ààB‚ÇÄ : ‚àÄ t ‚Üí ComputationInBox 0 AtTime t
  computation‚ààB‚ÇÄ t = messages‚ààB‚ÇÄ t , state‚ààB‚ÇÄ t
  
--------------------------------------------------------------------------
-- Preservation: if the asynchronous iteration is in a box, 
-- then it will still be in that box in the future.

  state-steps : ‚àÄ {k s e} ‚Üí s ‚â§ e ‚Üí
                ComputationInBox k AtTime s ‚Üí
                StateInBox k AtTime e
  state-steps {k}     {s} {zero}  z‚â§n   c‚ààB‚Çñ = proj‚ÇÇ c‚ààB‚Çñ
  state-steps {zero}  {s} {suc e} s‚â§1+e c‚ààB‚Çñ i rec = state‚ààB‚ÇÄ (suc e) i rec
  state-steps {suc k} {s} {suc e} s‚â§1+e c‚ààB‚Çñ i (acc rec) with <-cmp s (suc e)
  ... | tri‚âà _ refl _      = proj‚ÇÇ c‚ààB‚Çñ i (acc rec)
  ... | tri> _ _ s>1+e     = contradiction s‚â§1+e (<‚áí‚â± s>1+e)
  ... | tri< (s‚â§s s‚â§e) _ _ with i ‚àà? Œ± (suc e)
  ...   | no  _ = state-steps s‚â§e c‚ààB‚Çñ i (rec e ‚â§-refl)
  ...   | yes _ = F-mono-B (Œª j ‚Üí proj‚ÇÅ c‚ààB‚Çñ i (s‚â§s s‚â§e) _) i

  message-steps : ‚àÄ {k s e} ‚Üí
                  s ‚â§ e ‚Üí
                  MessagesInBox k AtTime s ‚Üí
                  MessagesInBox k AtTime e
  message-steps s‚â§e m‚ààb i e<t recŒ≤ = m‚ààb i (<-trans ≥ s‚â§e e<t) recŒ≤

--------------------------------------------------------------------------
-- Step: after one pseudoperiod the node is guaranteed to have
-- advanced at least one box

  advance-state·µ¢ : ‚àÄ {s e i k} ‚Üí
                   i IsActiveIn [ s , e ] ‚Üí
                   MessagesOfNode i InBox k AtTime s ‚Üí
                   StateOfNode i InBox (suc k) AtTime e
  advance-state·µ¢ {s} {zero}  {i} (mk‚Çê·µ¢ m ()  z‚â§n   i‚ààŒ±‚Çò)
  advance-state·µ¢ {s} {suc e} {i} (mk‚Çê·µ¢ m s<m m‚â§1+e i‚ààŒ±‚Çò) m‚ààB‚Çñ (acc rec‚Çë)
    with i ‚àà? Œ± (suc e)
  ...   | yes _ = F-mono-B (Œª j ‚Üí m‚ààB‚Çñ (‚â§-trans s<m m‚â§1+e) _) i
  ...   | no  i‚àâŒ±‚ÇÅ‚Çä‚Çë with m ‚âü‚Ñï suc e
  ...     | yes refl  = contradiction i‚ààŒ±‚Çò i‚àâŒ±‚ÇÅ‚Çä‚Çë
  ...     | no  m‚â¢1+e = advance-state·µ¢ (mk‚Çê·µ¢ m s<m m‚â§e i‚ààŒ±‚Çò) m‚ààB‚Çñ _
    where m‚â§e = ‚â§-pred (‚â§‚àß‚â¢‚áí< m‚â§1+e m‚â¢1+e)

  advance-state : ‚àÄ {s e k} ‚Üí
                  ActivationPeriod [ s , e ] ‚Üí
                  MessagesInBox k AtTime s ‚Üí
                  StateInBox (suc k) AtTime e
  advance-state {s} {e} {k} (mk‚Çê v active·µ¢) m‚ààB‚Çñ i
    = advance-state·µ¢ (active·µ¢ i) (m‚ààB‚Çñ i)

  advance-messages : ‚àÄ {s e k} ‚Üí
                     ExpiryPeriod [ s , e ] ‚Üí
                     ComputationInBox k AtTime s ‚Üí
                     MessagesInBox k AtTime e
  advance-messages {s} (mk‚Çë _ expiry·µ¢) c‚ààB‚Çñ i {j} e<t recŒ≤
    = state-steps (expiry·µ¢ i j e<t) c‚ààB‚Çñ j recŒ≤

--------------------------------------------------------------------------
-- Steps : after k pseudoperiods all nodes are guaranteed to have
-- advanced at least k boxes

  messages-pp : ‚àÄ {s e k} ‚Üí
                Pseudoperiod [ s , e ] ‚Üí
                ComputationInBox k       AtTime s ‚Üí
                ComputationInBox (suc k) AtTime e
  messages-pp pp c‚ààB‚Çñ = m‚ààB‚Çñ·µâ , s‚ààB‚ÇÅ‚Çä‚Çñ
    where
    open Pseudoperiod pp
    m‚ààB‚Çñ·µê = advance-messages Œ≤[s,m] c‚ààB‚Çñ
    m‚ààB‚Çñ·µâ  = message-steps mid‚â§end m‚ààB‚Çñ·µê
    s‚ààB‚ÇÅ‚Çä‚Çñ = advance-state Œ±[m,e] m‚ààB‚Çñ·µê
  
  messages-mpp : ‚àÄ {s e k n} ‚Üí
                 MultiPseudoperiod n [ s , e ] ‚Üí
                 ComputationInBox k       AtTime s ‚Üí
                 ComputationInBox (n + k) AtTime e
  messages-mpp {_} {_} {_} {zero}  none            c‚ààB‚Çñ = c‚ààB‚Çñ
  messages-mpp {s} {e} {k} {suc n} (next m pp mpp) c‚ààB‚Çñ = begin‚ü® c‚ààB‚Çñ ‚ü©
    ‚áí ComputationInBox k           AtTime s ‚à¥‚ü® messages-pp pp ‚ü©
    ‚áí ComputationInBox (suc k)     AtTime m ‚à¥‚ü® messages-mpp mpp ‚ü©
    ‚áí ComputationInBox (n + suc k) AtTime e ‚à¥‚ü® subst (ComputationInBox_AtTime e) (+-suc n k) ‚ü©
    ‚áí ComputationInBox (suc n + k) AtTime e ‚àé

--------------------------------------------------------------------------
-- Convergence

  computation‚ààB‚Çñ : ‚àÄ {s e k} ‚Üí
                   MultiPseudoperiod k [ s , e ] ‚Üí
                   ComputationInBox k AtTime e
  computation‚ààB‚Çñ {s} {e} {zero}  none = computation‚ààB‚ÇÄ s
  computation‚ààB‚Çñ {s} {e} {suc k} (next m pp mpp) = begin‚ü® computation‚ààB‚ÇÄ s ‚ü©
    ‚áí ComputationInBox 0       AtTime s ‚à¥‚ü® messages-pp pp ‚ü©
    ‚áí ComputationInBox 1       AtTime m ‚à¥‚ü® messages-mpp mpp ‚ü©
    ‚áí ComputationInBox (k + 1) AtTime e ‚à¥‚ü® subst (ComputationInBox_AtTime e) (+-comm k 1) ‚ü©
    ‚áí ComputationInBox (1 + k) AtTime e ‚àé

  x*-reached : ‚àÄ {s m e : ùïã} ‚Üí
               MultiPseudoperiod k* [ s , m ] ‚Üí
               m ‚â§ e ‚Üí 
               Œ¥' x‚ÇÄ (<-wellFounded e) ‚âà x*
  x*-reached {s} {m} {e} mpp m‚â§e = begin‚ü® mpp ‚ü©
    ‚áí MultiPseudoperiod k* [ s , m ]  ‚à¥‚ü® computation‚ààB‚Çñ ‚ü©
    ‚áí ComputationInBox k* AtTime m    ‚à¥‚ü® state-steps m‚â§e ‚ü©
    ‚áí StateInBox k* AtTime e          ‚à¥‚ü® (Œª prf i ‚Üí prf i (<-wellFounded e)) ‚ü©
    ‚áí Œ¥ x‚ÇÄ e ‚àà·µ¢ B k*                  ‚à¥‚ü® proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ B-finish) ‚â§-refl) ‚ü©
    ‚áí Œ¥ x‚ÇÄ e ‚âà x*                     ‚àé
    where
    last-step : Œ¥ x‚ÇÄ e ‚àà·µ¢ B k* ‚Üí Œ¥ x‚ÇÄ e ‚âà x*
    last-step = proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ B-finish) ‚â§-refl)

convergent : ConvergesOver I‚à• (B 0) 
convergent = record
  { x*         = x*
  ; k*         = k*
  ; x*-fixed   = x*-fixed
  ; x*-reached = x*-reached
  }
