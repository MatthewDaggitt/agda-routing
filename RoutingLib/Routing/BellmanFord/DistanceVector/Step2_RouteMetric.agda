open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (_Preserves_‚ü∂_; _Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; sym; trans; cong; cong‚ÇÇ; subst‚ÇÇ; module ‚â°-Reasoning)
open import Data.List using (List; _‚à∑_)
open import Data.List.Any.Membership.Propositional using (_‚àà_)
open import Data.Nat using (‚Ñï; suc; zero; z‚â§n; s‚â§s; _‚äî_; _‚â§_; _‚â•_; _<_)
open import Data.Nat.Properties using (m‚â§m‚äîn; n‚â§m‚äîn; <‚áí‚â¢; <‚áí‚â§; <‚áí‚â±; ‚â§+‚â¢‚áí<; ‚äî-comm; ‚äî-identity ≥; ‚äî-mono-‚â§; ‚äî-mono-<; ‚â§-total; ‚â§-reflexive; ‚â§-refl; ‚â§-trans)
open import Data.Product using (‚àÉ; _,_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Fin.Properties using () renaming (_‚âü_ to _‚âüùîΩ_)
open import Function using (_‚àò_)
import Relation.Binary.PartialOrderReasoning as PO-Reasoning

open import RoutingLib.Data.List.Uniqueness.Propositional using (Unique)
open import RoutingLib.Data.List.Sorting using (Sorted)
open import RoutingLib.Data.Matrix using (Matrix; zipWith; max‚Å∫)
open import RoutingLib.Data.Nat.Properties using (‚Ñï‚Çõ; m‚â§n‚áím‚â§n‚äîo; n‚â§m‚áím‚äîn‚â°m; n‚â§m√óo‚â§m‚áín‚äîo‚â§m; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Function.Metric using (Ultrametric; IsUltrametric; Bounded; MaxTriangleIneq)

open import RoutingLib.Routing.Definitions using (RoutingProblem; RoutingAlgebra)
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions
import RoutingLib.Routing.BellmanFord.DistanceVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.DistanceVector.Step1_HeightFunction as Step1

module RoutingLib.Routing.BellmanFord.DistanceVector.Step2_RouteMetric
  {a b ‚Ñì n-1}
  {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  (ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)) 
  (ùì¢ùìí : SufficientConditions ùì°ùìê)
  where
  
  open Prelude ùì°ùìü ùì¢ùìí
  open Step1 ùì°ùìü ùì¢ùìí using
    ( h
    ; h-resp-‚âà
    --; h-cancel-‚â°
    ; h-resp-<
    ; 1‚â§h
    ; h‚â§H
    )

  abstract

    h-resp-‚â§ : h Preserves _‚â§‚Çä_ ‚ü∂ _‚â•_
    h-resp-‚â§ {u} {v} u‚â§v with u ‚âü v
    ... | yes u‚âàv = ‚â§-reflexive (h-resp-‚âà (‚âà-sym u‚âàv))
    ... | no  u‚ââv = <‚áí‚â§ (h-resp-< (u‚â§v , u‚ââv))
    
    h[fx]<h[x] : ‚àÄ e {x} ‚Üí x ‚ââ 0# ‚Üí h (e ‚ñ∑ x) < h x
    h[fx]<h[x] e x‚ââ0 = h-resp-< (‚äï-almost-strictly-absorbs-‚ñ∑ e x‚ââ0)

    ----------------------------
    -- distance between two routes
    
    d : Route ‚Üí Route ‚Üí ‚Ñï
    d x y with x ‚âü y
    ... | yes _ = zero
    ... | no  _ = h x ‚äî h y

    d-cong : d Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
    d-cong {x} {y} {u} {v} x‚âày u‚âàv with x ‚âü u | y ‚âü v
    ... | yes _   | yes _   = refl
    ... | yes x‚âàu | no  y‚ââv = contradiction (‚âà-trans (‚âà-trans (‚âà-sym x‚âày) x‚âàu) u‚âàv) y‚ââv
    ... | no  x‚ââu | yes y‚âàv = contradiction (‚âà-trans (‚âà-trans x‚âày y‚âàv) (‚âà-sym u‚âàv)) x‚ââu
    ... | no  _   | no  _   = cong‚ÇÇ _‚äî_ (h-resp-‚âà x‚âày) (h-resp-‚âà u‚âàv)

    x‚âày‚áíd‚â°0 : ‚àÄ {x y} ‚Üí x ‚âà y ‚Üí d x y ‚â° 0
    x‚âày‚áíd‚â°0 {x} {y} x‚âày with x ‚âü y
    ... | yes _   = refl
    ... | no  x‚âây = contradiction x‚âày x‚âây

    d‚â°0‚áíx‚âày : ‚àÄ {x y} ‚Üí d x y ‚â° 0 ‚Üí x ‚âà y
    d‚â°0‚áíx‚âày {x} {y} d‚â°0 with x ‚âü y 
    ... | yes x‚âày = x‚âày
    ... | no  _   = contradiction (sym d‚â°0) (<‚áí‚â¢ (m‚â§n‚áím‚â§n‚äîo (h y) (1‚â§h x)))
    
    d-sym : ‚àÄ x y ‚Üí d x y ‚â° d y x
    d-sym x y with x ‚âü y | y ‚âü x
    ... | yes _   | yes _   = refl
    ... | no  x‚âây | yes y‚âàx = contradiction (‚âà-sym y‚âàx) x‚âây 
    ... | yes x‚âày | no  y‚ââx = contradiction (‚âà-sym x‚âày) y‚ââx 
    ... | no  _   | no  _   = ‚äî-comm (h x) (h y)

    d-maxTriIneq : MaxTriangleIneq S d
    d-maxTriIneq x y z with x ‚âü y | y ‚âü z | x ‚âü z
    ... | _       | _       | yes _  = z‚â§n
    ... | yes x‚âày | yes y‚âàz | no x‚ââz = contradiction (‚âà-trans x‚âày y‚âàz) x‚ââz
    ... | yes x‚âày | no  _   | no _   = ‚â§-reflexive (cong‚ÇÇ _‚äî_ (h-resp-‚âà x‚âày) (refl {x = h z}))
    ... | no  _   | no  _   | no _   = ‚äî-mono-‚â§ (m‚â§m‚äîn (h x) (h y)) (n‚â§m‚äîn (h y) (h z))
    ... | no  _   | yes y‚âàz | no _   = begin
      h x ‚äî h z     ‚â°‚ü® cong (h x ‚äî_) (h-resp-‚âà (‚âà-sym y‚âàz)) ‚ü©
      h x ‚äî h y     ‚â°‚ü® sym (‚äî-identity ≥ _) ‚ü©
      h x ‚äî h y ‚äî 0 ‚àé     
      where open ‚â§-Reasoning


    dxy‚â°hx‚äîhy : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí d x y ‚â° h x ‚äî h y
    dxy‚â°hx‚äîhy {x} {y} x‚âây with x ‚âü y
    ... | yes x‚âày = contradiction x‚âày x‚âây
    ... | no  _   = refl

    œÉX·µ¢‚±º‚ââI·µ¢‚±º : ‚àÄ X {i j} x ‚Üí i ‚â¢ j ‚Üí œÉ X i j <‚Çä x ‚Üí œÉ X i j ‚ââ I i j
    œÉX·µ¢‚±º‚ââI·µ¢‚±º X {i} {j} x i‚â¢j (œÉX·µ¢‚±º‚â§x , œÉX·µ¢‚±º‚ââx) œÉX·µ¢‚±º‚âàI·µ¢‚±º =
      œÉX·µ¢‚±º‚ââx (‚â§‚Çä-antisym œÉX·µ¢‚±º‚â§x (begin
        x         ‚â§‚ü® 0#-id‚Çó-‚äï _ ‚ü©
        0#        ‚âà‚ü® ‚âà-sym (‚âà-reflexive (I·µ¢‚±º‚â°0# (i‚â¢j ‚àò sym))) ‚ü©
        I i j     ‚âà‚ü® ‚âà-sym œÉX·µ¢‚±º‚âàI·µ¢‚±º ‚ü©
        œÉ X i j   ‚àé))
      where open PO-Reasoning ‚â§‚Çä-poset
      
    d-strContr2-lemma : ‚àÄ {X Y r s} ‚Üí
                        (‚àÄ u v ‚Üí X u v ‚ââ Y u v ‚Üí d (X u v) (Y u v) ‚â§ h (X r s) ‚äî h (Y r s)) ‚Üí
                        ‚àÄ {i j} ‚Üí œÉ X i j <‚Çä œÉ Y i j ‚Üí
                        h (œÉ X i j) ‚äî h (œÉ Y i j) < h (X r s) ‚äî h (Y r s)
    d-strContr2-lemma {X} {Y} {r} {s} d‚â§hX·µ£‚Çõ‚äîhY·µ£‚Çõ {i} {j} (œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º)
      with i ‚âüùîΩ j
    ... | yes refl = contradiction (œÉX·µ¢·µ¢‚âàœÉY·µ¢·µ¢ X Y i) œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º
    ... | no  i‚â¢j with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º X i j
    ...   | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º = contradiction œÉX·µ¢‚±º‚âàI·µ¢‚±º (œÉX·µ¢‚±º‚ââI·µ¢‚±º X (œÉ Y i j) i‚â¢j ((œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º)))
        where open PO-Reasoning ‚â§‚Çä-poset
    ...   | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º) = begin
      h (œÉ X i j) ‚äî h (œÉ Y i j)   ‚â°‚ü® n‚â§m‚áím‚äîn‚â°m (h-resp-‚â§ œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º) ‚ü©
      h (œÉ X i j)                 ‚â°‚ü® h-resp-‚âà œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º ‚ü©
      h (A i k ‚ñ∑ X k j)           <‚ü® h-resp-< (‚äï-almost-strictly-absorbs-‚ñ∑ (A i k) X‚Çñ‚±º‚ââ0) ‚ü©
      h (X k j)                   ‚â§‚ü® m‚â§m‚äîn (h (X k j)) (h (Y k j)) ‚ü©
      h (X k j) ‚äî h (Y k j)       ‚â°‚ü® sym (dxy‚â°hx‚äîhy X‚Çñ‚±º‚ââY‚Çñ‚±º) ‚ü©
      d (X k j) (Y k j)           ‚â§‚ü® d‚â§hX·µ£‚Çõ‚äîhY·µ£‚Çõ k j X‚Çñ‚±º‚ââY‚Çñ‚±º ‚ü©
      h (X r s) ‚äî h (Y r s)     ‚àé
      where

      X‚Çñ‚±º‚ââ0 : X k j ‚ââ 0#
      X‚Çñ‚±º‚ââ0 X‚Çñ‚±º‚âà0# = œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º (‚â§‚Çä-antisym œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (begin
        œÉ Y i j       ‚â§‚ü® 0#-id‚Çó-‚äï _ ‚ü©
        0#            ‚âà‚ü® ‚âà-sym (0#-an-‚ñ∑ (A i k)) ‚ü©
        A i k ‚ñ∑ 0#    ‚âà‚ü® ‚ñ∑-cong (A i k) (‚âà-sym X‚Çñ‚±º‚âà0#) ‚ü©
        A i k ‚ñ∑ X k j ‚âà‚ü® ‚âà-sym œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º ‚ü©
        œÉ X i j       ‚àé))
        where open PO-Reasoning ‚â§‚Çä-poset
        
      X‚Çñ‚±º‚ââY‚Çñ‚±º : X k j ‚ââ Y k j
      X‚Çñ‚±º‚ââY‚Çñ‚±º X‚Çñ‚±º‚âàY‚Çñ‚±º = œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º (‚â§‚Çä-antisym œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (begin
        œÉ Y i j       ‚â§‚ü® œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y i j k ‚ü©
        A i k ‚ñ∑ Y k j ‚âà‚ü® ‚ñ∑-cong (A i k) (‚âà-sym X‚Çñ‚±º‚âàY‚Çñ‚±º) ‚ü©
        A i k ‚ñ∑ X k j ‚âà‚ü® ‚âà-sym œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º ‚ü©
        œÉ X i j       ‚àé))
        where open PO-Reasoning ‚â§‚Çä-poset
        
      open ‚â§-Reasoning


    d-strContr : ‚àÄ {X Y r s} ‚Üí X r s ‚ââ Y r s ‚Üí
                  (‚àÄ u v ‚Üí X u v ‚ââ Y u v ‚Üí d (X u v) (Y u v) ‚â§ d (X r s) (Y r s)) ‚Üí
                  ‚àÄ i j ‚Üí d (œÉ X i j) (œÉ Y i j) < d (X r s) (Y r s)
    d-strContr {X} {Y} {r} {s} X·µ£‚Çõ‚ââY·µ£‚Çõ d‚â§dX·µ£‚ÇõY·µ£‚Çõ i j with X r s ‚âü Y r s | œÉ X i j ‚âü œÉ Y i j
    ... | yes X·µ£‚Çõ‚âàY·µ£‚Çõ | _            = contradiction X·µ£‚Çõ‚âàY·µ£‚Çõ X·µ£‚Çõ‚ââY·µ£‚Çõ
    ... | no  _      | yes œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º = m‚â§n‚áím‚â§n‚äîo (h (Y r s)) (1‚â§h (X r s))
    ... | no  _      | no  œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º with ‚â§‚Çä-total (œÉ X i j) (œÉ Y i j)
    ...   | inj‚ÇÅ œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º = d-strContr2-lemma d‚â§dX·µ£‚ÇõY·µ£‚Çõ (œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º)
    ...   | inj‚ÇÇ œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º = begin
      h (œÉ X i j) ‚äî h (œÉ Y i j) ‚â°‚ü® ‚äî-comm (h (œÉ X i j)) (h (œÉ Y i j)) ‚ü©
      h (œÉ Y i j) ‚äî h (œÉ X i j) <‚ü® d-strContr2-lemma d‚â§dY·µ£‚ÇõX·µ£‚Çõ (œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º , (œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º ‚àò ‚âà-sym)) ‚ü©
      h (Y r s)   ‚äî h (X r s)   ‚â°‚ü® ‚äî-comm (h (Y r s)) (h (X r s)) ‚ü©
      h (X r s)   ‚äî h (Y r s)   ‚àé
      where
      open ‚â§-Reasoning

      d‚â§dY·µ£‚ÇõX·µ£‚Çõ : ‚àÄ u v ‚Üí Y u v ‚ââ X u v ‚Üí d (Y u v) (X u v) ‚â§ h (Y r s) ‚äî h (X r s)
      d‚â§dY·µ£‚ÇõX·µ£‚Çõ u v Y·µ§·µ•‚ââX·µ§·µ•
        rewrite d-sym (Y u v) (X u v) | ‚äî-comm (h (Y r s)) (h (X r s))
        = d‚â§dX·µ£‚ÇõY·µ£‚Çõ u v (Y·µ§·µ•‚ââX·µ§·µ• ‚àò ‚âà-sym)

    d‚â§H : ‚àÄ x y ‚Üí d x y ‚â§ H
    d‚â§H x y with x ‚âü y
    ... | yes _ = z‚â§n
    ... | no  _ = n‚â§m√óo‚â§m‚áín‚äîo‚â§m (h‚â§H x) (h‚â§H y)

    d-bounded : Bounded S d
    d-bounded = H , d‚â§H
    
    d-isUltrametric : IsUltrametric S d
    d-isUltrametric = record 
      { eq‚áí0        = x‚âày‚áíd‚â°0 
      ; 0‚áíeq        = d‚â°0‚áíx‚âày 
      ; sym         = d-sym 
      ; maxTriangle = d-maxTriIneq
      ; cong        = d-cong
      }

  d-ultrametric : Ultrametric S
  d-ultrametric = record
    { d             = d
    ; isUltrametric = d-isUltrametric
    }
