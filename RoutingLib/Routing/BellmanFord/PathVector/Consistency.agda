open import Algebra.FunctionProperties using (Op‚ÇÇ; Selective; Congruent‚ÇÇ; Congruent‚ÇÅ)
open import Data.Nat using (‚Ñï; _<_; z‚â§n; s‚â§s; zero; suc)
open import Data.Nat.Properties using (‚â§-reflexive)
open import Data.Fin using (Fin) renaming (zero to fzero; suc to fsuc)
open import Data.Fin.Properties using () renaming (_‚âü_ to _‚âüùîΩ_)
open import Data.Fin.Dec using (¬¨‚àÄ‚ü∂‚àÉ¬¨; all?)
open import Data.List using (List; tabulate; _‚à∑_; map; foldr)
open import Data.List.All.Properties using (tabulate‚Å∫)
open import Data.List.Any using (here; there)
import Data.List.Relation.Pointwise as Pointwise
import Data.List.Any.Membership as Membership
open import Data.List.Any.Membership.Properties using (‚àà-map‚Å∫)
open import Data.Product using (Œ£; ‚àÉ; ‚àÉ‚ÇÇ; _,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Level using (_‚äî_)
open import Function using (_‚àò_; _on_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; sym; trans; cong; inspect; [_]; module ‚â°-Reasoning)
open import Relation.Binary.List.Pointwise
  using ([]; _‚à∑_) renaming (Rel to ListRel)
open import Relation.Unary using () renaming (Decidable to DecidableU)
import Relation.Binary.On as On
import Relation.Binary.EqReasoning as EqReasoning
open import Induction.WellFounded using (Acc; acc)
open import Induction.Nat using () renaming (<-well-founded to <-wellFounded)

open import RoutingLib.Data.SimplePath
  using (SimplePath; valid; invalid; []; _‚à∑_‚à£_‚à£_; length; _‚áø_; _‚àà_; _‚àâ_; notThere)
open import RoutingLib.Data.SimplePath.Relation.Equality
open import RoutingLib.Data.SimplePath.Properties
  using (length-cong; length<n; ‚àâ-resp-‚âà‚Çö)
open import RoutingLib.Data.SimplePath.NonEmpty.Properties
  using (_‚áø?_; _‚àâ?_)
open import RoutingLib.Data.SimplePath.Enumeration
open import RoutingLib.Data.List.Properties using (foldr-pres·µá)
open import RoutingLib.Data.List.Uniqueness.Setoid using (Unique; []; _‚à∑_)
open import RoutingLib.Data.List.Uniqueness.Setoid.Properties using (deduplicate!‚Å∫)
import RoutingLib.Data.List.Membership.DecSetoid as RMembership
open import RoutingLib.Data.List.Membership.DecSetoid.Properties using (‚àà-deduplicate‚Å∫; ‚àà-resp-‚âà)
open import RoutingLib.Data.Nat.Properties using (module ‚â§-Reasoning)

open import RoutingLib.Routing.Definitions
import RoutingLib.Routing.BellmanFord as BellmanFord
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions
import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions.Properties
  as SufficientConditionsProperties

module RoutingLib.Routing.BellmanFord.PathVector.Consistency
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê n-1}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open BellmanFord ùì°ùìü
  open RoutingProblem ùì°ùìü
  open PathSufficientConditions ùìüùì¢ùìí
  open SufficientConditionsProperties ùìüùì¢ùìí

  -----------------
  -- Consistency --
  -----------------
  
  ùë™ : Route ‚Üí Set ‚Ñì
  ùë™ r = weight (path r) ‚âà r

  ùë™‚Çò : RMatrix ‚Üí Set _
  ùë™‚Çò X = ‚àÄ i j ‚Üí ùë™ (X i j)
  
  ùë∞ : Route ‚Üí Set _
  ùë∞ r = ¬¨ ùë™ r

  ùë∞‚Çò : RMatrix ‚Üí Set _
  ùë∞‚Çò X = ¬¨ ùë™‚Çò X

  abstract
  
    -- Decidability of consistency
  
    ùë™? : DecidableU ùë™
    ùë™? r = weight (path r) ‚âü r

    ùë™‚Çò? : DecidableU ùë™‚Çò
    ùë™‚Çò? X = all? (Œª i ‚Üí all? (Œª j ‚Üí ùë™? (X i j)))

    -- Congruency of consistency
    
    ùë™-cong : ‚àÄ {r s} ‚Üí r ‚âà s ‚Üí ùë™ r ‚Üí ùë™ s
    ùë™-cong r‚âàs r·∂ú = ‚âà-trans (‚âà-trans (weight-cong (path-cong (‚âà-sym r‚âàs))) r·∂ú) r‚âàs

    ùë™‚Çò-cong : ‚àÄ {X Y} ‚Üí X ‚âà‚Çò Y ‚Üí ùë™‚Çò X ‚Üí ùë™‚Çò Y
    ùë™‚Çò-cong X‚âàY X·∂ú i j = ùë™-cong (X‚âàY i j) (X·∂ú i j)

    ùë∞-cong : ‚àÄ {r s} ‚Üí r ‚âà s ‚Üí ùë∞ r ‚Üí ùë∞ s
    ùë∞-cong r‚âàs r‚Å± s·∂ú = r‚Å± (ùë™-cong (‚âà-sym r‚âàs) s·∂ú)

    -- We can create a witness for ùë∞‚Çú and ùë∞‚Çò
    
    ùë∞‚Çò-witness : ‚àÄ {X} ‚Üí ùë∞‚Çò X ‚Üí ‚àÉ‚ÇÇ Œª i j ‚Üí ùë∞ (X i j)
    ùë∞‚Çò-witness {X} X‚Å± with ¬¨‚àÄ‚ü∂‚àÉ¬¨ n _ (Œª i ‚Üí all? (Œª j ‚Üí ùë™? (X i j))) X‚Å±
    ... | (j , X‚±º‚Å±) = j , (¬¨‚àÄ‚ü∂‚àÉ¬¨ n _ (Œª k ‚Üí ùë™? (X j k)) X‚±º‚Å±)
    
    -- Consistent and inconsistent objects can never be equal

    ùë™ùë∞‚áí‚ââ : ‚àÄ {r s} ‚Üí ùë™ r ‚Üí ùë∞ s ‚Üí r ‚ââ s
    ùë™ùë∞‚áí‚ââ r·∂ú s‚Å± r‚âàs = s‚Å± (ùë™-cong r‚âàs r·∂ú)

    ùë™ùë∞‚áí‚ââ‚Çò : ‚àÄ {X Y} ‚Üí ùë™‚Çò X ‚Üí ùë∞‚Çò Y ‚Üí X ‚ââ‚Çò Y
    ùë™ùë∞‚áí‚ââ‚Çò X·∂ú Y‚Å± X‚âàY with ùë∞‚Çò-witness Y‚Å±
    ... | i , j , Y·µ¢‚±º‚Å± = ùë™ùë∞‚áí‚ââ (X·∂ú i j) Y·µ¢‚±º‚Å± (X‚âàY i j)

    -- Consistency is preserved by ‚äï and ‚ñ∑

    0·∂ú : ùë™ 0#
    0·∂ú = weight-cong p‚ÇÄ‚âà‚àÖ
  
    1·∂ú : ùë™ 1#
    1·∂ú = weight-cong p‚ÇÅ‚âà[]

    I·∂ú : ùë™‚Çò I
    I·∂ú i j with j ‚âüùîΩ i
    ... | yes _ = 1·∂ú
    ... | no  _ = 0·∂ú
    
    ‚äï-pres-ùë™ : ‚àÄ {r s} ‚Üí ùë™ r ‚Üí ùë™ s ‚Üí ùë™ (r ‚äï s)
    ‚äï-pres-ùë™ {r} {s} r·∂ú s·∂ú with ‚äï-sel r s
    ... | inj‚ÇÅ r‚äïs‚âàr = ùë™-cong (‚âà-sym r‚äïs‚âàr) r·∂ú
    ... | inj‚ÇÇ r‚äïs‚âàs = ùë™-cong (‚âà-sym r‚äïs‚âàs) s·∂ú

    ‚ñ∑-pres-ùë™ : ‚àÄ i j {r} ‚Üí ùë™ r ‚Üí ùë™ (A i j ‚ñ∑ r)
    ‚ñ∑-pres-ùë™ i j {r} r·∂ú with A i j ‚ñ∑ r ‚âü 0#
    ... | yes A·µ¢‚±º‚ñ∑r‚âà0# = ùë™-cong (‚âà-sym A·µ¢‚±º‚ñ∑r‚âà0#) 0·∂ú
    ... | no  A·µ¢‚±º‚ñ∑r‚ââ0# with path r | inspect path r
    ...   | invalid | [ p·µ£‚â°‚àÖ ] = contradiction (p·µ£‚â°‚àÖ‚áíA·µ¢‚±ºr‚âà0 p·µ£‚â°‚àÖ) A·µ¢‚±º‚ñ∑r‚ââ0#
    ...   | valid q | [ p·µ£‚â°q ] with ‚âà‚Çö-reflexive p·µ£‚â°q | (i , j) ‚áø? q | i ‚àâ? q
    ...     | p·µ£‚âàq | no ¬¨ij‚áøq | _       = ùë™-cong (‚âà-sym (path-reject p·µ£‚âàq (inj‚ÇÅ ¬¨ij‚áøq))) 0·∂ú
    ...     | p·µ£‚âàq | _        | no  i‚ààq = ùë™-cong (‚âà-sym (path-reject p·µ£‚âàq (inj‚ÇÇ i‚ààq))) 0·∂ú
    ...     | p·µ£‚âàq | yes ij‚áøq | yes i‚àâq = begin
      weight (path (A i j ‚ñ∑ r))                 ‚âà‚ü® weight-cong (path-accept p·µ£‚âàq A·µ¢‚±º‚ñ∑r‚ââ0# ij‚áøq i‚àâq) ‚ü©
      weight (valid ((i , j) ‚à∑ q ‚à£ ij‚áøq ‚à£ i‚àâq)) ‚â°‚ü®‚ü©
      A i j ‚ñ∑ weight (valid q)                  ‚âà‚ü® ‚ñ∑-cong (A i j) r·∂ú ‚ü©
      A i j ‚ñ∑ r                                 ‚àé
      where open EqReasoning S
      
    ‚ñ∑-forces-ùë∞ : ‚àÄ {i j r} ‚Üí ùë∞ (A i j ‚ñ∑ r) ‚Üí ùë∞ r
    ‚ñ∑-forces-ùë∞ A·µ¢‚±ºr‚Å± r·∂ú = A·µ¢‚±ºr‚Å± (‚ñ∑-pres-ùë™ _ _ r·∂ú)

    œÉ-pres-ùë™‚Çò : ‚àÄ {X} ‚Üí ùë™‚Çò X ‚Üí ùë™‚Çò (œÉ X)
    œÉ-pres-ùë™‚Çò X·∂ú i j = foldr-pres·µá {P = ùë™} ‚äï-pres-ùë™
      (I·∂ú i j) (tabulate‚Å∫ (Œª k ‚Üí ‚ñ∑-pres-ùë™ i k (X·∂ú k j)))
           
    ----------------------------------------------------------------------------
    -- A few more non-obvious properties relating to consistency

    size-incr : ‚àÄ {i j r} ‚Üí ùë∞ (A i j ‚ñ∑ r) ‚Üí suc (size r) ‚â° size (A i j ‚ñ∑ r)
    size-incr {i} {j} {r} A·µ¢‚±º‚ñ∑r‚Å± with A i j ‚ñ∑ r ‚âü 0#
    ... | yes A·µ¢‚±º‚ñ∑r‚âà0# = contradiction (ùë™-cong (‚âà-sym A·µ¢‚±º‚ñ∑r‚âà0#) 0·∂ú) A·µ¢‚±º‚ñ∑r‚Å±
    ... | no  A·µ¢‚±º‚ñ∑r‚ââ0# with path r | inspect path r
    ...   | invalid | [ p·µ£‚â°‚àÖ ] = contradiction (p·µ£‚â°‚àÖ‚áíA·µ¢‚±ºr‚âà0 p·µ£‚â°‚àÖ) A·µ¢‚±º‚ñ∑r‚ââ0#
    ...   | valid q | [ p·µ£‚â°q ] with ‚âà‚Çö-reflexive p·µ£‚â°q | (i , j) ‚áø? q | i ‚àâ? q
    ...     | p·µ£‚âàq | no ¬¨ij‚áøq | _       = contradiction (path-reject p·µ£‚âàq (inj‚ÇÅ ¬¨ij‚áøq)) A·µ¢‚±º‚ñ∑r‚ââ0#
    ...     | p·µ£‚âàq | _        | no  i‚ààq = contradiction (path-reject p·µ£‚âàq (inj‚ÇÇ i‚ààq)) A·µ¢‚±º‚ñ∑r‚ââ0#
    ...     | p·µ£‚âàq | yes ij‚áøq | yes i‚àâq = sym (length-cong (path-accept p·µ£‚âàq A·µ¢‚±º‚ñ∑r‚ââ0# ij‚áøq i‚àâq))
    
    œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º : ‚àÄ X i j ‚Üí ùë∞ (œÉ X i j) ‚Üí ‚àÉ Œª k ‚Üí œÉ X i j ‚âà A i k ‚ñ∑ X k j √ó ùë∞ (X k j)
    œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º X i j œÉX·µ¢‚±º‚Å± with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º X i j
    ... | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º) = k , œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º , ‚ñ∑-forces-ùë∞ (ùë∞-cong œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º œÉX·µ¢‚±º‚Å±)
    ... | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º           = contradiction (ùë™-cong (‚âà-sym œÉX·µ¢‚±º‚âàI·µ¢‚±º) (I·∂ú i j)) œÉX·µ¢‚±º‚Å±

    œÉX·µ¢‚±º‚Å±‚áíX‚Çñ‚±º‚Å±‚ââœÉX‚Çñ‚±º : ‚àÄ X i j ‚Üí ùë∞ (œÉ X i j) ‚Üí ‚àÉ Œª k ‚Üí X k j ‚ââ œÉ X k j √ó ùë∞ (X k j)
    œÉX·µ¢‚±º‚Å±‚áíX‚Çñ‚±º‚Å±‚ââœÉX‚Çñ‚±º X i j œÉX·µ¢‚±º‚Å± = reduction i œÉX·µ¢‚±º‚Å± (<-wellFounded (size (œÉ X i j)))
      where
      open ‚â§-Reasoning
      reduction : ‚àÄ l ‚Üí ùë∞ (œÉ X l j) ‚Üí Acc _<_ (size (œÉ X l j)) ‚Üí
                  ‚àÉ Œª k ‚Üí X k j ‚ââ œÉ X k j √ó ùë∞ (X k j)
      reduction l œÉX‚Çó‚±º‚Å± (acc rec) with œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º X _ _ œÉX‚Çó‚±º‚Å±
      ... | (k , œÉX‚Çó‚±º‚âàA‚Çó‚ÇñX‚Çñ‚±º , X‚Çñ‚±º‚Å±) with X k j ‚âü œÉ X k j
      ...   | no  X‚Çñ‚±º‚ââœÉX‚Çñ‚±º = k , X‚Çñ‚±º‚ââœÉX‚Çñ‚±º , X‚Çñ‚±º‚Å±
      ...   | yes X‚Çñ‚±º‚âàœÉX‚Çñ‚±º = reduction k (ùë∞-cong X‚Çñ‚±º‚âàœÉX‚Çñ‚±º X‚Çñ‚±º‚Å±) (rec (size (œÉ X k j)) (begin
        size (œÉ X k j)         ‚â°‚ü® size-cong (‚âà-sym X‚Çñ‚±º‚âàœÉX‚Çñ‚±º) ‚ü©
        size (X k j)           <‚ü® ‚â§-reflexive (size-incr (ùë∞-cong œÉX‚Çó‚±º‚âàA‚Çó‚ÇñX‚Çñ‚±º œÉX‚Çó‚±º‚Å±)) ‚ü©
        size (A l k ‚ñ∑ X k j)   ‚â°‚ü® size-cong (‚âà-sym œÉX‚Çó‚±º‚âàA‚Çó‚ÇñX‚Çñ‚±º) ‚ü©
        size (œÉ X l j)         ‚àé))

    weight·∂ú : ‚àÄ p ‚Üí ùë™ (weight p)
    weight·∂ú invalid                            = 0·∂ú
    weight·∂ú (valid [])                         = 1·∂ú
    weight·∂ú (valid ((i , j) ‚à∑ p ‚à£ e‚áøp ‚à£ e‚àâp)) with A i j ‚ñ∑ weight (valid p) ‚âü 0#
    ... | yes A·µ¢‚±º‚ñ∑w‚Çö‚âà0 = ùë™-cong (‚âà-sym A·µ¢‚±º‚ñ∑w‚Çö‚âà0) 0·∂ú
    ... | no  A·µ¢‚±º‚ñ∑w‚Çö‚ââ0 with path (weight (valid p)) | inspect path (weight (valid p))
    ...   | invalid | [ p[w‚Çö]‚â°‚àÖ ] = ùë™-cong (‚âà-sym (p·µ£‚â°‚àÖ‚áíA·µ¢‚±ºr‚âà0 p[w‚Çö]‚â°‚àÖ)) 0·∂ú
    ...   | valid q | [ p[w‚Çö]‚â°q ] with ‚âà‚Çö-reflexive p[w‚Çö]‚â°q | (i , j) ‚áø? q | i ‚àâ? q 
    ...     | p[w‚Çö]‚âàq | no ¬¨ij‚áøq | _       = ùë™-cong (‚âà-sym (path-reject p[w‚Çö]‚âàq (inj‚ÇÅ ¬¨ij‚áøq))) 0·∂ú
    ...     | p[w‚Çö]‚âàq | _        | no  i‚ààq = ùë™-cong (‚âà-sym (path-reject p[w‚Çö]‚âàq (inj‚ÇÇ i‚ààq))) 0·∂ú
    ...     | p[w‚Çö]‚âàq | yes ij‚áøq | yes i‚àâq = begin
      weight (path (A i j ‚ñ∑ weight (valid p)))    ‚âà‚ü® weight-cong (path-accept p[w‚Çö]‚âàq A·µ¢‚±º‚ñ∑w‚Çö‚ââ0 ij‚áøq i‚àâq) ‚ü©
      weight (valid ((i , j) ‚à∑ q ‚à£ ij‚áøq ‚à£ i‚àâq))  ‚â°‚ü®‚ü©
      A i j ‚ñ∑ weight (valid q)                    ‚âà‚ü® ‚ñ∑-cong (A i j) (weight-cong (‚âà‚Çö-sym p[w‚Çö]‚âàq)) ‚ü©
      A i j ‚ñ∑ weight (path (weight (valid p)))    ‚âà‚ü® ‚ñ∑-cong (A i j) (weight·∂ú (valid p)) ‚ü©
      A i j ‚ñ∑ weight (valid p)                    ‚àé
      where open EqReasoning S

    fixed·∂ú : ‚àÄ {X} ‚Üí œÉ X ‚âà‚Çò X ‚Üí ùë™‚Çò X
    fixed·∂ú {X} œÉX‚âàX with ùë™‚Çò? (œÉ X)
    ... | yes œÉX·∂ú = ùë™‚Çò-cong œÉX‚âàX œÉX·∂ú
    ... | no  œÉX‚Å± with ùë∞‚Çò-witness œÉX‚Å±
    ...   | i , j , œÉX·µ¢‚±º‚Å± with œÉX·µ¢‚±º‚Å±‚áíX‚Çñ‚±º‚Å±‚ââœÉX‚Çñ‚±º X _ _ œÉX·µ¢‚±º‚Å±
    ...     | k , X‚Çñ‚±º‚ââœÉX‚Çñ‚±º , _ = contradiction (‚âà-sym (œÉX‚âàX k j)) X‚Çñ‚±º‚ââœÉX‚Çñ‚±º
  
  ------------------------------------------------------------------------------
  -- Consistent algebra

  infix 7 _‚äï·∂ú_
  infix 6 _‚ñ∑·∂ú_
  infix 4 _‚âà·∂ú_
    
  CRoute : Set _
  CRoute = Œ£ Route ùë™

  CStep : Set _
  CStep = Fin n √ó Fin n
  
  _‚âà·∂ú_ : Rel CRoute _
  _‚âà·∂ú_ = _‚âà_ on proj‚ÇÅ

  _‚ââ·∂ú_ : Rel CRoute _
  r ‚ââ·∂ú s = ¬¨ (r ‚âà·∂ú s)
  
  _‚äï·∂ú_ : Op‚ÇÇ CRoute
  (r , r·∂ú) ‚äï·∂ú (s , s·∂ú) = r ‚äï s , ‚äï-pres-ùë™ r·∂ú s·∂ú
  
  _‚ñ∑·∂ú_ : CStep ‚Üí CRoute ‚Üí CRoute
  (i , j) ‚ñ∑·∂ú (r , r·∂ú) = A i j ‚ñ∑ r , ‚ñ∑-pres-ùë™ i j r·∂ú

  _‚âü·∂ú_ : Decidable _‚âà·∂ú_
  _ ‚âü·∂ú _ = _ ‚âü _
  
  ‚âà·∂ú-isDecEquivalence : IsDecEquivalence _‚âà·∂ú_
  ‚âà·∂ú-isDecEquivalence = On.isDecEquivalence proj‚ÇÅ ‚âà-isDecEquivalence

  S·∂ú : Setoid _ _
  S·∂ú = On.setoid {B = CRoute} S proj‚ÇÅ

  DS·∂ú : DecSetoid _ _
  DS·∂ú = On.decSetoid {B = CRoute} DS proj‚ÇÅ
  
  ‚äï·∂ú-cong : Congruent‚ÇÇ _‚âà·∂ú_ _‚äï·∂ú_
  ‚äï·∂ú-cong = ‚äï-cong

  ‚ñ∑·∂ú-cong : ‚àÄ e {r s} ‚Üí r ‚âà·∂ú s ‚Üí e ‚ñ∑·∂ú r ‚âà·∂ú e ‚ñ∑·∂ú s
  ‚ñ∑·∂ú-cong (i , j) = ‚ñ∑-cong (A i j)

  ùì°ùìê·∂ú : RoutingAlgebra _ _ ‚Ñì
  ùì°ùìê·∂ú = record
    { Step  = CStep
    ; Route = CRoute
    ; _‚äï_   = _‚äï·∂ú_
    ; _‚ñ∑_   = _‚ñ∑·∂ú_
    ; 0#    = 0# , 0·∂ú
    ; 1#    = 1# , 1·∂ú
    
    ; _‚âà_                = _‚âà·∂ú_
    ; ‚âà-isDecEquivalence = ‚âà·∂ú-isDecEquivalence
    ; ‚äï-cong             = Œª {x} {y} {u} {v} ‚Üí ‚äï·∂ú-cong {x} {y} {u} {v}
    ; ‚ñ∑-cong             = ‚ñ∑·∂ú-cong
    }

  ùì°ùìü·∂ú : RoutingProblem ùì°ùìê·∂ú n-1
  ùì°ùìü·∂ú = record { A = _,_ }

  open RoutingProblem ùì°ùìü·∂ú using ()
    renaming
    ( RMatrix to CMatrix
    ; _‚âà‚Çò_ to _‚âà·∂ú‚Çò_
    ; ‚âà-trans to ‚âà·∂ú-trans
    )
  open BellmanFord ùì°ùìü·∂ú using ()
    renaming
    ( I to Ic
    ; œÉ to œÉ·∂ú
    )

  -- Conversion functions
  
  toCRoute : ‚àÄ {r} ‚Üí ùë™ r ‚Üí CRoute
  toCRoute {r} r·∂ú = _ , r·∂ú
  
  toCMatrix : ‚àÄ {X} ‚Üí ùë™‚Çò X ‚Üí CMatrix 
  toCMatrix {X} X·∂ú i j = X i j , X·∂ú i j

  -- Conversion properties
  
  toCMatrix-cong : ‚àÄ {X Y} (X·∂ú : ùë™‚Çò X) (Y·∂ú : ùë™‚Çò Y) ‚Üí X ‚âà‚Çò Y ‚Üí
                   toCMatrix X·∂ú ‚âà·∂ú‚Çò toCMatrix Y·∂ú
  toCMatrix-cong _ _ X‚âàY i j = X‚âàY i j
    
  I‚âàtoCI : ‚àÄ i j ‚Üí toCRoute (I·∂ú i j) ‚âà·∂ú Ic i j
  I‚âàtoCI i j with j ‚âüùîΩ i
  ... | yes _ = ‚âà-refl
  ... | no  _ = ‚âà-refl

  foldr·∂ú-lemma : ‚àÄ {e xs} {ys : List CRoute} ‚Üí ùë™ e ‚Üí
                   ListRel (Œª x y ‚Üí x ‚âà proj‚ÇÅ y) xs ys ‚Üí
                   ùë™ (foldr _‚äï_ e xs)
  foldr·∂ú-lemma e·∂ú []            = e·∂ú
  foldr·∂ú-lemma e·∂ú (_‚à∑_ {y = y , y·∂ú} x‚âày xs‚âàys) =
    ‚äï-pres-ùë™ (ùë™-cong (‚âà-sym x‚âày) y·∂ú) (foldr·∂ú-lemma e·∂ú xs‚âàys)

  foldr-toCRoute-commute : ‚àÄ {e f} (e·∂ú : ùë™ e) ‚Üí toCRoute e·∂ú ‚âà·∂ú f ‚Üí 
                        ‚àÄ {xs ys} (foldr·∂ú : ùë™ (foldr _‚äï_ e xs)) ‚Üí
                        ListRel (Œª x y ‚Üí x ‚âà proj‚ÇÅ y) xs ys ‚Üí
                        toCRoute foldr·∂ú ‚âà·∂ú foldr _‚äï·∂ú_ f ys
  foldr-toCRoute-commute e·∂ú e‚âàf foldr·∂ú []            = e‚âàf
  foldr-toCRoute-commute e·∂ú e‚âàf foldr·∂ú (x‚âày ‚à∑ xs‚âàys) =
    ‚äï-cong x‚âày (foldr-toCRoute-commute e·∂ú e‚âàf (foldr·∂ú-lemma e·∂ú xs‚âàys) xs‚âàys)

  œÉ-toCMatrix-commute : ‚àÄ {X} (X·∂ú : ùë™‚Çò X) (œÉX·∂ú : ùë™‚Çò (œÉ X)) ‚Üí
                        toCMatrix œÉX·∂ú ‚âà·∂ú‚Çò œÉ·∂ú (toCMatrix X·∂ú)
  œÉ-toCMatrix-commute {X} X·∂ú œÉX·∂ú i j =
    foldr-toCRoute-commute (I·∂ú i j) (I‚âàtoCI i j) (œÉX·∂ú i j)
      (Pointwise.tabulate‚Å∫ {g = Œª k ‚Üí A i k ‚ñ∑ X k j , ‚ñ∑-pres-ùë™ i k (X·∂ú k j)} (Œª k ‚Üí ‚âà-refl))
    
  ‚äï·∂ú-strictlyAbsorbs-‚ñ∑·∂ú : ‚àÄ (s : CStep) {r : CRoute} ‚Üí r ‚ââ·∂ú (0# , 0·∂ú) ‚Üí
                          ((s ‚ñ∑·∂ú r) ‚äï·∂ú r ‚âà·∂ú r) √ó (r ‚ââ·∂ú (s ‚ñ∑·∂ú r))
  ‚äï·∂ú-strictlyAbsorbs-‚ñ∑·∂ú (i , j) r‚ââ0 = ‚äï-strictlyAbsorbs-‚ñ∑ (A i j) r‚ââ0

  open Membership S·∂ú using () renaming (_‚àà_ to _‚àà‚Çó_)
  open RMembership DS·∂ú using (deduplicate)
  
  pathToCRoute : SimplePath n ‚Üí CRoute
  pathToCRoute p = weight p , weight·∂ú p

  abstract
  
    allCRoutes : List CRoute
    allCRoutes = map pathToCRoute (allPaths n)
 
    ‚àà-allCRoutes : ‚àÄ r ‚Üí r ‚àà‚Çó allCRoutes
    ‚àà-allCRoutes (r , r·∂ú) = ‚àà-resp-‚âà S·∂ú {v = pathToCRoute (path r)} {w = r , r·∂ú}
      (‚àà-map‚Å∫ (‚Ñô‚Çõ n) S·∂ú weight-cong (‚àà-allPaths (path r))) r·∂ú

  ùì¢ùìí : SufficientConditions ùì°ùìê·∂ú
  ùì¢ùìí = record
    { ‚äï-assoc = Œª _ _ _ ‚Üí ‚äï-assoc _ _ _
    ; ‚äï-sel   = Œª _ _   ‚Üí ‚äï-sel _ _
    ; ‚äï-comm  = Œª _ _   ‚Üí ‚äï-comm _ _
    ; ‚äï-almost-strictly-absorbs-‚ñ∑ = ‚äï·∂ú-strictlyAbsorbs-‚ñ∑·∂ú
    
    ; ‚ñ∑-zero      = Œª _ ‚Üí ‚ñ∑-zero _
    ; ‚äï-identity ≥ = Œª _ ‚Üí ‚äï-identity ≥ _
    ; ‚äï-zero ≥     = Œª _ ‚Üí ‚äï-zero ≥ _
    
    ; allRoutes   = allCRoutes
    ; ‚àà-allRoutes = ‚àà-allCRoutes
    }
