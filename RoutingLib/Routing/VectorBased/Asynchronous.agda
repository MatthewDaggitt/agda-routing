--------------------------------------------------------------------------------
-- Agda routing library
--
-- This module contains an asynchronous implementation of an abstract vector
-- based routing protocol designed to solve the routing problem described by the
-- provided routing algebra.
--------------------------------------------------------------------------------

open import RoutingLib.Routing.Algebra
open import RoutingLib.Routing as Routing using (Network)

module RoutingLib.Routing.VectorBased.Asynchronous
  {a b ‚Ñì} (algebra : RawRoutingAlgebra a b ‚Ñì)
  {n} (network : Network algebra n)
  where

open import Data.List.Relation.Binary.Pointwise using (tabulate‚Å∫)
open import Data.Fin.Subset using (Subset; _‚àâ_)
open import Relation.Binary.Indexed.Homogeneous using (IndexedDecSetoid)

open import RoutingLib.Data.List.Relation.Binary.Pointwise using (foldr‚Å∫)

open import RoutingLib.Iteration.Asynchronous.Dynamic
  using (IsAsyncIterable; AsyncIterable; asyncIter)
open import RoutingLib.Iteration.Asynchronous.Dynamic.Schedule
  using (Schedule; ùïã)
import RoutingLib.Routing.VectorBased.Synchronous as Synchronous

open RawRoutingAlgebra algebra

------------------------------------------------------------------------
-- Publicly re-export core iteration and contents of routing

open Synchronous algebra public
  using (F; œÉ; F-cong)
open Routing algebra n public
  hiding (A‚Çú)

------------------------------------------------------------------------
-- The adjacency matrix at time e with participants p

A‚Çú : Epoch ‚Üí Subset n ‚Üí AdjacencyMatrix
A‚Çú = Routing.A‚Çú algebra n network

------------------------------------------------------------------------
-- The iteration being computed during epoch e with participants p

F‚Ä≤ : Epoch ‚Üí Subset n ‚Üí RoutingMatrix ‚Üí RoutingMatrix
F‚Ä≤ e p X = F (A‚Çú e p) X

F‚Ä≤-cong : ‚àÄ e p {X Y} ‚Üí X ‚âà‚Çò Y ‚Üí F‚Ä≤ e p X ‚âà‚Çò[ p ] F‚Ä≤ e p Y
F‚Ä≤-cong e p X‚âàY _ j = foldr‚Å∫ _‚âà_ ‚äï-cong ‚âà-refl (tabulate‚Å∫ (A‚Çú-cong _ e p (Œª _ ‚Üí X‚âàY _)))

F‚Ä≤-isAsyncIterable : IsAsyncIterable _‚âà‚Çú_ F‚Ä≤ I
F‚Ä≤-isAsyncIterable = record
  { isDecEquivalence·µ¢ = IndexedDecSetoid.isDecEquivalence·µ¢ Dec‚ÑùùïÑ‚Çõ‚Å±
  ; F-cong            = F‚Ä≤-cong
  }

F‚à• : AsyncIterable a ‚Ñì n
F‚à• = record
  { isAsyncIterable = F‚Ä≤-isAsyncIterable
  }

------------------------------------------------------------------------
-- The asynchronous state function
--
-- Given a schedule "œà" and an initial state "X" then "Œ¥ œà X t" is
-- the resulting state at time "t"

Œ¥ : Schedule n ‚Üí RoutingMatrix ‚Üí ùïã ‚Üí RoutingMatrix
Œ¥ = asyncIter F‚à•
