open import Data.Nat using (suc; zero; _+_; _‚â§_)
open import Data.List using (List)
open import Data.Fin using (Fin) renaming (zero to fzero; suc to fsuc)
open import Data.Fin.Properties using () renaming (_‚âü_ to _‚âü·∂†_)
open import Data.Fin.Subset using (_‚àà_)
open import Data.Fin.Dec using (_‚àà?_)
open import Data.List.Any as Any using (satisfied)
open import Data.List.All using (All; []; _‚à∑_; all) renaming (lookup to all-lookup)
open import Data.Vec using (Vec; tabulate; lookup; toList)
open import Data.Vec.Properties using (‚àà-allFin; lookup‚àòtabulate)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; _,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ)
open import Relation.Binary using (_‚áí_; Setoid; Rel; Reflexive; Symmetric; Transitive; IsEquivalence; Decidable)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; cong; subst; subst‚ÇÇ) renaming (setoid to ‚â°-setoid; refl to ‚â°-refl; trans to ‚â°-trans; sym to ‚â°-sym)
open import Algebra.FunctionProperties using (RightIdentity; RightZero; Commutative; Associative; Selective)

open import RoutingLib.Asynchronous using (Parallelisation)
open import RoutingLib.Asynchronous.Schedule using (Schedule)
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Data.Vec.Properties using (lookup-map)
open import RoutingLib.Relation.Binary.RespectedBy using (_RespectedBy_)
open import RoutingLib.Routing.Definitions
open import RoutingLib.Data.Vec.All.Properties using (foldr‚ÇÇ-All‚ÇÇ; tabulate-All‚ÇÇ)
open import RoutingLib.Induction.Nat using () renaming (<-well-founded to <-wf)

module RoutingLib.Routing.Algorithms.BellmanFord.Properties
  {a b ‚Ñì n} (rp : RoutingProblem a b ‚Ñì n)
  where

  -----------
  -- Setup --
  -----------

  open RoutingProblem rp
  open import RoutingLib.Routing.Algorithms.BellmanFord rp
  open import RoutingLib.Data.Vec.SelectiveFolds S _‚äï_ ‚äï-pres-‚âà

  open import RoutingLib.Algebra.Selectivity.NaturalOrders S _‚äï_ ‚äï-pres-‚âà using (_‚â§·µ£_; ‚â§·µ£-antisym; ‚â§·µ£-resp-‚âà)
  open import Relation.Binary.NonStrictToStrict _‚âà_ _‚â§·µ£_ using () renaming (_<_ to _<·µ£_)


  abstract

    ---------------------
    -- Identity matrix --
    ---------------------

    I·µ¢·µ¢‚âà1# : ‚àÄ i ‚Üí I i i ‚âà 1#
    I·µ¢·µ¢‚âà1# i with i ‚âü·∂† i
    ... | yes _   = refl
    ... | no  i‚â¢i = contradiction ‚â°-refl i‚â¢i

    I·µ¢‚±º‚âà0# : ‚àÄ {i j} ‚Üí j ‚â¢ i ‚Üí I i j ‚âà 0#
    I·µ¢‚±º‚âà0# {i} {j} i‚â¢j with j ‚âü·∂† i
    ... | yes i‚â°j = contradiction i‚â°j i‚â¢j
    ... | no  _   = refl

    I·µ¢‚±º‚âàI‚Çñ‚Çó : ‚àÄ {i j k l} ‚Üí j ‚â¢ i ‚Üí l ‚â¢ k ‚Üí I i j ‚âà I k l
    I·µ¢‚±º‚âàI‚Çñ‚Çó j‚â¢i l‚â¢k = trans (I·µ¢‚±º‚âà0# j‚â¢i) (sym (I·µ¢‚±º‚âà0# l‚â¢k))



    ----------------------------
    -- Synchronous properties --
    ----------------------------

    œÉ-cong : ‚àÄ {X Y} ‚Üí X ‚âà‚Çò Y ‚Üí œÉ X ‚âà‚Çò œÉ Y
    œÉ-cong X‚âàY i j = foldr‚ÇÇ-All‚ÇÇ _‚âà_ ‚äï-pres-‚âà refl (tabulate-All‚ÇÇ _‚âà_ (Œª k ‚Üí ‚ñ∑-pres-‚âà (A i k) (X‚âàY k j)))

    -- œÉ either extends the route by going through some k or it chooses a trivial route from the identity matrix
    œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º : Selective _‚âà_ _‚äï_ ‚Üí ‚àÄ X i j ‚Üí (‚àÉ Œª k ‚Üí œÉ X i j ‚âà A i k ‚ñ∑ X k j) ‚äé (œÉ X i j ‚âà I i j)
    œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º ‚äï-sel X i j with ‚àÉ-foldr ‚äï-sel (I i j) (tabulate (Œª k ‚Üí A i k ‚ñ∑ X k j))
    ... | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàext‚Çñ) = inj‚ÇÅ (k , (trans œÉX·µ¢‚±º‚âàext‚Çñ (reflexive (lookup‚àòtabulate _ k))))
    ... | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º  = inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º

    -- Under the following assumptions about ‚äï, A‚ñ∑‚Çò always chooses the "best" option with respect to ‚äï
    œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º : Selective _‚âà_ _‚äï_ ‚Üí Commutative _‚âà_ _‚äï_ ‚Üí Associative _‚âà_ _‚äï_ ‚Üí ‚àÄ X i j k ‚Üí œÉ X i j ‚â§·µ£ A i k ‚ñ∑ X k j
    œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º ‚äï-sel ‚äï-comm ‚äï-assoc X i j k = trans (‚äï-pres-‚âà (sym (reflexive (lookup‚àòtabulate _ k))) refl) (foldr‚Çì‚Çõ‚â§xs·µ¢ ‚äï-sel ‚äï-comm ‚äï-assoc (I i j) (tabulate (Œª k ‚Üí A i k ‚ñ∑ X k j)) k)

    -- After an iteration, the diagonal of the RMatrix is always the identity
    œÉX·µ¢·µ¢‚âàI·µ¢·µ¢ : Selective _‚âà_ _‚äï_ ‚Üí Associative _‚âà_ _‚äï_ ‚Üí Commutative _‚âà_ _‚äï_ ‚Üí RightZero _‚âà_ 1# _‚äï_ ‚Üí ‚àÄ X i ‚Üí œÉ X i i ‚âà I i i
    œÉX·µ¢·µ¢‚âàI·µ¢·µ¢ ‚äï-sel ‚äï-assoc ‚äï-comm 1#-an·µ£-‚äï X i with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º ‚äï-sel X i i
    ... | inj‚ÇÇ œÉX·µ¢·µ¢‚âàI·µ¢·µ¢ = œÉX·µ¢·µ¢‚âàI·µ¢·µ¢
    ... | inj‚ÇÅ (k , œÉX·µ¢·µ¢‚âàA·µ¢‚ÇñX‚Çñ‚±º) = ‚â§·µ£-antisym ‚äï-comm (foldr‚Çë‚â§e ‚äï-sel ‚äï-comm ‚äï-assoc (I i i) (tabulate (Œª k ‚Üí A i k ‚ñ∑ X k i))) (‚â§·µ£-resp-‚âà (sym (I·µ¢·µ¢‚âà1# i)) (sym (trans œÉX·µ¢·µ¢‚âàA·µ¢‚ÇñX‚Çñ‚±º refl)) (1#-an·µ£-‚äï (A i k ‚ñ∑ X k i)))

    -- After an iteration, the diagonals of any two RMatrices are equal
    œÉX·µ¢·µ¢‚âàœÉY·µ¢·µ¢ : Selective _‚âà_ _‚äï_ ‚Üí Associative _‚âà_ _‚äï_ ‚Üí Commutative _‚âà_ _‚äï_ ‚Üí RightZero _‚âà_ 1# _‚äï_ ‚Üí ‚àÄ X Y i ‚Üí œÉ X i i ‚âà œÉ Y i i
    œÉX·µ¢·µ¢‚âàœÉY·µ¢·µ¢ ‚äï-sel ‚äï-assoc ‚äï-comm 1#-an·µ£-‚äï X Y i = trans (œÉX·µ¢·µ¢‚âàI·µ¢·µ¢ ‚äï-sel ‚äï-assoc ‚äï-comm 1#-an·µ£-‚äï X i) (sym (œÉX·µ¢·µ¢‚âàI·µ¢·µ¢ ‚äï-sel ‚äï-assoc ‚äï-comm 1#-an·µ£-‚äï Y i))

    {-
    -- A sufficient (but not necessary condition) for œÉX·µ¢‚±º ‚âà œÉY·µ¢‚±º
    œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º : Selective _‚âà_ _‚äï_ ‚Üí Associative _‚âà_ _‚äï_ ‚Üí Commutative _‚âà_ _‚äï_ ‚Üí ‚àÄ X Y i j
              ‚Üí (‚àÄ k ‚Üí (A i k ‚ñ∑ X k j ‚âà A i k ‚ñ∑ Y k j) ‚äé ((‚àÉ Œª l ‚Üí (A i l ‚ñ∑ X l j) <·µ£ (A i k ‚ñ∑ X k j)) √ó (‚àÉ Œª m ‚Üí (A i m ‚ñ∑ Y m j) <·µ£ (A i k ‚ñ∑ Y k j)))) ‚Üí œÉ X i j ‚âà œÉ Y i j
    œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º ‚äï-sel ‚äï-assoc ‚äï-comm X Y i j eqCon = foldr‚Çì‚Çõ‚âàfoldr·µ•‚Çõ ‚äï-sel ‚äï-comm ‚äï-assoc (I i j) (extensions X i j) (extensions Y i j) adjust
      where
      adjust : ‚àÄ k ‚Üí (lookup k (extensions X i j) ‚âà lookup k (extensions Y i j))
        ‚äé ‚àÉ (Œª l ‚Üí (lookup l (extensions X i j)) <·µ£ (lookup k (extensions X i j)))
          √ó ‚àÉ (Œª m ‚Üí (lookup m (extensions Y i j)) <·µ£ (lookup k (extensions Y i j)))
      adjust k rewrite lookup-extensions X i j k | lookup-extensions Y i j k with eqCon k
      ... | inj‚ÇÅ A·µ¢‚ÇñX‚Çñ‚±º‚âàA·µ¢‚ÇñY‚Çñ‚±º                           = inj‚ÇÅ A·µ¢‚ÇñX‚Çñ‚±º‚âàA·µ¢‚ÇñY‚Çñ‚±º
      ... | inj‚ÇÇ ((l , A·µ¢‚ÇóX‚Çó‚±º<A‚Çñ‚±ºX‚Çñ‚±º) , (m , A·µ¢‚ÇòY‚Çò‚±º<A·µ¢‚ÇñY‚Çñ‚±º)) = inj‚ÇÇ ((l , subst‚ÇÇ _<·µ£_ (‚â°-sym (lookup-extensions X i j l)) ‚â°-refl A·µ¢‚ÇóX‚Çó‚±º<A‚Çñ‚±ºX‚Çñ‚±º) , (m , subst‚ÇÇ _<·µ£_ (‚â°-sym (lookup-extensions Y i j m)) ‚â°-refl A·µ¢‚ÇòY‚Çò‚±º<A·µ¢‚ÇñY‚Çñ‚±º))
    -}


    -----------------------------
    -- Asynchronous properties --
    -----------------------------

    module _ (ùï§ : Schedule n) where

      open Schedule ùï§
      open Parallelisation œÉ‚à• using (Œ¥')
    
      open import RoutingLib.Asynchronous.Properties œÉ‚à• using (Œ¥-activated; Œ¥-unactivated)

      Œ¥-constantSinceActivation : ‚àÄ X i {t t'} ‚Üí t' ‚â§ t ‚Üí (‚àÄ {t''} ‚Üí t'' ‚â§ t ‚Üí i ‚àà Œ± t'' ‚Üí t'' ‚â§ t') ‚Üí ‚àÄ j ‚Üí Œ¥ ùï§ t X i j ‚âà Œ¥ ùï§ t' X i j
      Œ¥-constantSinceActivation X i t'‚â§t t'-latest = Œ¥-unactivated œÉ-cong ùï§ X i t'‚â§t t'-latest 

      Œ¥·µó‚Å∫¬πX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑Œ¥·µóX‚Çñ‚±º‚äéI·µ¢‚±º : Selective _‚âà_ _‚äï_ ‚Üí ‚àÄ {t} X {i} ‚Üí i ‚àà Œ± (suc t) ‚Üí ‚àÄ j ‚Üí (‚àÉ Œª k ‚Üí Œ¥ ùï§ (suc t) X i j ‚âà A i k ‚ñ∑ Œ¥ ùï§ (Œ≤ (suc t) i k) X k j) ‚äé (Œ¥ ùï§ (suc t) X i j ‚âà I i j)
      Œ¥·µó‚Å∫¬πX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑Œ¥·µóX‚Çñ‚±º‚äéI·µ¢‚±º ‚äï-sel {t} X {i} i‚ààŒ±‚ÇÅ‚Çä‚Çú j with Œ¥-activated œÉ-cong ùï§ X t i‚ààŒ±‚ÇÅ‚Çä‚Çú | œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º ‚äï-sel (Œª k ‚Üí Œ¥ ùï§ (Œ≤ (suc t) i k) X k) i j
      ... | Œ¥¬π‚Å∫·µóX·µ¢‚âàœÉ·µáX‚Çñ | inj‚ÇÅ (k , œÉ·µáX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑Œ¥·µáX‚Çñ‚±º) = inj‚ÇÅ (k , trans (Œ¥¬π‚Å∫·µóX·µ¢‚âàœÉ·µáX‚Çñ j) œÉ·µáX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑Œ¥·µáX‚Çñ‚±º)
      ... | Œ¥¬π‚Å∫·µóX·µ¢‚âàœÉ·µáX‚Çñ | inj‚ÇÇ œÉ·µáX·µ¢‚±º‚âàI·µ¢‚±º            = inj‚ÇÇ (trans (Œ¥¬π‚Å∫·µóX·µ¢‚âàœÉ·µáX‚Çñ j) œÉ·µáX·µ¢‚±º‚âàI·µ¢‚±º)

  --œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º ‚äï-sel X i j with ‚àÉ-foldr ‚äï-sel (I i j) (extensions X i j)
  --... | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàext‚Çñ) = inj‚ÇÅ (k , (trans œÉX·µ¢‚±º‚âàext‚Çñ (reflexive (lookup-extensions X i j k))))
  --... | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º  = inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º

