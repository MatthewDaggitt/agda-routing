open import Algebra.Definitions
open import Data.Fin using (zero; suc; Fin)
open import Data.Fin.Subset using (Subset; ‚ä§; ‚ä•)
open import Data.Fin.Subset.Properties using (_‚àà?_)
open import Data.List using (tabulate)
import Data.List.Relation.Binary.Permutation.Setoid as PermutationEq
open import Data.Nat using (zero; suc; z‚â§n; s‚â§s; _‚â§_; _<_; _‚à∏_)
open import Data.Nat.Induction using (Acc; acc; <-wellFounded)
open import Data.Nat.Properties as ‚Ñï‚Çö using (n‚â§1+n; m‚à∏n‚â§m; ‚â§-refl)
open import Data.Product using (_,_)
open import Data.Vec.Functional.Relation.Binary.Pointwise.Properties using () renaming (decSetoid to decSetoid·µ•)
open import Function using (const; id)
open import Level using (0‚Ñì; _‚äî_)
open import Relation.Binary using (Decidable; DecSetoid)
open import Relation.Binary.Indexed.Homogeneous using (IsIndexedEquivalence; IsIndexedDecEquivalence; IndexedDecSetoid)
import Relation.Binary.Reasoning.Setoid as EqReasoning
open import Relation.Nullary using (yes; no)

import RoutingLib.Data.List.Relation.Binary.Permutation.Setoid.Properties as PermutationProperties
open import RoutingLib.Routing.Algebra using (RawRoutingAlgebra; IsRoutingAlgebra)
open import RoutingLib.Routing as Routing using () renaming (AdjacencyMatrix to AdjacencyMatrix')
import RoutingLib.lmv34.Gamma_zero as Gamma_zero
import RoutingLib.lmv34.Gamma_zero.Algebra as Gamma_zero_Algebra
import RoutingLib.lmv34.Gamma_zero.Properties as Gamma_zero_Properties
import RoutingLib.lmv34.Gamma_one as Gamma_one
import RoutingLib.lmv34.Gamma_one.Algebra as Gamma_one_Algebra
import RoutingLib.lmv34.Gamma_one.Properties as Gamma_one_Properties
import RoutingLib.lmv34.Omega_zero as Omega_zero
open import RoutingLib.Iteration.Synchronous using (_^_)
open import RoutingLib.Iteration.Asynchronous.Static using (AsyncIterable; asyncIter; asyncIter')
open import RoutingLib.Iteration.Asynchronous.Static.Schedule using (Schedule; ùïã)
open import RoutingLib.Iteration.Asynchronous.Static.Schedule.Construct.Synchronous using (œàÀ¢ ∏‚Åø·∂ú; œàÀ¢ ∏‚Åø·∂ú-isSynchronous)
open import RoutingLib.Relation.Binary.Indexed.Homogeneous

module RoutingLib.lmv34.Omega_one
  {a b ‚Ñì} {algebra : RawRoutingAlgebra a b ‚Ñì}
  (isRoutingAlgebra : IsRoutingAlgebra algebra)
  {n} (A : AdjacencyMatrix' algebra n)
  where

open Routing algebra n renaming (_‚âà‚Çò_ to infix 3 _‚âà‚Çò_)
open RawRoutingAlgebra algebra using (_‚ñ∑_; ‚âà-refl) renaming (S to ùïä)
open Gamma_zero algebra A using (Œì‚ÇÄ)
open Gamma_zero_Algebra algebra n using (_‚äï‚Çò_; _„Äî_„Äï)
open Gamma_zero_Properties algebra A using (Œì‚ÇÄ-cong; ‚äï‚Çò-cong)
open Gamma_one isRoutingAlgebra A using (Œì‚ÇÅ)
open Gamma_one_Algebra isRoutingAlgebra n using (RoutingSet; RoutingVector; _‚âà·µ•_; ‚âà·µ•-refl; ‚âà·µ•-sym; ‚®Å‚Çõ; _‚äï·µ•_; _‚Ä†; ~_; ‚îÄ_; lookup-d; _[_]; _„Äö_„Äõ; FinRoute-setoid; FinRoute-decSetoid)
open Gamma_one_Properties isRoutingAlgebra A using (Œì‚ÇÅ-cong; ‚äï-distributive; ‚®Å‚Çõ-cong; []-cong; ‚äï·µ•-cong; Lemma-Œì‚ÇÄ=Œì‚ÇÅ; „Äö„Äõ-cong)
open Omega_zero algebra A using (Œ©‚ÇÄ'; Œ©‚ÇÄ; [_,_]_)
open PermutationEq FinRoute-setoid
open PermutationProperties FinRoute-setoid using (_‚Ü≠?_; ‚Ü≠-decSetoid)
open DecSetoid FinRoute-decSetoid using () renaming (_‚âü_ to _‚âü·µ£_; refl to ‚âà·µ£-refl)

‚âà·µ•-decSetoid·µ¢ : IndexedDecSetoid _ _ _
‚âà·µ•-decSetoid·µ¢ = triviallyIndexDecSetoid (Fin n) (‚Ü≠-decSetoid _‚âü·µ£_)

-- Generalised (asynchronous) matrix multiplication
_‚ü¶_‚üß' : AdjacencyMatrix ‚Üí (Fin n ‚Üí Fin n ‚Üí RoutingSet) ‚Üí RoutingVector
(A ‚ü¶ f ‚üß') i = ‚®Å‚Çõ (Œª q ‚Üí (A i q ‚ñ∑_) [ f i q ])

‚ü¶_‚üß-cong' : ‚àÄ {A} {V V'} ‚Üí (‚àÄ i ‚Üí V i ‚âà·µ• V' i) ‚Üí A ‚ü¶ V ‚üß' ‚âà·µ• A ‚ü¶ V' ‚üß'
‚ü¶_‚üß-cong' V=V' i = ‚®Å‚Çõ-cong (Œª {q} ‚Üí []-cong (V=V' i q))

-- Generalised (asynchronous) operator
Œì‚ÇÅ' : (Fin n ‚Üí Fin n ‚Üí RoutingSet) ‚Üí RoutingVector
Œì‚ÇÅ' f = A ‚ü¶ f ‚üß' ‚äï·µ• ~ I

Œì‚ÇÅ-cong' : ‚àÄ {V V'} ‚Üí (‚àÄ i ‚Üí V i ‚âà·µ• V' i) ‚Üí Œì‚ÇÅ' V ‚âà·µ• Œì‚ÇÅ' V'
Œì‚ÇÅ-cong' V=V' = ‚äï·µ•-cong (‚ü¶_‚üß-cong' V=V') (‚âà·µ•-refl {~ I})

-- TODO: Implement this using the [_,_]_ instead.
Œì‚ÇÅ‚à• : AsyncIterable _ _ _
Œì‚ÇÅ‚à• = record {
  S·µ¢   = const RoutingSet;
  _‚âà·µ¢_ = _‚Ü≠_;
  F    = Œì‚ÇÅ;
  isAsyncIterable = record {
    isDecEquivalence·µ¢ = isDecEquivalence·µ¢;
    F-cong = Œì‚ÇÅ-cong
    }
  }
  where open IndexedDecSetoid ‚âà·µ•-decSetoid·µ¢

Œ©‚ÇÅ' : Schedule n ‚Üí RoutingVector ‚Üí {t : ùïã} ‚Üí Acc _<_ t ‚Üí RoutingVector
Œ©‚ÇÅ' = asyncIter' Œì‚ÇÅ‚à•

Œ©‚ÇÅ : Schedule n ‚Üí RoutingVector ‚Üí ùïã ‚Üí RoutingVector
Œ©‚ÇÅ œà V t = Œ©‚ÇÅ' œà V (<-wellFounded t)

-- Schedule reduction Œ©‚ÇÅ ‚Üí Œ©‚ÇÄ
r‚ÇÅ : ‚àÄ {n} ‚Üí Schedule n ‚Üí Schedule n
r‚ÇÅ = id

-- Lemmas
-- Maybe try to merely have a unique destination postulate for RoutingVectors
postulate
  ~-‚îÄ-inverse : ‚àÄ V ‚Üí ~(‚îÄ V) ‚âà·µ• V -- requires uniqueness of destination
  ‚îÄ-~-inverse : ‚àÄ X ‚Üí ‚îÄ(~ X) ‚âà‚Çò X
  ‚îÄ-cong : ‚àÄ {U V} ‚Üí U ‚âà·µ• V ‚Üí ‚îÄ U ‚âà‚Çò ‚îÄ V -- requires uniqueness of destination

‚îÄ-‚äï-distributive : ‚àÄ U V ‚Üí ‚îÄ (U ‚äï·µ• V) ‚âà‚Çò (‚îÄ U) ‚äï‚Çò (‚îÄ V)
‚îÄ-‚äï-distributive U V = begin
  ‚îÄ (U ‚äï·µ• V)               ‚âà‚ü® ‚îÄ-cong (‚äï·µ•-cong (‚âà·µ•-sym (~-‚îÄ-inverse U)) (‚âà·µ•-sym (~-‚îÄ-inverse V))) ‚ü©
  ‚îÄ ((~(‚îÄ U)) ‚äï·µ• (~(‚îÄ V))) ‚âà‚ü® ‚îÄ-cong (‚âà·µ•-sym (‚äï-distributive (‚îÄ U) (‚îÄ V))) ‚ü©
  ‚îÄ (~ ((‚îÄ U) ‚äï‚Çò (‚îÄ V)))   ‚âà‚ü® ‚îÄ-~-inverse ((‚îÄ U) ‚äï‚Çò (‚îÄ V)) ‚ü©
  (‚îÄ U) ‚äï‚Çò (‚îÄ V) ‚àé
  where open EqReasoning ‚ÑùùïÑ‚Çõ

‚îÄ-„Äö_„Äõ-distributive : ‚àÄ A V ‚Üí ‚îÄ (A „Äö V „Äõ) ‚âà‚Çò A „Äî ‚îÄ V „Äï
‚îÄ-„Äö_„Äõ-distributive A V = begin
  ‚îÄ (A „Äö V „Äõ)       ‚âà‚ü® ‚îÄ-cong („Äö„Äõ-cong (‚âà·µ•-sym (~-‚îÄ-inverse V))) ‚ü©
  ‚îÄ (A „Äö ~(‚îÄ V) „Äõ)  ‚âà‚ü® ‚îÄ-cong Lemma-Œì‚ÇÄ=Œì‚ÇÅ ‚ü©
  ‚îÄ (~ (A „Äî ‚îÄ V „Äï)) ‚âà‚ü® ‚îÄ-~-inverse (A „Äî ‚îÄ V „Äï) ‚ü©
  A „Äî ‚îÄ V „Äï ‚àé
  where open EqReasoning ‚ÑùùïÑ‚Çõ

-- Theorem 3 (dual)
Œì‚ÇÄ=Œì‚ÇÅ-dual : ‚àÄ V ‚Üí ‚îÄ(Œì‚ÇÅ V) ‚âà‚Çò Œì‚ÇÄ (‚îÄ V)
Œì‚ÇÄ=Œì‚ÇÅ-dual V = begin
  ‚îÄ(Œì‚ÇÅ V)            ‚â°‚ü®‚ü©
  ‚îÄ(A „Äö V „Äõ ‚äï·µ• ~ I) ‚âà‚ü® ‚îÄ-‚äï-distributive (A „Äö V „Äõ) (~ I) ‚ü©
  ‚îÄ(A „Äö V „Äõ) ‚äï‚Çò ‚îÄ(~ I) ‚âà‚ü® ‚äï‚Çò-cong (‚îÄ-„Äö_„Äõ-distributive A V) (‚îÄ-~-inverse I) ‚ü©
  A „Äî ‚îÄ V „Äï ‚äï‚Çò I ‚â°‚ü®‚ü©
  Œì‚ÇÄ (‚îÄ V) ‚àé
  where open EqReasoning ‚ÑùùïÑ‚Çõ

‚îÄ-[_,_]-distributive : ‚àÄ U V S ‚Üí ‚îÄ([ U , V ] S) ‚âà‚Çò [ (‚îÄ U) , (‚îÄ V) ] S
‚îÄ-[_,_]-distributive U V S i j with i ‚àà? S
... | yes _ = ‚âà-refl
... | no _  = ‚âà-refl

-- Move to Omega_2
‚äï-[_,_]-distributive : ‚àÄ U V W S ‚Üí ([ U , V ] S) ‚äï·µ• W ‚âà·µ• [ U ‚äï·µ• W , V ‚äï·µ• W ] S
‚äï-[_,_]-distributive U V W S i with i ‚àà? S
... | yes _ = ‚Ü≠-refl
... | no _  = ‚Ü≠-refl

-- Theorems
-- TODO: Represent Œ©‚ÇÅ using the [_,_]_ operator
module _ (œà : Schedule n) where
  open Schedule œà
  
  Œ©‚ÇÅ'=Œ©‚ÇÄ' : ‚àÄ V {t} (acc‚Çú : Acc _<_ t) ‚Üí ‚îÄ (Œ©‚ÇÅ' œà V acc‚Çú) ‚âà‚Çò Œ©‚ÇÄ' (r‚ÇÅ œà) (‚îÄ V) acc‚Çú
  Œ©‚ÇÅ'=Œ©‚ÇÄ' V {zero}  _           = ‚âà‚Çò-refl
  Œ©‚ÇÅ'=Œ©‚ÇÄ' V {suc t} (acc rec) i with i ‚àà? Œ± (suc t)
  ... | no _ = Œ©‚ÇÅ'=Œ©‚ÇÄ' V (rec t ‚â§-refl) i
  ... | yes _ = prf
    where Œ≤ÃÇ< : ‚àÄ j ‚Üí Œ≤ (suc t) i j < suc t
          Œ≤ÃÇ< j = s‚â§s (Œ≤-causality t i j)
          prf : (‚îÄ (Œì‚ÇÅ Œª j ‚Üí Œ©‚ÇÅ' œà V (rec (Œ≤ (suc t) i j) (Œ≤ÃÇ< j)) j)) i ‚âà‚Çú (Œì‚ÇÄ Œª j ‚Üí Œ©‚ÇÄ' œà (‚îÄ V) (rec (Œ≤ (suc t) i j) (Œ≤ÃÇ< j)) j) i
          prf = begin
           (‚îÄ (Œì‚ÇÅ Œª j ‚Üí (Œ©‚ÇÅ' œà V (rec (Œ≤ (suc t) i j) (Œ≤ÃÇ< j))) j)) i ‚âà‚ü® Œì‚ÇÄ=Œì‚ÇÅ-dual (Œª j ‚Üí (Œ©‚ÇÅ' œà V (rec (Œ≤ (suc t) i j) (Œ≤ÃÇ< j))) j) i ‚ü©
           (Œì‚ÇÄ (‚îÄ Œª j ‚Üí (Œ©‚ÇÅ' œà V (rec (Œ≤ (suc t) i j) (Œ≤ÃÇ< j))) j)) i ‚âà‚ü® (Œì‚ÇÄ-cong Œª j ‚Üí Œ©‚ÇÅ'=Œ©‚ÇÄ' V (rec (Œ≤ (suc t) i j) (Œ≤ÃÇ< j)) j) i ‚ü©
           (Œì‚ÇÄ Œª j ‚Üí (Œ©‚ÇÄ' œà (‚îÄ V) (rec (Œ≤ (suc t) i j) (Œ≤ÃÇ< j))) j) i ‚àé
           where open EqReasoning ‚Ñùùïã‚Çõ

Œ©‚ÇÅ=Œ©‚ÇÄ : ‚àÄ œà V t ‚Üí ‚îÄ (Œ©‚ÇÅ œà V t) ‚âà‚Çò Œ©‚ÇÄ (r‚ÇÅ œà) (‚îÄ V) t
Œ©‚ÇÅ=Œ©‚ÇÄ œà V t = Œ©‚ÇÅ'=Œ©‚ÇÄ' œà V (<-wellFounded t)

Œ©‚ÇÅÀ¢ ∏‚Åø·∂ú=Œì‚ÇÅ : ‚àÄ V t ‚Üí Œ©‚ÇÅ œàÀ¢ ∏‚Åø·∂ú V t ‚âà·µ• (Œì‚ÇÅ ^ t) V
Œ©‚ÇÅÀ¢ ∏‚Åø·∂ú=Œì‚ÇÅ = œàÀ¢ ∏‚Åø·∂ú-isSynchronous Œì‚ÇÅ‚à•
