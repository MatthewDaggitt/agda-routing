

open import Data.Product using (_×_; _-×-_; _,_)
open import Data.Sum using (_⊎_; _-⊎-_; inj₁; inj₂)
open import Relation.Binary using (Rel; _⇒_; Symmetric; Antisymmetric; Transitive)
open import Relation.Nullary using (¬_)
open import Relation.Nullary.Negation using (contradiction)

import RoutingLib.Relation.Binary.StrictSingleLex as Strict
import Relation.Binary.NonStrictToStrict as Conv

module RoutingLib.Relation.Binary.Product.PreorderLex {a ℓ₁ ℓ₂} {A : Set a} (_≤₁_ : Rel A ℓ₁) (_≤₂_ : Rel A ℓ₂) where

  ×-Lex : Rel A _
  ×-Lex x y = (x ≤₁ y × ¬ (y ≤₁ x)) ⊎ (((x ≤₁ y × y ≤₁ x) ⊎ (¬ (x ≤₁ y) × ¬ (y ≤₁ x))) × x ≤₂ y)

  ×-reflexive : ∀ {ℓ₃} {_≈_ : Rel A ℓ₃} → Symmetric _≈_ → _≈_ ⇒ _≤₁_ → _≈_ ⇒ _≤₂_ → _≈_ ⇒ ×-Lex
  ×-reflexive sym refl₁ refl₂ i≈j = inj₂ ((inj₁ (refl₁ i≈j , refl₁ (sym i≈j))) , (refl₂ i≈j))

  ×-transitive : Transitive _≤₁_ → Transitive ×-Lex
  ×-transitive trans (inj₁ (x≤y , _))   (inj₁ (y≤z , z≰y))            = inj₁ (trans x≤y y≤z , (λ z≤x → z≰y (trans z≤x x≤y)))
  ×-transitive trans (inj₁ (x≤y , y≰x)) (inj₂ (inj₁ (y≤z , _) , _)) = inj₁ (trans x≤y y≤z , (λ z≤x → y≰x (trans y≤z z≤x)))
  ×-transitive trans (inj₁ (x≤y , y≰x)) (inj₂ (inj₂ (y≰z , z≰y) , t)) = inj₁ ({!!} , {!!})
  ×-transitive trans (inj₂ y) y₁ = {!!}

  ×-antisymmetric : ∀ {ℓ₃} {_≈_ : Rel A ℓ₃} → Antisymmetric _≈_ _≤₂_ → Antisymmetric _≈_ ×-Lex
  ×-antisymmetric antisym (inj₁ (x≤y , _))            (inj₁ (_ , x≰y))            = contradiction x≤y x≰y
  ×-antisymmetric antisym (inj₁ (_ , y≰x))            (inj₂ (inj₁ (y≤x , _) , _)) = contradiction y≤x y≰x
  ×-antisymmetric antisym (inj₁ (x≤y , _))            (inj₂ (inj₂ (_ , x≰y) , _)) = contradiction x≤y x≰y
  ×-antisymmetric antisym (inj₂ (inj₁ (x≤y , _) , _)) (inj₁ (_ , x≰y))            = contradiction x≤y x≰y
  ×-antisymmetric antisym (inj₂ (_ , x≤y))            (inj₂ (_ , y≤x))            = antisym x≤y y≤x
  ×-antisymmetric antisym (inj₂ (inj₂ (_ , y≰x) , _)) (inj₁ (y≤x , _))            = contradiction y≤x y≰x

{-
  
-}
