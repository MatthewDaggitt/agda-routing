open import Algebra.Definitions
open import Data.Fin using (zero; suc; Fin)
open import Data.Fin.Subset using (Subset; ‚ä§; ‚ä•)
open import Data.Fin.Subset.Properties using (_‚àà?_)
open import Data.List using (tabulate)
import Data.List.Relation.Binary.Permutation.Setoid as PermutationEq
open import Data.Nat using (zero; suc; z‚â§n; s‚â§s; _‚â§_; _<_; _‚à∏_)
open import Data.Nat.Induction using (Acc; acc; <-wellFounded)
open import Data.Nat.Properties as ‚Ñï‚Çö using (n‚â§1+n; m‚à∏n‚â§m; ‚â§-refl)
open import Data.Product using (_,_)
open import Data.Vec.Functional.Relation.Binary.Pointwise.Properties using () renaming (decSetoid to decSetoid·µ•)
open import Function using (const; id)
open import Level using (0‚Ñì; _‚äî_)
open import Relation.Binary using (Decidable; DecSetoid)
open import Relation.Binary.Indexed.Homogeneous using (IsIndexedEquivalence; IsIndexedDecEquivalence; IndexedDecSetoid)
import Relation.Binary.Reasoning.Setoid as EqReasoning
open import Relation.Nullary using (yes; no)

import RoutingLib.Data.List.Relation.Binary.Permutation.Setoid.Properties as PermutationProperties
open import RoutingLib.Routing.Algebra using (RawRoutingAlgebra; IsRoutingAlgebra)
open import RoutingLib.Routing as Routing using () renaming (AdjacencyMatrix to AdjacencyMatrix')
import RoutingLib.lmv34.Gamma_zero as Gamma_zero
import RoutingLib.lmv34.Gamma_zero.Algebra as Gamma_zero_Algebra
import RoutingLib.lmv34.Gamma_zero.Properties as Gamma_zero_Properties
import RoutingLib.lmv34.Gamma_one as Gamma_one
import RoutingLib.lmv34.Gamma_one.Algebra as Gamma_one_Algebra
import RoutingLib.lmv34.Gamma_one.Properties as Gamma_one_Properties
import RoutingLib.lmv34.Omega_zero as Omega_zero
open import RoutingLib.Iteration.Synchronous using (_^_)
open import RoutingLib.Iteration.Asynchronous.Static using (AsyncIterable; asyncIter; asyncIter')
open import RoutingLib.Iteration.Asynchronous.Static.Schedule using (Schedule; ùïã)
open import RoutingLib.Iteration.Asynchronous.Static.Schedule.Construct.Synchronous using (œàÀ¢ ∏‚Åø·∂ú; œàÀ¢ ∏‚Åø·∂ú-isSynchronous; Œ±À¢ ∏‚Åø·∂ú)
open import RoutingLib.Relation.Binary.Indexed.Homogeneous

module RoutingLib.lmv34.Omega_one
  {a b ‚Ñì} {algebra : RawRoutingAlgebra a b ‚Ñì}
  (isRoutingAlgebra : IsRoutingAlgebra algebra)
  {n} (A : AdjacencyMatrix' algebra n)
  where

open Routing algebra n renaming (_‚âà‚Çò_ to infix 3 _‚âà‚Çò_)
open RawRoutingAlgebra algebra using (_‚ñ∑_; ‚âà-refl) renaming (S to ùïä)
open Gamma_zero algebra A using (Œì‚ÇÄ)
open Gamma_zero_Algebra algebra n using (_‚äï‚Çò_; ‚®Å; _„Äî_„Äï)
open Gamma_zero_Properties algebra A using (Œì‚ÇÄ-cong; ‚äï‚Çò-cong)
open Gamma_one isRoutingAlgebra A using (Œì‚ÇÅ)
open Gamma_one_Algebra isRoutingAlgebra n using (RoutingSet; RoutingVector; _‚âà·µ•_; ‚âà·µ•-refl; ‚âà·µ•-sym; ùïç‚Çõ; ‚âà·µ•-trans; ‚®Å‚Çõ; map‚ÇÇ; _‚äï·µ•_; _‚Ä†; ~_; ‚îÄ_; lookup-d; _[_]; _„Äö_„Äõ; FinRoute-setoid; FinRoute-decSetoid)
open Gamma_one_Properties isRoutingAlgebra A using (Œì‚ÇÅ-cong; ‚äï-distributive; ‚®Å‚Çõ-cong; []-cong; ‚äï·µ•-cong; Lemma-Œì‚ÇÄ=Œì‚ÇÅ; „Äö„Äõ-cong; LemmaA‚ÇÇ-iter; ~-lemma)
open Omega_zero algebra A using (Œ©‚ÇÄ'; Œ©‚ÇÄ; [_,_]_; _‚ù™_‚ù´; Œì‚ÇÄ'; Œì‚ÇÄ'-cong; [,]-‚ä§; [,]-‚ä•)
open PermutationEq FinRoute-setoid
open PermutationProperties FinRoute-setoid using (_‚Ü≠?_; ‚Ü≠-decSetoid)
open DecSetoid FinRoute-decSetoid using () renaming (_‚âü_ to _‚âü·µ£_; refl to ‚âà·µ£-refl)

--------------------------------------------------------------------------------
-- Algebra

-- Generalised (asynchronous) matrix multiplication
_‚ü¶_‚üß' : AdjacencyMatrix ‚Üí (Fin n ‚Üí Fin n ‚Üí RoutingSet) ‚Üí RoutingVector
(A ‚ü¶ f ‚üß') i = ‚®Å‚Çõ (Œª q ‚Üí (A i q ‚ñ∑_) [ f i q ])

-- Generalised (asynchronous) operator
Œì‚ÇÅ' : (Fin n ‚Üí Fin n ‚Üí RoutingSet) ‚Üí RoutingVector
Œì‚ÇÅ' f = A ‚ü¶ f ‚üß' ‚äï·µ• ~ I

‚îÄ' : (Fin n ‚Üí RoutingVector) ‚Üí (Fin n ‚Üí RoutingMatrix)
‚îÄ' V i = (‚îÄ V i)

~' : (Fin n ‚Üí RoutingMatrix) ‚Üí (Fin n ‚Üí RoutingVector)
~' X i = (~ X i)

--------------------------------------------------------------------------------
-- Operation properties

-- TODO: Maybe try to merely have a unique destination postulate for
-- RoutingVectors.
postulate
  ~-‚îÄ-inverse : ‚àÄ V ‚Üí ~(‚îÄ V) ‚âà·µ• V -- requires uniqueness of destination
  ‚îÄ-~-inverse : ‚àÄ X ‚Üí ‚îÄ(~ X) ‚âà‚Çò X
  ‚îÄ-cong : ‚àÄ {U V} ‚Üí U ‚âà·µ• V ‚Üí ‚îÄ U ‚âà‚Çò ‚îÄ V -- requires uniqueness of destination

‚ü¶_‚üß-cong' : ‚àÄ {A} {V V'} ‚Üí (‚àÄ i ‚Üí V i ‚âà·µ• V' i) ‚Üí A ‚ü¶ V ‚üß' ‚âà·µ• A ‚ü¶ V' ‚üß'
‚ü¶_‚üß-cong' V=V' i = ‚®Å‚Çõ-cong (Œª {q} ‚Üí []-cong (V=V' i q))

Œì‚ÇÅ'-cong : ‚àÄ {V V'} ‚Üí (‚àÄ i ‚Üí V i ‚âà·µ• V' i) ‚Üí Œì‚ÇÅ' V ‚âà·µ• Œì‚ÇÅ' V'
Œì‚ÇÅ'-cong V=V' = ‚äï·µ•-cong (‚ü¶_‚üß-cong' V=V') (‚âà·µ•-refl {~ I})

‚îÄ-‚äï-distributive : ‚àÄ U V ‚Üí ‚îÄ (U ‚äï·µ• V) ‚âà‚Çò (‚îÄ U) ‚äï‚Çò (‚îÄ V)
‚îÄ-‚äï-distributive U V = begin
  ‚îÄ (U ‚äï·µ• V)               ‚âà‚ü® ‚îÄ-cong (‚äï·µ•-cong (‚âà·µ•-sym (~-‚îÄ-inverse U)) (‚âà·µ•-sym (~-‚îÄ-inverse V))) ‚ü©
  ‚îÄ ((~(‚îÄ U)) ‚äï·µ• (~(‚îÄ V))) ‚âà‚ü® ‚îÄ-cong (‚âà·µ•-sym (‚äï-distributive (‚îÄ U) (‚îÄ V))) ‚ü©
  ‚îÄ (~ ((‚îÄ U) ‚äï‚Çò (‚îÄ V)))   ‚âà‚ü® ‚îÄ-~-inverse ((‚îÄ U) ‚äï‚Çò (‚îÄ V)) ‚ü©
  (‚îÄ U) ‚äï‚Çò (‚îÄ V)           ‚àé
  where open EqReasoning ‚ÑùùïÑ‚Çõ

Lemma-Œì‚ÇÄ'=Œì‚ÇÅ' : ‚àÄ {A Y} ‚Üí A ‚ü¶ ~' Y ‚üß' ‚âà·µ• ~ (A ‚ù™ Y ‚ù´)
Lemma-Œì‚ÇÄ'=Œì‚ÇÅ' {A} {Y} i = begin
  (A ‚ü¶ ~' Y ‚üß') i                                           ‚â°‚ü®‚ü©
  ‚®Å‚Çõ (Œª q ‚Üí (A i q ‚ñ∑_) [ (~' Y) i q ])                     ‚â°‚ü®‚ü©
  ‚®Å‚Çõ (Œª q ‚Üí (Œª s ‚Üí (A i q) ‚ñ∑ s) [ (~' Y) i q ])            ‚â°‚ü®‚ü©  
  ‚®Å‚Çõ (Œª q ‚Üí (map‚ÇÇ (Œª v ‚Üí (A i q) ‚ñ∑ v) ((~' Y) i q)) ‚Ä†)     ‚Ü≠‚ü® ‚®Å‚Çõ-cong (Œª {q} ‚Üí ~-lemma {i} {q} {Y i} {A}) ‚ü©
  ‚®Å‚Çõ (Œª q ‚Üí (tabulate Œª d ‚Üí (d , (A i q) ‚ñ∑ (Y i q d))) ‚Ä†)  ‚Ü≠‚ü® LemmaA‚ÇÇ-iter (Œª q d ‚Üí (A i q) ‚ñ∑ (Y i q d)) ‚ü©
  (tabulate Œª q ‚Üí (q , ‚®Å (Œª k ‚Üí (A i k) ‚ñ∑ (Y i k q)))) ‚Ä†   ‚â°‚ü®‚ü©
  (tabulate Œª q ‚Üí (q , (A ‚ù™ Y ‚ù´) i q)) ‚Ä†                   ‚â°‚ü®‚ü©
  (~ (A ‚ù™ Y ‚ù´)) i                                          ‚àé
  where open PermutationReasoning

‚îÄ-‚ü¶_‚üß'-distributive : ‚àÄ A V ‚Üí ‚îÄ (A ‚ü¶ V ‚üß') ‚âà‚Çò A ‚ù™ ‚îÄ' V ‚ù´
‚îÄ-‚ü¶_‚üß'-distributive A V = begin
  ‚îÄ (A ‚ü¶ V ‚üß')         ‚âà‚ü® ‚îÄ-cong (‚ü¶_‚üß-cong' (Œª i ‚Üí ‚âà·µ•-sym (~-‚îÄ-inverse (V i)))) ‚ü©
  ‚îÄ (A ‚ü¶ ~'(‚îÄ' V) ‚üß')  ‚âà‚ü® ‚îÄ-cong Lemma-Œì‚ÇÄ'=Œì‚ÇÅ' ‚ü©
  ‚îÄ (~ (A ‚ù™ ‚îÄ' V ‚ù´))  ‚âà‚ü® ‚îÄ-~-inverse (A ‚ù™ ‚îÄ' V ‚ù´) ‚ü©
  A ‚ù™ ‚îÄ' V ‚ù´          ‚àé
  where open EqReasoning ‚ÑùùïÑ‚Çõ
  
-- Theorem 3 (dual)
Œì‚ÇÄ'=Œì‚ÇÅ'-dual : ‚àÄ V ‚Üí ‚îÄ(Œì‚ÇÅ' V) ‚âà‚Çò Œì‚ÇÄ' (‚îÄ' V)
Œì‚ÇÄ'=Œì‚ÇÅ'-dual V = begin
  ‚îÄ(Œì‚ÇÅ' V)             ‚â°‚ü®‚ü©
  ‚îÄ(A ‚ü¶ V ‚üß' ‚äï·µ• ~ I)    ‚âà‚ü® ‚îÄ-‚äï-distributive (A ‚ü¶ V ‚üß') (~ I) ‚ü©
  ‚îÄ(A ‚ü¶ V ‚üß') ‚äï‚Çò ‚îÄ(~ I) ‚âà‚ü® ‚äï‚Çò-cong (‚îÄ-‚ü¶_‚üß'-distributive A V) (‚îÄ-~-inverse I) ‚ü©
  A ‚ù™ ‚îÄ' V ‚ù´ ‚äï‚Çò I      ‚â°‚ü®‚ü©
  Œì‚ÇÄ' (‚îÄ' V) ‚àé
  where open EqReasoning ‚ÑùùïÑ‚Çõ

[_,_]-cong : ‚àÄ {X X' Y Y' : RoutingMatrix} {S : Subset n} ‚Üí
             X ‚âà‚Çò X' ‚Üí Y ‚âà‚Çò Y' ‚Üí [ X , Y ] S ‚âà‚Çò [ X' , Y' ] S
[_,_]-cong {X} {X'} {Y} {Y'} {S} X=X' Y=Y' i with i ‚àà? S
... | yes _ = X=X' i
... | no  _ = Y=Y' i

‚îÄ-[_,_]-distributive : ‚àÄ U V S ‚Üí ‚îÄ([ U , V ] S) ‚âà‚Çò [ (‚îÄ U) , (‚îÄ V) ] S
‚îÄ-[_,_]-distributive U V S i j with i ‚àà? S
... | yes _ = ‚âà-refl
... | no _  = ‚âà-refl

--------------------------------------------------------------------------------
-- Implementation of Œ©‚ÇÅ

module _ (œà : Schedule n) where
  open Schedule œà
  
  Œ©‚ÇÅ' : RoutingVector ‚Üí {t : ùïã} ‚Üí Acc _<_ t ‚Üí RoutingVector
  Œ©‚ÇÅ' V {zero}  _         = V
  Œ©‚ÇÅ' V {suc t} (acc rec) = [ Œì‚ÇÅ' V[Œ≤[t+1]] , V[t] ] Œ± (suc t)
    where V[t] : RoutingVector
          V[t] = Œ©‚ÇÅ' V (rec t ‚â§-refl)
          V[Œ≤[t+1]] : Fin n ‚Üí RoutingVector
          V[Œ≤[t+1]] i q = Œ©‚ÇÅ' V (rec (Œ≤ (suc t) i q) (s‚â§s (Œ≤-causality t i q))) q

Œ©‚ÇÅ : Schedule n ‚Üí RoutingVector ‚Üí ùïã ‚Üí RoutingVector
Œ©‚ÇÅ œà V t = Œ©‚ÇÅ' œà V (<-wellFounded t)

--------------------------------------------------------------------------------
-- Proof that synchronous Œ©‚ÇÅ is indeed Œì‚ÇÅ

Œ©‚ÇÅ'À¢ ∏‚Åø·∂ú=Œì‚ÇÅ : ‚àÄ V {t} (acc[t] : Acc _<_ t) ‚Üí Œ©‚ÇÅ' œàÀ¢ ∏‚Åø·∂ú V acc[t] ‚âà·µ• (Œì‚ÇÅ ^ t) V
Œ©‚ÇÅ'À¢ ∏‚Åø·∂ú=Œì‚ÇÅ V {zero}  _         = ‚âà·µ•-refl
Œ©‚ÇÅ'À¢ ∏‚Åø·∂ú=Œì‚ÇÅ V {suc t} (acc rec) = begin
  Œ©‚ÇÅ' œàÀ¢ ∏‚Åø·∂ú V (acc rec)            ‚â°‚ü®‚ü©
  [ Œì‚ÇÅ V[t] , V[t] ] Œ±À¢ ∏‚Åø·∂ú (suc t) ‚â°‚ü® [,]-‚ä§ ‚ü©
  Œì‚ÇÅ V[t]                          ‚âà‚ü® Œì‚ÇÅ-cong (Œ©‚ÇÅ'À¢ ∏‚Åø·∂ú=Œì‚ÇÅ V (rec t ‚â§-refl)) ‚ü©
  (Œì‚ÇÅ ^ (suc t)) V                 ‚àé
  where open EqReasoning ùïç‚Çõ
        V[t] : RoutingVector
        V[t] = Œ©‚ÇÅ' œàÀ¢ ∏‚Åø·∂ú V (rec t ‚â§-refl)

Œ©‚ÇÅÀ¢ ∏‚Åø·∂ú=Œì‚ÇÅ : ‚àÄ V t ‚Üí Œ©‚ÇÅ œàÀ¢ ∏‚Åø·∂ú V t ‚âà·µ• (Œì‚ÇÅ ^ t) V
Œ©‚ÇÅÀ¢ ∏‚Åø·∂ú=Œì‚ÇÅ V t = Œ©‚ÇÅ'À¢ ∏‚Åø·∂ú=Œì‚ÇÅ V (<-wellFounded t)

--------------------------------------------------------------------------------
-- Reduction/transformation Œ©‚ÇÅ ‚Üí Œ©‚ÇÄ

-- Schedule reduction Œ©‚ÇÅ ‚Üí Œ©‚ÇÄ
r‚ÇÅ : ‚àÄ {n} ‚Üí Schedule n ‚Üí Schedule n
r‚ÇÅ = id

-- Transformation Œ©‚ÇÅ ‚Üí Œ©‚ÇÄ
Œ§‚ÇÅ : RoutingVector ‚Üí RoutingMatrix
Œ§‚ÇÅ V = ‚îÄ V

Œ§‚ÇÅ-cong : ‚àÄ {V V'} ‚Üí V ‚âà·µ• V' ‚Üí Œ§‚ÇÅ V ‚âà‚Çò Œ§‚ÇÅ V'
Œ§‚ÇÅ-cong = ‚îÄ-cong

--------------------------------------------------------------------------------
-- Proof of Œ©‚ÇÅ = Œ©‚ÇÄ: the Œ©‚ÇÅ model is simulated by Œ©‚ÇÄ.

module _ (œà : Schedule n) where
  open Schedule œà
  Œ©‚ÇÅ'=Œ©‚ÇÄ' : ‚àÄ V {t} (acc[t] : Acc _<_ t) ‚Üí Œ§‚ÇÅ (Œ©‚ÇÅ' œà V acc[t]) ‚âà‚Çò Œ©‚ÇÄ' (r‚ÇÅ œà) (Œ§‚ÇÅ V) acc[t]
  Œ©‚ÇÅ'=Œ©‚ÇÄ' V {zero}  _         = ‚âà‚Çò-refl
  Œ©‚ÇÅ'=Œ©‚ÇÄ' V {suc t} (acc rec) = begin
    Œ§‚ÇÅ (Œ©‚ÇÅ' œà V (acc rec))                    ‚â°‚ü®‚ü©
    ‚îÄ (Œ©‚ÇÅ' œà V (acc rec))                     ‚â°‚ü®‚ü©
    ‚îÄ ([ Œì‚ÇÅ' V[Œ≤[t+1]] , V[t] ] Œ± (suc t))    ‚âà‚ü® ‚îÄ-[_,_]-distributive (Œì‚ÇÅ' V[Œ≤[t+1]]) V[t] (Œ± (suc t)) ‚ü©
    [ ‚îÄ (Œì‚ÇÅ' V[Œ≤[t+1]])  , ‚îÄ V[t] ] Œ± (suc t) ‚âà‚ü® [_,_]-cong (Œì‚ÇÄ'=Œì‚ÇÅ'-dual V[Œ≤[t+1]]) ‚îÄV[t]=X[t] ‚ü©
    [ Œì‚ÇÄ' (‚îÄ' V[Œ≤[t+1]]) , X[t]   ] Œ± (suc t) ‚âà‚ü® [_,_]-cong (Œì‚ÇÄ'-cong ‚îÄV[Œ≤[t+1]]=X[Œ≤[t+1]]) ‚âà‚Çò-refl ‚ü©
    [ Œì‚ÇÄ' (X[Œ≤[t+1]])    , X[t]   ] Œ± (suc t) ‚âà‚ü® ‚âà‚Çò-refl ‚ü©
    Œ©‚ÇÄ' (r‚ÇÅ œà) (Œ§‚ÇÅ V) (acc rec)               ‚àé
    where open EqReasoning ‚ÑùùïÑ‚Çõ
          V[t] : RoutingVector
          V[t] = Œ©‚ÇÅ' œà V (rec t ‚â§-refl)
          V[Œ≤[t+1]] : Fin n ‚Üí RoutingVector
          V[Œ≤[t+1]] i q = Œ©‚ÇÅ' œà V (rec (Œ≤ (suc t) i q) (s‚â§s (Œ≤-causality t i q))) q
          X[Œ≤[t+1]] : Fin n ‚Üí RoutingMatrix
          X[Œ≤[t+1]] i q j = Œ©‚ÇÄ' (r‚ÇÅ œà) (Œ§‚ÇÅ V) (rec (Œ≤ (suc t) i q) (s‚â§s (Œ≤-causality t i q))) q j
          X[t] : RoutingMatrix
          X[t] = Œ©‚ÇÄ' (r‚ÇÅ œà) (Œ§‚ÇÅ V) (rec t ‚â§-refl)

          ‚îÄV[Œ≤[t+1]]=X[Œ≤[t+1]] : ‚àÄ i ‚Üí (‚îÄ' V[Œ≤[t+1]]) i ‚âà‚Çò X[Œ≤[t+1]] i
          ‚îÄV[Œ≤[t+1]]=X[Œ≤[t+1]] i q j = Œ©‚ÇÅ'=Œ©‚ÇÄ' V (rec (Œ≤ (suc t) i q) (s‚â§s (Œ≤-causality t i q))) q j

          ‚îÄV[t]=X[t] : ‚îÄ V[t] ‚âà‚Çò X[t]
          ‚îÄV[t]=X[t] = Œ©‚ÇÅ'=Œ©‚ÇÄ' V (rec t ‚â§-refl)

Œ©‚ÇÅ=Œ©‚ÇÄ : ‚àÄ œà V t ‚Üí Œ§‚ÇÅ (Œ©‚ÇÅ œà V t) ‚âà‚Çò Œ©‚ÇÄ (r‚ÇÅ œà) (Œ§‚ÇÅ V) t
Œ©‚ÇÅ=Œ©‚ÇÄ œà V t = Œ©‚ÇÅ'=Œ©‚ÇÄ' œà V (<-wellFounded t)
