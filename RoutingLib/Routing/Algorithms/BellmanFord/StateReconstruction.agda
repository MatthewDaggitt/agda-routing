open import Algebra.FunctionProperties using (Selective)
open import Data.List.Any using (here; there)
open import Data.List using (List; []; _‚à∑_; _++_; sum; map; foldr; concat)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _‚à∏_; _<_; _‚â§_; _‚â§?_; z‚â§n; s‚â§s; module ‚â§-Reasoning; ‚â§-pred)
open import Data.Nat.Properties using (_+-mono_; n‚à∏n‚â°0; +-‚à∏-assoc; ‚à∏-+-assoc; ‚â§-step; n‚â§m+n; m‚â§m+n; ‚â∞‚áí>)
open import Data.Nat.Properties.Simple using (+-suc; +-right-identity; +-assoc; +-comm)
open import Data.Fin using (Fin) renaming (zero to fzero; suc to fsuc)
open import Data.Fin.Properties using (_‚âü_)
open import Data.Fin.Subset using (‚ÅÖ_‚ÅÜ; ‚ä§)
open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; _,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ)
open import Relation.Binary using (tri<; tri>; tri‚âà)
open import Relation.Binary.PropositionalEquality using (_‚â°_; cong; cong‚ÇÇ; module ‚â°-Reasoning; inspect; [_]; subst) renaming (refl to ‚â°-refl; sym to ‚â°-sym; trans to ‚â°-trans)
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_; id)

open import RoutingLib.Asynchronous using (Parallelisation)
open import RoutingLib.Asynchronous.Schedule
open import RoutingLib.Data.Graph using (Graph)
open import RoutingLib.Data.Graph.SimplePath using (SimplePath; []; [_]; _‚à∑_‚à£_; _‚à∫_‚à£_; source; destination; edge-‚à∑)
open import RoutingLib.Data.Graph.SimplePath.NonEmpty using (SimplePath‚Åø·µó; length)
open import RoutingLib.Data.Nat.Properties using (‚â§-refl; ‚â§-trans; ‚â§-reflexive; cmp; m‚à∏n‚â°0‚áím‚â§n; m‚â§n‚áím‚à∏n‚â°0; m<n‚áín‚à∏m‚â°1+o; <‚áí‚â§)
open import RoutingLib.Routing.Definitions using (RoutingAlgebra; RoutingProblem)
open import RoutingLib.Data.List using (tabulate)

module RoutingLib.Routing.Algorithms.BellmanFord.StateReconstruction
  {a b ‚Ñì n-1} (ra : RoutingAlgebra a b ‚Ñì)
  (‚äï-sel : Selective (RoutingAlgebra._‚âà_ ra) (RoutingAlgebra._‚äï_ ra))
  (G : Graph (RoutingAlgebra.Step ra) (suc n-1))
  where

  private

    n : ‚Ñï
    n = suc n-1

  abstract

    open import RoutingLib.Routing.Algorithms.BellmanFord.StateReconstruction.Core ra ‚äï-sel G
    open import RoutingLib.Routing.Algorithms.BellmanFord.StateReconstruction.Activation ra ‚äï-sel G
    open import RoutingLib.Routing.Algorithms.BellmanFord.StateReconstruction.DataFlow ra ‚äï-sel G

    open import RoutingLib.Routing.AlgebraicPaths.Consistent ra ‚äï-sel G
    open RoutingAlgebra ra using (refl)

    open Schedule
    open import RoutingLib.Routing.Algorithms.BellmanFord crp using (œÉ‚à•; I; Œ¥)
    open RoutingProblem crp using (RMatrix)
    open import RoutingLib.Asynchronous.Snapshot œÉ‚à• using (Snapshot; toList‚±º; _‚âà‚Çõ_; snapshot)
    open import RoutingLib.Data.List.Any.GenericMembership (C‚Çõ) using (_‚àà_)

    open Parallelisation œÉ‚à• using (_‚âà‚Çò_)

    

    -- Schedules
   
{-
    locateTime : ‚àÄ {x xs} ‚Üí x ‚àà xs ‚Üí ùïã
    locateTime {_} {xs} (here  _)    = listConstructionùïã xs
    locateTime {_} {_}  (there x‚ààxs) = locateTime x‚ààxs

    constructùîπ : ‚àÄ (Œ≤ : ùîπ n) t‚Çõ xs ‚Üí (‚àÄ {t i j} ‚Üí t‚Çõ ‚â§ t ‚Üí Œ≤ t i j ‚â§ t‚Çõ ‚Üí ‚àÉ Œª x ‚Üí x ‚àà xs) ‚Üí ùîπ n
    constructùîπ Œ≤ t‚Çõ xs index t i j with listConstructionùïã xs ‚â§? t | Œ≤ (t‚Çõ + t ‚à∏ listConstructionùïã xs) i j ‚â§? t‚Çõ
    ... | yes ct‚â§t | yes Œ≤‚â§t‚Çõ = locateTime (proj‚ÇÇ (index (subst (t‚Çõ ‚â§_) (‚â°-sym (+-‚à∏-assoc t‚Çõ ct‚â§t)) (m‚â§m+n t‚Çõ (t ‚à∏ listConstructionùïã xs))) Œ≤‚â§t‚Çõ)) 
    ... | _        |  _       = allùîπ xs t i j
-}

    constructionùïä : ‚àÄ (ùï§ : Schedule n) t ‚Üí RMatrix ‚Üí Snapshot (Œ≤ ùï§) t ‚Üí Schedule n
    constructionùïä ùï§ t X sn = record
      { Œ±              = finalùî∏ ùï§ t X sn
      ; Œ≤              = finalùîπ ùï§ t X sn
      ; starvationFree = finalùî∏-starvationFree ùï§ t X sn
      ; causal         = finalùîπ-causal ùï§ t X sn
      ; dynamic        = finalùîπ-dynamic ùï§ t X sn
      }

    Œ¥·µó¬πX‚âàŒ¥·∂ú·µóI : ‚àÄ ùï§ t X (sn : Snapshot (Œ≤ ùï§) t) ‚Üí X ‚âà‚Çò Œ¥ (constructionùïä ùï§ t X sn) (buildùïã X (dynamic ùï§) sn) I
    Œ¥·µó¬πX‚âàŒ¥·∂ú·µóI ùï§ t X sn = {!!}

    ùï§‚ÇÅ‚âàcùï§ : ‚àÄ ùï§ t‚Çõ X (sn : Snapshot (Œ≤ ùï§) t‚Çõ) ‚Üí  ùï§ ‚ü¶ t‚Çõ ‚üß‚âà‚ü¶ buildùïã X (dynamic ùï§) sn ‚üß constructionùïä ùï§ t‚Çõ X sn
    ùï§‚ÇÅ‚âàcùï§ ùï§ t‚Çõ X sn = finalùî∏-‚âàùî∏ ùï§ t‚Çõ X sn , {!finalùîπ-‚âàùîπ ùï§ t‚Çõ X sn!} 
    
    sn‚ÇÅ‚âàcsn : ‚àÄ ùï§ t X (sn : Snapshot (Œ≤ ùï§) t) ‚Üí sn ‚âà‚Çõ snapshot (constructionùïä ùï§ t X sn) (buildùïã X (dynamic ùï§) sn) I
    sn‚ÇÅ‚âàcsn ùï§ t X sn = {!!}


    reconstructionAll : ‚àÄ ùï§‚ÇÅ t‚ÇÅ X (sn‚ÇÅ : Snapshot (Œ≤ ùï§‚ÇÅ) t‚ÇÅ) ‚Üí ‚àÉ‚ÇÇ Œª ùï§‚ÇÇ t‚ÇÇ ‚Üí X ‚âà‚Çò Œ¥ ùï§‚ÇÇ t‚ÇÇ I √ó ùï§‚ÇÅ ‚ü¶ t‚ÇÅ ‚üß‚âà‚ü¶ t‚ÇÇ ‚üß ùï§‚ÇÇ √ó sn‚ÇÅ ‚âà‚Çõ snapshot ùï§‚ÇÇ t‚ÇÇ I
    reconstructionAll ùï§‚ÇÅ t‚ÇÅ X sn‚ÇÅ = constructionùïä ùï§‚ÇÅ t‚ÇÅ X sn‚ÇÅ , buildùïã X (dynamic ùï§‚ÇÅ) sn‚ÇÅ , Œ¥·µó¬πX‚âàŒ¥·∂ú·µóI ùï§‚ÇÅ t‚ÇÅ X sn‚ÇÅ , ùï§‚ÇÅ‚âàcùï§ ùï§‚ÇÅ t‚ÇÅ X sn‚ÇÅ , sn‚ÇÅ‚âàcsn ùï§‚ÇÅ t‚ÇÅ X sn‚ÇÅ
      where open Schedule ùï§‚ÇÅ
