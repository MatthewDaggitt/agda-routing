open import Level using () renaming (_⊔_ to _⊔ₗ_)
open import Relation.Binary using (Setoid)
open import Relation.Binary.PropositionalEquality using (_≡_)
open import Data.Nat using (ℕ; _≤_; _<_; _+_; _⊔_)
open import Data.Sum using (_⊎_)

module RoutingLib.Function.Metric {a} {ℓ} (S : Setoid a ℓ) where

  open Setoid S using (_≈_) renaming (Carrier to A)



  -------------
  -- Metrics --
  -------------

  record IsMetric (d : A → A → ℕ) : Set (a ⊔ₗ ℓ) where
    field
      eq⇨0 : ∀ {x y} → x ≈ y → d x y ≡ 0
      0⇨eq : ∀ {x y} → d x y ≡ 0 → x ≈ y
      sym : ∀ x y → d x y ≡ d y x
      triIneq : ∀ x y z → d x z ≤ d x y + d y z

  record Metric : Set (a ⊔ₗ ℓ) where
    field
      d : A → A → ℕ
      isMetric : IsMetric d

    open IsMetric isMetric public



  -----------------
  -- Ultrametric --
  -----------------

  record IsUltrametric (d : A → A → ℕ) : Set (a ⊔ₗ ℓ) where
    field
      isMetric : IsMetric d
      maxTriIneq : ∀ x y z → d x z ≤ d x y ⊔ d y z

    open IsMetric isMetric public


  record Ultrametric : Set (a ⊔ₗ ℓ) where
    field
      d : A → A → ℕ
      isUltrametric : IsUltrametric d

    open IsUltrametric isUltrametric public





  ----------------
  -- Properties --
  ----------------

  _IsContractionOver_ : (A → A) → Metric → Set a
  σ IsContractionOver M = ∀ x y → d (σ x) (σ y) ≤ d x y
    where open Metric M

  _IsStrictContractionOver_ : (A → A) → Metric → Set a
  σ IsStrictContractionOver M = ∀ x y → d (σ x) (σ y) < d x y
    where open Metric M

  _IsStrictContractionOnOrbitsOver_ : (A → A) → Metric → Set (a ⊔ₗ ℓ)
  σ IsStrictContractionOnOrbitsOver M = ∀ x → σ x ≈ x ⊎ d (σ x) (σ (σ x)) < d x (σ x)
    where open Metric M
