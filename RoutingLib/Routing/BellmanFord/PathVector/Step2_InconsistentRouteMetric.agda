open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; _,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ) renaming (map to map‚Çö)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_]‚Ä≤)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (m‚â§m+n; m+n‚à∏m‚â°n; ‚â§+‚â¢‚áí<; suc-injective; ‚â§-trans; ‚â§-refl; ‚â§-total; ‚â§-reflexive; <-trans ≥; <-transÀ°; <-irrefl; ‚â§-antisym; ‚äì-sel; ‚â∞‚áí‚â•; +-comm; +-assoc; +-mono-‚â§; ‚à∏-mono; m‚â§m‚äîn; ‚äî-mono-‚â§; ‚äî-comm; ‚äî-sel; ‚äì-mono-‚â§; m‚äìn‚â§m; ‚äì-idem; ‚äì-assoc; ‚äî-identity ≥; ‚äì-comm; ‚äî-mono-<; +-cancelÀ°-‚â°; +-distribÀ°-‚äî; n‚â§m‚äîn; +-mono ≥-<; <‚áí‚â§; +-distrib ≥-‚äî; +-suc)
open import Data.Fin using (Fin) renaming (zero to fzero)
open import Data.Maybe using (Maybe; just; nothing)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (Decidable)
open import Function using (_‚àò_; _$_; id)

open import RoutingLib.Data.Graph.SimplePath using (SimplePath) renaming (length to length‚Çö)
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Data.Graph
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím+o‚â°n; ‚à∏-distribÀ°-‚äì-‚äî; ‚äî-monoÀ°-‚â§; m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; +-mono ≥-‚â§; ‚â§-stepsÀ°; ‚à∏-monoÀ°-<; m‚â§n‚áím‚äìn‚â°m; ‚à∏-cancel ≥-‚â§; n<m‚áín‚äìo<m; ‚äî-triangulate; n‚â¢0‚áí0<n; ‚â§-steps ≥; m>n‚áím‚à∏n‚â¢0; m<n‚áín‚â¢0; ‚à∏-monoÀ°-‚â§; n‚â§m‚áín‚äìo‚â§m; n‚â§m√óo‚â§m‚áín‚äîo‚â§m; n‚â§m‚áím‚äîn‚â°m;  module ‚â§-Reasoning)
open import RoutingLib.Data.Matrix using (min‚Å∫; map; max‚Å∫; zipWith)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫-cong; max‚Å∫-constant; zipWith-sym; max‚Å∫-cong; max‚Å∫[M]‚â§max‚Å∫[N]; M‚â§max‚Å∫[M]; max‚Å∫[M]-distrib-‚äî; max‚Å∫[M]‚â°x)
open import RoutingLib.Data.Matrix.Membership.Propositional.Properties using (max‚Å∫[M]‚ààM)
open import RoutingLib.Function using (_‚àò‚ÇÇ_)
open import RoutingLib.Function.Distance using (Ultrametric; IsUltrametric; MaxTriangleIneq; Bounded)

open import RoutingLib.Routing.Definitions
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
import RoutingLib.Routing.BellmanFord.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.Step1_InconsistentHeightFunction as Step1

module RoutingLib.Routing.BellmanFord.PathVector.Step2_InconsistentRouteMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí

  open Step1 ùìüùì¢ùìí using
    ( h‚Å± ; H‚Å± ; h‚Å±-cong ; 1‚â§h‚Å±; h‚Å±‚â§H‚Å± ; h‚Å±-decr ; h[s]‚â§h[r·∂ú] )
 

  d·µ£‚Å± : Route ‚Üí Route ‚Üí ‚Ñï
  d·µ£‚Å± x y with x ‚âü y
  ... | yes _ = 0
  ... | no  _ = h‚Å± x ‚äî h‚Å± y

  d·µ£‚Å±-cong : d·µ£‚Å± Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
  d·µ£‚Å±-cong {x} {y} {u} {v} x‚âày u‚âàv with x ‚âü u | y ‚âü v
  ... | yes _   | yes _   = refl
  ... | yes x‚âàu | no  y‚ââv = contradiction (‚âà-trans (‚âà-trans (‚âà-sym x‚âày) x‚âàu) u‚âàv) y‚ââv
  ... | no  x‚ââu | yes y‚âàv = contradiction (‚âà-trans (‚âà-trans x‚âày y‚âàv) (‚âà-sym u‚âàv)) x‚ââu
  ... | no  _   | no  _   = cong‚ÇÇ _‚äî_ (h‚Å±-cong x‚âày) (h‚Å±-cong u‚âàv)
  
  d·µ£‚Å±-sym : ‚àÄ x y ‚Üí d·µ£‚Å± x y ‚â° d·µ£‚Å± y x
  d·µ£‚Å±-sym x y with x ‚âü y | y ‚âü x
  ... | yes _   | yes _ = refl
  ... | yes x‚âày | no  y‚ââx = contradiction (‚âà-sym x‚âày) y‚ââx
  ... | no  x‚âây | yes y‚âàx = contradiction (‚âà-sym y‚âàx) x‚âây
  ... | no  _   | no  _   = ‚äî-comm (h‚Å± x) (h‚Å± y)

  d·µ£‚Å±‚â°0‚áíx‚âày : ‚àÄ {x y} ‚Üí d·µ£‚Å± x y ‚â° 0 ‚Üí x ‚âà y
  d·µ£‚Å±‚â°0‚áíx‚âày {x} {y} d·µ£‚Å±‚â°0 with x ‚âü y
  ... | yes x‚âày = x‚âày
  ... | no  x‚âây = contradiction d·µ£‚Å±‚â°0 (m<n‚áín‚â¢0 (m‚â§o‚áím‚â§n‚äîo (h‚Å± x) (1‚â§h‚Å± y)))
  
  x‚âày‚áíd·µ£‚Å±‚â°0 : ‚àÄ {x y} ‚Üí x ‚âà y ‚Üí d·µ£‚Å± x y ‚â° 0
  x‚âày‚áíd·µ£‚Å±‚â°0 {x} {y} x‚âày with x ‚âü y
  ... | yes _   = refl
  ... | no  x‚âây = contradiction x‚âày x‚âây
  
  d·µ£‚Å±-maxTriIneq : MaxTriangleIneq S d·µ£‚Å±
  d·µ£‚Å±-maxTriIneq x y z with x ‚âü z | x ‚âü y | y ‚âü z
  ... | yes _   | _       | _       = z‚â§n
  ... | no  x‚ââz | yes x‚âày | yes y‚âàz = contradiction (‚âà-trans x‚âày y‚âàz) x‚ââz
  ... | no  _   | yes x‚âày | no  _   = ‚â§-reflexive (cong (_‚äî h‚Å± z) (h‚Å±-cong x‚âày))
  ... | no  _   | no  _   | yes y‚âàz = ‚â§-reflexive (trans (cong (h‚Å± x ‚äî_) (sym (h‚Å±-cong y‚âàz))) (sym (‚äî-identity ≥ _)))
  ... | no  _   | no  _   | no  _   = begin
    h‚Å± x ‚äî h‚Å± z                   ‚â§‚ü® ‚äî-monoÀ°-‚â§ (h‚Å± z) (m‚â§m‚äîn (h‚Å± x) (h‚Å± y)) ‚ü©
    h‚Å± x ‚äî h‚Å± y ‚äî h‚Å± z            ‚â°‚ü® ‚äî-triangulate (h‚Å± x) (h‚Å± y) (h‚Å± z) ‚ü©
    (h‚Å± x ‚äî h‚Å± y) ‚äî (h‚Å± y ‚äî h‚Å± z) ‚àé
    where open ‚â§-Reasoning
  
  d·µ£‚Å±-isUltrametric : IsUltrametric S d·µ£‚Å±
  d·µ£‚Å±-isUltrametric = record
    { cong        = d·µ£‚Å±-cong
    ; eq‚áí0        = x‚âày‚áíd·µ£‚Å±‚â°0
    ; 0‚áíeq        = d·µ£‚Å±‚â°0‚áíx‚âày
    ; sym         = d·µ£‚Å±-sym
    ; maxTriangle = d·µ£‚Å±-maxTriIneq
    }
  
  d·µ£‚Å±-ultrametric : Ultrametric S
  d·µ£‚Å±-ultrametric = record
    { d             = d·µ£‚Å±
    ; isUltrametric = d·µ£‚Å±-isUltrametric
    }

  d·µ£‚Å±‚â§H‚Å± : ‚àÄ x y ‚Üí d·µ£‚Å± x y ‚â§ H‚Å±
  d·µ£‚Å±‚â§H‚Å± x y with x ‚âü y
  ... | yes _ = z‚â§n
  ... | no  _ = n‚â§m√óo‚â§m‚áín‚äîo‚â§m (h‚Å±‚â§H‚Å± x) (h‚Å±‚â§H‚Å± y)
  
  d·µ£‚Å±-bounded : Bounded S d·µ£‚Å±
  d·µ£‚Å±-bounded = H‚Å± , d·µ£‚Å±‚â§H‚Å±



  h-force-ùë∞ : ‚àÄ {x y} ‚Üí h‚Å± x ‚â§ h‚Å± y ‚Üí ùë∞ x ‚Üí ùë∞ y
  h-force-ùë∞ {x} {y} hx‚â§hy x‚Å± y·∂ú = x‚Å± (h[s]‚â§h[r·∂ú] x y·∂ú hx‚â§hy)
  
  d·µ£‚Å±-strContr-lemma : ‚àÄ f {x y} ‚Üí ùë∞ x ‚Üí h‚Å± (f ‚ñ∑ y) ‚â§ h‚Å± (f ‚ñ∑ x) ‚Üí h‚Å± (f ‚ñ∑ x) ‚äî h‚Å± (f ‚ñ∑ y) < h‚Å± x ‚äî h‚Å± y
  d·µ£‚Å±-strContr-lemma f {x} {y} x‚Å± hfy‚â§hfx = begin
    h‚Å± (f ‚ñ∑ x) ‚äî h‚Å± (f ‚ñ∑ y)  ‚â°‚ü® n‚â§m‚áím‚äîn‚â°m hfy‚â§hfx ‚ü©
    h‚Å± (f ‚ñ∑ x)               <‚ü® h‚Å±-decr f x‚Å± ‚ü©
    h‚Å± x                     ‚â§‚ü® m‚â§m‚äîn (h‚Å± x) (h‚Å± y) ‚ü©
    h‚Å± x       ‚äî h‚Å± y        ‚àé
    where open ‚â§-Reasoning

  d·µ£‚Å±-strContr : ‚àÄ f {x y} ‚Üí x ‚ââ y ‚Üí ùë∞ (f ‚ñ∑ x) ‚äé ùë∞ (f ‚ñ∑ y) ‚Üí d·µ£‚Å± (f ‚ñ∑ x) (f ‚ñ∑ y) < d·µ£‚Å± x y
  d·µ£‚Å±-strContr f {x} {y} x‚âây fx‚Å±‚äéfy‚Å± with x ‚âü y | f ‚ñ∑ x ‚âü f ‚ñ∑ y
  ... | yes x‚âày | _     = contradiction x‚âày x‚âây
  ... | no  _   | yes _ = m‚â§o‚áím‚â§n‚äîo (h‚Å± x) (1‚â§h‚Å± y)
  ... | no  _   | no  _ with ‚â§-total (h‚Å± (f ‚ñ∑ x)) (h‚Å± (f ‚ñ∑ y))
  ...   | inj‚ÇÇ hfy‚â§hfx = d·µ£‚Å±-strContr-lemma f (fx‚Å±‚áíx‚Å± ([ id , h-force-ùë∞ hfy‚â§hfx ]‚Ä≤ fx‚Å±‚äéfy‚Å±)) hfy‚â§hfx
  ...   | inj‚ÇÅ hfx‚â§hfy = begin
    h‚Å± (f ‚ñ∑ x) ‚äî h‚Å± (f ‚ñ∑ y) ‚â°‚ü® ‚äî-comm (h‚Å± (f ‚ñ∑ x)) (h‚Å± (f ‚ñ∑ y)) ‚ü©
    h‚Å± (f ‚ñ∑ y) ‚äî h‚Å± (f ‚ñ∑ x) <‚ü® d·µ£‚Å±-strContr-lemma f (fx‚Å±‚áíx‚Å± ([ h-force-ùë∞ hfx‚â§hfy , id ]‚Ä≤ fx‚Å±‚äéfy‚Å±)) hfx‚â§hfy ‚ü©
    h‚Å± y       ‚äî h‚Å± x       ‚â°‚ü® ‚äî-comm (h‚Å± y) (h‚Å± x) ‚ü©
    h‚Å± x       ‚äî h‚Å± y       ‚àé
    where open ‚â§-Reasoning
