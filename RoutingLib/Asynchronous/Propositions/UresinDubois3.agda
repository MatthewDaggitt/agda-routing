open import Data.Product using (_√ó_; ‚àÉ; proj‚ÇÅ; proj‚ÇÇ; _,_)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _‚â§_; _<_; z‚â§n; s‚â§s; _‚âü_; _‚â§?_; _‚à∏_)
open import Data.Nat.Properties using (‚â§-antisym; pred-mono; ‚â§+‚â¢‚áí<; ‚â∞‚áí‚â•; +-suc; +-identity ≥; m+n‚à∏m‚â°n; m‚â§m+n)
open import Relation.Binary using (Setoid; Rel; Reflexive; Antisymmetric; Transitive; _‚áí_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong)
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (_‚à©_; U) renaming (_‚àà_ to _‚àà·µ§_)

open import RoutingLib.Asynchronous using (Parallelisation)
open import RoutingLib.Data.Table using (Table)

module RoutingLib.Asynchronous.Propositions.UresinDubois3 {a ‚Ñì n}
                                                          {S : Table (Setoid a ‚Ñì) n}
                                                          (ùï° : Parallelisation S)
  where

  open Parallelisation ùï° using (f)
  open import RoutingLib.Asynchronous.Theorems.Core ùï° using (ACO)
  open import RoutingLib.Data.Table.IndexedTypes S

  iter : M ‚Üí ‚Ñï ‚Üí M
  iter x‚ÇÄ zero = x‚ÇÄ
  iter x‚ÇÄ (suc K) = f (iter x‚ÇÄ K)

  module proof {p}
               (x‚ÇÄ : M)
               (D‚ÇÄ : Pred p)
               (x‚ÇÄ‚ààD‚ÇÄ : x‚ÇÄ ‚àà D‚ÇÄ)
               (D‚ÇÄ-subst : ‚àÄ {x y} ‚Üí x ‚âà y ‚Üí x ‚àà D‚ÇÄ ‚Üí y ‚àà D‚ÇÄ)
               (_‚âº_ : ‚àÄ {i} ‚Üí Rel (Setoid.Carrier (S i)) p)
               (‚âº-refl : ‚àÄ {i} ‚Üí Reflexive (_‚âº_ {i}))
               (‚âº-reflexive : ‚àÄ {i} ‚Üí _‚âà·µ¢_ {i} ‚áí _‚âº_ {i})
               (‚âº-antisym : ‚àÄ {i} ‚Üí Antisymmetric (_‚âà·µ¢_ {i}) (_‚âº_ {i}))
               (‚âº-trans : ‚àÄ {i} ‚Üí Transitive (_‚âº_ {i}))
               (closed : ‚àÄ x ‚Üí x ‚àà D‚ÇÄ ‚Üí f x ‚àà D‚ÇÄ)
               (f-monotone : ‚àÄ {x y} ‚Üí x ‚àà D‚ÇÄ √ó y ‚àà D‚ÇÄ ‚Üí (‚àÄ i ‚Üí x i ‚âº y i) ‚Üí ‚àÄ i ‚Üí f x i ‚âº f y i)
               (iter-dec : ‚àÄ K i ‚Üí iter x‚ÇÄ (suc K) i ‚âº iter x‚ÇÄ K i)
               (iter-converge : ‚àÉ Œª T ‚Üí ‚àÄ t ‚Üí iter x‚ÇÄ T ‚âà iter x‚ÇÄ (T + t))
    where

    

    _‚ä¥_ : Rel M p
    s ‚ä¥ t = ‚àÄ i ‚Üí s i ‚âº t i

    ‚ä¥-refl : Reflexive _‚ä¥_
    ‚ä¥-refl i = ‚âº-refl

    ‚ä¥-reflexive : _‚âà_ ‚áí _‚ä¥_
    ‚ä¥-reflexive x‚âày i = ‚âº-reflexive (x‚âày i)

    ‚ä¥-antisym : Antisymmetric _‚âà_ _‚ä¥_
    ‚ä¥-antisym s‚ä¥t t‚ä¥s i = ‚âº-antisym (s‚ä¥t i) (t‚ä¥s i)

    ‚ä¥-trans : Transitive _‚ä¥_
    ‚ä¥-trans s‚ä¥t t‚ä¥u i = ‚âº-trans (s‚ä¥t i) (t‚ä¥u i)


    -- Convergence time
    T : ‚Ñï
    T = proj‚ÇÅ iter-converge

    -- Convergence state
    Œæ : M
    Œæ = iter x‚ÇÄ T

    -- Sequence of sets
    D : ‚Ñï ‚Üí Pred p
    D K i = (Œª x ‚Üí (Œæ i ‚âº x) √ó (x ‚âº iter x‚ÇÄ K i)) ‚à© D‚ÇÄ i 

    D-subst : ‚àÄ K {x y} ‚Üí x ‚âà y ‚Üí x ‚àà D K ‚Üí y ‚àà D K
    D-subst K x‚âày x‚ààDK i with proj‚ÇÅ (x‚ààDK i)
    ... | Œæ‚âºx , x‚âºiterK =  (‚âº-trans Œæ‚âºx (‚âº-reflexive (x‚âày i))             ,
                                ‚âº-trans (‚âº-reflexive (‚âà·µ¢-sym (x‚âày i))) x‚âºiterK) ,
                                D‚ÇÄ-subst x‚âày (Œª j ‚Üí proj‚ÇÇ (x‚ààDK j)) i

    D-decreasing : ‚àÄ K ‚Üí D (suc K) ‚äÜ D K
    D-decreasing K x‚ààDK i with x‚ààDK i
    ... | ((Œæ‚âºx , x‚âºiterK), x‚ààD‚ÇÄ) = (Œæ‚âºx , ‚âº-trans x‚âºiterK (iter-dec K i)) , x‚ààD‚ÇÄ

    closed-trans : ‚àÄ K ‚Üí iter x‚ÇÄ K ‚àà D‚ÇÄ
    closed-trans zero    i = x‚ÇÄ‚ààD‚ÇÄ i
    closed-trans (suc K) i = closed (iter x‚ÇÄ K) (closed-trans K) i
    
    iter-decreasing : ‚àÄ {k t} ‚Üí k ‚â§ t ‚Üí iter x‚ÇÄ t ‚ä¥ iter x‚ÇÄ k
    iter-decreasing {.0} {zero} z‚â§n = ‚ä¥-refl
    iter-decreasing {k} {suc t} k‚â§t with k ‚âü suc t
    ... | yes refl = ‚ä¥-refl
    ... | no  k‚â¢st = ‚ä¥-trans (iter-dec t) (iter-decreasing {k} {t} (pred-mono (‚â§+‚â¢‚áí< k‚â§t k‚â¢st)))

    x‚ÇÄ‚ààD0 : x‚ÇÄ ‚àà D 0
    x‚ÇÄ‚ààD0 i = (iter-decreasing {0} {T} z‚â§n i , ‚âº-refl) , x‚ÇÄ‚ààD‚ÇÄ i
    
    T‚â§K‚áíŒæ‚âàiterK : ‚àÄ {K} ‚Üí T ‚â§ K ‚Üí Œæ ‚âà iter x‚ÇÄ K
    T‚â§K‚áíŒæ‚âàiterK {K} T‚â§K = ‚âà-trans (proj‚ÇÇ iter-converge (K ‚à∏ T)) (‚âà-cong (iter x‚ÇÄ) (m+n‚à∏m‚â°n T‚â§K))

    Œæ‚âàfŒæ : Œæ ‚âà f Œæ
    Œæ‚âàfŒæ i = ‚âà·µ¢-trans (proj‚ÇÇ iter-converge 1 i)
             (‚âà-cong (iter x‚ÇÄ) (trans (+-suc T 0) (cong suc (+-identity ≥ T))) i)

    Œæ‚ààDK : ‚àÄ K ‚Üí Œæ ‚àà D K
    Œæ‚ààDK K i with K ‚â§? T
    ... | yes K‚â§T = (‚âº-refl , iter-decreasing K‚â§T i) , closed-trans T i
    ... | no  K‚â∞T = (‚âº-refl , ‚âº-reflexive (T‚â§K‚áíŒæ‚âàiterK (‚â∞‚áí‚â• K‚â∞T) i)) , closed-trans T i

    D-finish : ‚àÉ Œª Œæ ‚Üí ‚àÄ K ‚Üí Singleton-t Œæ (D (T + K))
    D-finish = Œæ , Œª K ‚Üí Œæ‚ààDK (T + K) ,
               Œª t t‚ààD[T+K] i ‚Üí ‚âº-antisym (proj‚ÇÅ (proj‚ÇÅ (t‚ààD[T+K] i)))
               (‚âº-trans (proj‚ÇÇ (proj‚ÇÅ (t‚ààD[T+K] i))) (iter-decreasing (m‚â§m+n T K) i)) 

    f-monotonic  : ‚àÄ K {t} ‚Üí t ‚àà D K ‚Üí f t ‚àà D (suc K)
    f-monotonic K {t} t‚ààDK i = (‚âº-trans (‚âº-reflexive (Œæ‚âàfŒæ i))
              (f-monotone (closed-trans T , t‚ààD‚ÇÄ) Œæ‚ä¥t i) ,
              f-monotone (t‚ààD‚ÇÄ , closed-trans K) t‚ä¥iterK i) ,
              closed t t‚ààD‚ÇÄ i
              where
              t‚ààD‚ÇÄ : t ‚àà D‚ÇÄ
              t‚ààD‚ÇÄ j = proj‚ÇÇ (t‚ààDK j)

              Œæ‚ä¥t : Œæ ‚ä¥ t
              Œæ‚ä¥t j = proj‚ÇÅ (proj‚ÇÅ (t‚ààDK j))

              t‚ä¥iterK : t ‚ä¥ iter x‚ÇÄ K
              t‚ä¥iterK j = proj‚ÇÇ (proj‚ÇÅ (t‚ààDK j))
 
    aco : ACO p
    aco = record {
      T            = T            ;
      D            = D            ;
      D-subst      = D-subst      ;
      D-decreasing = D-decreasing ;
      D-finish     = D-finish     ;
      f-monotonic  = f-monotonic  
      }
    
        

