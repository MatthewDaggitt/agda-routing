open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚âÆ_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties hiding (module ‚â§-Reasoning; _‚âü_)
open import Data.Fin using (Fin)
open import Data.Fin.Properties using () renaming (_‚âü_ to _‚âüùîΩ_)
open import Data.Fin.Subset using (Subset; _‚àà_; _‚àâ_; ‚ä§; ‚ÅÖ_‚ÅÜ; ‚à£_‚à£)
open import Data.Fin.Subset.Properties using (x‚ààp‚à©q‚Å∫; x‚àà‚ÅÖx‚ÅÜ; ‚àà‚ä§)
open import Data.Fin.Dec using (_‚àà?_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; swap)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; sym; trans; cong; subst; subst‚ÇÇ; cong‚ÇÇ)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_)
open import Induction.WellFounded using (Acc; acc)
open import Induction.Nat using (<-wellFounded)

open import RoutingLib.Data.Fin.Subset using (_\\_)
open import RoutingLib.Data.Fin.Subset.Properties
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; n<m‚áín‚äìo<m; n‚â§m‚áín‚äìo‚â§m; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Data.Matrix using (Any; map; min‚Å∫)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫[M]<min‚Å∫[N])
open import RoutingLib.Data.Table using (Table)
open import RoutingLib.Data.Table.Properties using (max[t]<x)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
import RoutingLib.Function.Metric as Metric
import RoutingLib.Function.Metric.Construct.MaxLift as MaxLift

open import RoutingLib.Routing.Algebra
open import RoutingLib.Routing.Algebra.CertifiedPathAlgebra
import RoutingLib.Routing.Algebra.CertifiedPathAlgebra.Consistency as Consistency
import RoutingLib.Routing.Algebra.CertifiedPathAlgebra.Properties as PathAlgebraProperties
open import RoutingLib.Routing.Model as Model using (AdjacencyMatrix)
import RoutingLib.Routing.BellmanFord.Synchronous as BellmanFord
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Properties as BellmanFordProperties
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Convergence.Metrics as PathVectorMetrics
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Convergence.Properties as PathVectorMetricProperties
import RoutingLib.Routing.BellmanFord.Synchronous.DistanceVector.Convergence.Properties as DistanceVectorProperties
import RoutingLib.Routing.BellmanFord.Synchronous.DistanceVector.Convergence.StrictlyContracting as DistanceVectorStrContr

open ‚â§-Reasoning

module RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Convergence.StrictlyContracting
  {a b ‚Ñì n} {algebra : RawRoutingAlgebra a b ‚Ñì}
  (isPathAlgebra : IsCertifiedPathAlgebra algebra n)
  (isStrictlyIncreasing : IsStrictlyIncreasing algebra)
  (A : AdjacencyMatrix algebra n)
  (1‚â§n : 1 ‚â§ n)
  where

open RawRoutingAlgebra algebra
open IsCertifiedPathAlgebra isPathAlgebra
open Consistency algebra isPathAlgebra A
open PathAlgebraProperties isPathAlgebra

open BellmanFord algebra A
open BellmanFord algebra·∂ú A·∂ú using () renaming (œÉ to œÉ·∂ú)
open BellmanFordProperties algebra isPathAlgebra A
open PathVectorMetrics isPathAlgebra A
open PathVectorMetricProperties isPathAlgebra A 1‚â§n
private module DVP = DistanceVectorProperties isRoutingAlgebra·∂ú isFinite·∂ú
private module DVSC = DistanceVectorStrContr isRoutingAlgebra·∂ú isFinite·∂ú (isStrictlyIncreasing·∂ú isStrictlyIncreasing) A·∂ú

------------------------------------------------------------------------
-- r·∂ú is contracting in the right way

r·∂ú-strContr-ùë™ùë™ : ‚àÄ {X Y} ‚Üí (X·∂ú : ùë™‚Çò X) (Y·∂ú : ùë™‚Çò Y) ‚Üí
                 ‚àÄ {i j} (œÉX·µ¢‚±º·∂ú : ùë™ (œÉ X i j)) (œÉY·µ¢‚±º·∂ú : ùë™ (œÉ Y i j)) ‚Üí
                 ‚àÄ {v} ‚Üí 0 < v ‚Üí (‚àÄ k l ‚Üí r (X k l) (Y k l) ‚â§ v) ‚Üí
                 r·∂ú œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú < v
r·∂ú-strContr-ùë™ùë™ {X} {Y} X·∂ú Y·∂ú {i} {j} œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú {v} 0<v r‚â§v = begin
  r·∂ú œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú                        ‚â°‚ü®‚ü©
  DV.r (toCRoute œÉX·µ¢‚±º·∂ú) (toCRoute œÉY·µ¢‚±º·∂ú) ‚â°‚ü® DVP.d-cong {n} ‚âà-refl ‚âà-refl ‚ü©
  DV.r (cœÉX i j) (cœÉY i j)               ‚â°‚ü® DVP.d-cong {n} (œÉ-toCMatrix-commute X·∂ú (œÉ-pres-ùë™‚Çò X·∂ú) i j) (œÉ-toCMatrix-commute Y·∂ú (œÉ-pres-ùë™‚Çò Y·∂ú) i j) ‚ü©
  DV.r (œÉ·∂ú cX i j) (œÉ·∂ú cY i j)           <‚ü® DVSC.r[œÉX·µ¢‚±º,œÉY·µ¢‚±º]<v cX cY i j 0<v d‚â§v ‚ü©
  v                                      ‚àé
  where
  cX  = toCMatrix X·∂ú
  cœÉX = toCMatrix (œÉ-pres-ùë™‚Çò X·∂ú)
  cY  = toCMatrix Y·∂ú
  cœÉY = toCMatrix (œÉ-pres-ùë™‚Çò Y·∂ú)
  d‚â§v : ‚àÄ k ‚Üí cX k j ‚ââ·∂ú cY k j ‚Üí DV.r (cX k j) (cY k j) ‚â§ v
  d‚â§v k cX‚Çñ‚±º‚ââcY‚Çñ‚±º = begin
    DV.r (cX k j) (cY k j) ‚â°‚ü®‚ü©
    r·∂ú  (X·∂ú k j) (Y·∂ú k j) ‚â°‚ü® r·∂ú‚â°r (X·∂ú k j) (Y·∂ú k j) ‚âà-refl ‚âà-refl cX‚Çñ‚±º‚ââcY‚Çñ‚±º ‚ü©
    r   (X k j)  (Y k j)  ‚â§‚ü® r‚â§v k j ‚ü©
    v                      ‚àé
    where open ‚â§-Reasoning

r·∂ú-strContr-ùë™ùë∞ : ‚àÄ {X Y i j} ‚Üí (ùë∞‚Çò X √ó ùë™‚Çò Y) ‚äé (ùë™‚Çò X √ó ùë∞‚Çò Y) ‚Üí
                 (œÉX·µ¢‚±º·∂ú : ùë™ (œÉ X i j)) (œÉY·µ¢‚±º·∂ú : ùë™ (œÉ Y i j)) ‚Üí
                 ‚àÄ {v} ‚Üí (‚àÄ k l ‚Üí r (X k l) (Y k l) ‚â§ v) ‚Üí
                 r·∂ú œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú < v
r·∂ú-strContr-ùë™ùë∞ {X} {Y} (inj‚ÇÅ (X‚Å± , Y·∂ú)) œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú {v} r‚â§v with ùë∞‚Çò-witness X‚Å±
...   | (k , l , X‚Çñ‚Çó‚Å±) = begin
  r·∂ú œÉX·µ¢‚±º·∂ú  œÉY·µ¢‚±º·∂ú         <‚ü® r·∂ú<H·∂ú+x œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú _ ‚ü©
  H·∂ú + r‚Å± (X k l) (Y k l) ‚â°‚ü® H+r‚Å±‚â°r ‚âà-refl ‚âà-refl (ùë™ùë∞‚áí‚ââ (Y·∂ú k l) X‚Çñ‚Çó‚Å± ‚àò ‚âà-sym) (inj‚ÇÅ X‚Çñ‚Çó‚Å±) ‚ü©
  r (X k l) (Y k l)       ‚â§‚ü® r‚â§v k l ‚ü©
  v                        ‚àé
  where open ‚â§-Reasoning
r·∂ú-strContr-ùë™ùë∞ {X} {Y} (inj‚ÇÇ (X·∂ú , Y‚Å±)) œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú {v} r‚â§v with ùë∞‚Çò-witness Y‚Å±
... | (k , l , Y‚Çñ‚Çó‚Å±) = begin
  r·∂ú œÉX·µ¢‚±º·∂ú  œÉY·µ¢‚±º·∂ú           <‚ü® r·∂ú<H·∂ú+x œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú _ ‚ü©
  H·∂ú + r‚Å± (X k l) (Y k l) ‚â°‚ü® H+r‚Å±‚â°r ‚âà-refl ‚âà-refl (ùë™ùë∞‚áí‚ââ (X·∂ú k l) Y‚Çñ‚Çó‚Å±) (inj‚ÇÇ Y‚Çñ‚Çó‚Å±) ‚ü©
  r (X k l) (Y k l)       ‚â§‚ü® r‚â§v k l ‚ü©
  v                        ‚àé
  where open ‚â§-Reasoning

r·∂ú-strContrOrbits : ‚àÄ {X i j} ‚Üí
                     (œÉX·µ¢‚±º·∂ú : ùë™ (œÉ X i j)) (œÉ¬≤X·µ¢‚±º·∂ú : ùë™ (œÉ (œÉ X) i j)) ‚Üí
                     ‚àÄ {v} ‚Üí 0 < v ‚Üí (‚àÄ k l ‚Üí r (X k l) (œÉ X k l) ‚â§ v) ‚Üí
                     r·∂ú œÉX·µ¢‚±º·∂ú œÉ¬≤X·µ¢‚±º·∂ú < v
r·∂ú-strContrOrbits {X} {i} {j} œÉX·µ¢‚±º·∂ú œÉ¬≤X·µ¢‚±º·∂ú {v} 0<v r‚â§v with ùë™‚Çò? X | ùë™‚Çò? (œÉ X)
... | yes X·∂ú | yes œÉX·∂ú = r·∂ú-strContr-ùë™ùë™ X·∂ú œÉX·∂ú œÉX·µ¢‚±º·∂ú œÉ¬≤X·µ¢‚±º·∂ú 0<v r‚â§v
... | yes X·∂ú | no  œÉX‚Å± = contradiction (œÉ-pres-ùë™‚Çò X·∂ú) œÉX‚Å±
... | no  X‚Å± | yes œÉX·∂ú = r·∂ú-strContr-ùë™ùë∞ (inj‚ÇÅ (X‚Å± , œÉX·∂ú)) œÉX·µ¢‚±º·∂ú œÉ¬≤X·µ¢‚±º·∂ú r‚â§v
... | no  X‚Å± | no  œÉX‚Å± with ùë∞‚Çò-witness œÉX‚Å±
...   | (m , n , œÉX‚Çò‚Çô‚Å±) with œÉX·µ¢‚±º‚Å±‚áíX‚Çñ‚±º‚Å±‚ââœÉX‚Çñ‚±º X m n œÉX‚Çò‚Çô‚Å±
...     | (k , X‚Çñ‚Çô‚ââœÉX‚Çñ‚Çô , X‚Çñ‚Çô‚Å± , _) = begin
  r·∂ú œÉX·µ¢‚±º·∂ú  œÉ¬≤X·µ¢‚±º·∂ú            <‚ü® r·∂ú<H·∂ú+x œÉX·µ¢‚±º·∂ú œÉ¬≤X·µ¢‚±º·∂ú _ ‚ü©
  H·∂ú + r‚Å± (X k n) (œÉ X k n) ‚â°‚ü® H+r‚Å±‚â°r ‚âà-refl ‚âà-refl X‚Çñ‚Çô‚ââœÉX‚Çñ‚Çô (inj‚ÇÅ X‚Çñ‚Çô‚Å±) ‚ü©
  r (X k n) (œÉ X k n)       ‚â§‚ü® r‚â§v k n ‚ü©
  v                          ‚àé
  where open ‚â§-Reasoning

r·∂ú-strContrOnùë™ : ‚àÄ {X Y} ‚Üí ùë™‚Çò X ‚Üí
                  ‚àÄ {i j} ‚Üí (œÉX·µ¢‚±º·∂ú : ùë™ (œÉ X i j)) (œÉY·µ¢‚±º·∂ú : ùë™ (œÉ Y i j)) ‚Üí
                  ‚àÄ {v} ‚Üí 0 < v ‚Üí (‚àÄ k l ‚Üí r (X k l) (Y k l) ‚â§ v) ‚Üí
                  r·∂ú œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú < v
r·∂ú-strContrOnùë™ {X} {Y} X·∂ú {i} {j} œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú 0<v r‚â§v with ùë™‚Çò? Y
... | yes Y·∂ú = r·∂ú-strContr-ùë™ùë™ X·∂ú Y·∂ú œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú 0<v r‚â§v
... | no  Y‚Å± = r·∂ú-strContr-ùë™ùë∞ (inj‚ÇÇ (X·∂ú , Y‚Å±)) œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú r‚â§v

------------------------------------------------------------------------
-- r‚Å± is contracting in the right way

r‚Å±-strContrOrbits-œÉX : ‚àÄ {X i j} ‚Üí ùë∞ (œÉ X i j) ‚Üí
                        ‚àÄ {v} ‚Üí (‚àÄ k l ‚Üí r (X k l) (œÉ X k l) ‚â§ v) ‚Üí
                        H·∂ú + h‚Å± (œÉ X i j) < v
r‚Å±-strContrOrbits-œÉX {X} {i} {j} œÉX·µ¢‚±º‚Å± {v} r‚â§v with œÉX·µ¢‚±º‚Å±‚áíX‚Çñ‚±º‚Å±‚ââœÉX‚Çñ‚±º X i j œÉX·µ¢‚±º‚Å±
... | (k , X‚Çñ‚±º‚ââœÉX‚Çñ‚±º , X‚Çñ‚±º‚Å± , |X‚Çñ‚±º|<|œÉX·µ¢‚±º|) = begin
  H·∂ú + h‚Å± (œÉ X i j)                 <‚ü® +-mono ≥-< H·∂ú (h‚Å±-mono X‚Çñ‚±º‚Å± œÉX·µ¢‚±º‚Å± |X‚Çñ‚±º|<|œÉX·µ¢‚±º|) ‚ü©
  H·∂ú + h‚Å± (X k j)                   ‚â§‚ü® +-mono ≥-‚â§ H·∂ú (m‚â§m‚äîn _ _) ‚ü©
  H·∂ú + (h‚Å± (X k j) ‚äî h‚Å± (œÉ X k j))  ‚â°‚ü® H+r‚Å±‚â°r ‚âà-refl ‚âà-refl X‚Çñ‚±º‚ââœÉX‚Çñ‚±º (inj‚ÇÅ X‚Çñ‚±º‚Å±) ‚ü©
  r (X k j) (œÉ X k j)              ‚â§‚ü® r‚â§v k j ‚ü©
  v                                 ‚àé

r‚Å±-strContrOrbits-œÉ¬≤X : ‚àÄ {X i j} ‚Üí ùë∞ (œÉ (œÉ X) i j) ‚Üí
                         ‚àÄ {v} ‚Üí (‚àÄ k l ‚Üí r (X k l) (œÉ X k l) ‚â§ v) ‚Üí
                         H·∂ú + h‚Å± (œÉ (œÉ X) i j) < v
r‚Å±-strContrOrbits-œÉ¬≤X {X} {i} {j} œÉ¬≤X·µ¢‚±º‚Å± {v} r‚â§v with œÉX·µ¢‚±º‚Å±‚áíX‚Çñ‚±º‚Å±‚ââœÉX‚Çñ‚±º (œÉ X) i j œÉ¬≤X·µ¢‚±º‚Å±
... | (k , _ , œÉX‚Çñ‚±º‚Å± , |œÉX‚Çñ‚±º|<|œÉ¬≤X·µ¢‚±º|) with œÉX·µ¢‚±º‚Å±‚áíX‚Çñ‚±º‚Å±‚ââœÉX‚Çñ‚±º X k j œÉX‚Çñ‚±º‚Å±
...   | (l , X‚Çó‚±º‚ââœÉX‚Çó‚±º , X‚Çó‚±º‚Å± , |X‚Çó‚±º|<|œÉX‚Çñ‚±º|) = begin
  H·∂ú + h‚Å± (œÉ (œÉ X) i j)             <‚ü® +-mono ≥-< H·∂ú (h‚Å±-mono X‚Çó‚±º‚Å± œÉ¬≤X·µ¢‚±º‚Å± (<-trans |X‚Çó‚±º|<|œÉX‚Çñ‚±º| |œÉX‚Çñ‚±º|<|œÉ¬≤X·µ¢‚±º|)) ‚ü©
  H·∂ú + h‚Å± (X l j)                   ‚â§‚ü® +-mono ≥-‚â§ H·∂ú (m‚â§m‚äîn _ _) ‚ü©
  H·∂ú + (h‚Å± (X l j) ‚äî h‚Å± (œÉ X l j))  ‚â°‚ü® H+r‚Å±‚â°r ‚âà-refl ‚âà-refl X‚Çó‚±º‚ââœÉX‚Çó‚±º (inj‚ÇÅ X‚Çó‚±º‚Å±) ‚ü©
  r (X l j) (œÉ X l j)              ‚â§‚ü® r‚â§v l j ‚ü©
  v                                 ‚àé

r‚Å±-strContrOnùë™ : ‚àÄ {X Y i j} ‚Üí ùë™‚Çò X ‚Üí ùë∞ (œÉ Y i j) ‚Üí
                  ‚àÄ {v} ‚Üí (‚àÄ k l ‚Üí r (X k l) (Y k l) ‚â§ v) ‚Üí
                  H·∂ú + r‚Å± (œÉ X i j) (œÉ Y i j) < v
r‚Å±-strContrOnùë™ {X} {Y} {i} {j} X·∂ú œÉY·µ¢‚±º‚Å± {v} r‚â§v with œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y i j œÉY·µ¢‚±º‚Å±
... | (k , œÉY·µ¢‚±º‚âàA·µ¢‚ÇñY‚Çñ‚±º , Y‚Çñ‚±º‚Å±) = begin
  H·∂ú + r‚Å± (œÉ X i j) (œÉ Y i j) ‚â°‚ü® cong (H·∂ú +_) (r‚Å±x·∂úy‚Å±‚â°h‚Å±y‚Å± (œÉ-pres-ùë™‚Çò X·∂ú i j) œÉY·µ¢‚±º‚Å±) ‚ü©
  H·∂ú + h‚Å± (œÉ Y i j)            ‚â°‚ü® cong (H·∂ú +_) (h‚Å±-cong œÉY·µ¢‚±º‚âàA·µ¢‚ÇñY‚Çñ‚±º) ‚ü©
  H·∂ú + h‚Å± (A i k ‚ñ∑ Y k j)      <‚ü® +-mono ≥-< H·∂ú (h‚Å±-decr (ùë∞-cong œÉY·µ¢‚±º‚âàA·µ¢‚ÇñY‚Çñ‚±º œÉY·µ¢‚±º‚Å±)) ‚ü©
  H·∂ú + h‚Å± (Y k j)              ‚â°‚ü® cong (H·∂ú +_) (sym (r‚Å±x·∂úy‚Å±‚â°h‚Å±y‚Å± (X·∂ú k j) Y‚Çñ‚±º‚Å±)) ‚ü©
  H·∂ú + r‚Å± (X k j) (Y k j)     ‚â°‚ü® H+r‚Å±‚â°r ‚âà-refl ‚âà-refl (ùë™ùë∞‚áí‚ââ (X·∂ú k j) Y‚Çñ‚±º‚Å±) (inj‚ÇÇ Y‚Çñ‚±º‚Å±) ‚ü©
  r (X k j) (Y k j)           ‚â§‚ü® r‚â§v k j ‚ü©
  v                           ‚àé
  where open ‚â§-Reasoning

r‚Å±-strContrOrbits : ‚àÄ {X i j} ‚Üí ùë∞ (œÉ X i j) ‚äé ùë∞ (œÉ (œÉ X) i j) ‚Üí
                     ‚àÄ {v} ‚Üí (‚àÄ k l ‚Üí r (X k l) (œÉ X k l) ‚â§ v) ‚Üí
                     H·∂ú + r‚Å± (œÉ X i j) (œÉ (œÉ X) i j) < v
r‚Å±-strContrOrbits {X} {i} {j} œÉX·µ¢‚±º‚Å±‚äéœÉ¬≤X·µ¢‚±º‚Å± {v} r‚â§v with ‚â§-total (h‚Å± (œÉ X i j)) (h‚Å± (œÉ (œÉ X) i j))
... | inj‚ÇÅ h‚Å±œÉX·µ¢‚±º‚â§h‚Å±œÉ¬≤X·µ¢‚±º = subst (_< v) (sym (cong (H·∂ú +_) (m‚â§n‚áím‚äîn‚â°n h‚Å±œÉX·µ¢‚±º‚â§h‚Å±œÉ¬≤X·µ¢‚±º))) (r‚Å±-strContrOrbits-œÉ¬≤X (h‚Å±-force-ùë∞ œÉX·µ¢‚±º‚Å±‚äéœÉ¬≤X·µ¢‚±º‚Å± h‚Å±œÉX·µ¢‚±º‚â§h‚Å±œÉ¬≤X·µ¢‚±º) r‚â§v)
... | inj‚ÇÇ h‚Å±œÉ¬≤X·µ¢‚±º‚â§h‚Å±œÉX·µ¢‚±º = subst (_< v) (sym (cong (H·∂ú +_) (m‚â§n‚áín‚äîm‚â°n h‚Å±œÉ¬≤X·µ¢‚±º‚â§h‚Å±œÉX·µ¢‚±º))) (r‚Å±-strContrOrbits-œÉX {X} {i} {j} (h‚Å±-force-ùë∞ (swap œÉX·µ¢‚±º‚Å±‚äéœÉ¬≤X·µ¢‚±º‚Å±) h‚Å±œÉ¬≤X·µ¢‚±º‚â§h‚Å±œÉX·µ¢‚±º) r‚â§v)

------------------------------------------------------------------------
-- r is contracting in the right way

r-strContrOrbits : ‚àÄ {X} ‚Üí
                    ‚àÄ {v} ‚Üí 0 < v ‚Üí (‚àÄ k l ‚Üí r (X k l) (œÉ X k l) ‚â§ v) ‚Üí
                    ‚àÄ i j ‚Üí r (œÉ X i j) (œÉ (œÉ X) i j) < v
r-strContrOrbits {X} 0<v r‚â§v i j
  with œÉ X i j ‚âü œÉ (œÉ X) i j | ùë™? (œÉ X i j) | ùë™? (œÉ (œÉ X) i j)
... | yes œÉX·µ¢‚±º‚âàœÉ¬≤X·µ¢‚±º | _         | _          = 0<v
... | no  _          | yes œÉX·µ¢‚±º·∂ú | yes œÉ¬≤X·µ¢‚±º·∂ú = r·∂ú-strContrOrbits œÉX·µ¢‚±º·∂ú œÉ¬≤X·µ¢‚±º·∂ú 0<v r‚â§v
... | no  _          | no  œÉX·µ¢‚±º‚Å± | _          = r‚Å±-strContrOrbits (inj‚ÇÅ œÉX·µ¢‚±º‚Å±) r‚â§v
... | no  _          | yes _     | no  œÉ¬≤X·µ¢‚±º‚Å± = r‚Å±-strContrOrbits (inj‚ÇÇ œÉ¬≤X·µ¢‚±º‚Å±) r‚â§v

r-strContrOnùë™ : ‚àÄ {X Y} ‚Üí ùë™‚Çò X ‚Üí
                 ‚àÄ {v} ‚Üí 0 < v ‚Üí (‚àÄ k l ‚Üí r (X k l) (Y k l) ‚â§ v) ‚Üí
                 ‚àÄ i j ‚Üí r (œÉ X i j) (œÉ Y i j) < v
r-strContrOnùë™ {X} {Y} X·∂ú 0<v r‚â§v i j
  with œÉ X i j ‚âü œÉ Y i j | ùë™? (œÉ X i j) | ùë™? (œÉ Y i j)
... | yes œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º | _         | _         = 0<v
... | no  œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º | yes œÉX·µ¢‚±º·∂ú  | yes œÉY·µ¢‚±º·∂ú = r·∂ú-strContrOnùë™ X·∂ú œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú 0<v r‚â§v
... | no  œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º | yes _     | no  œÉY·µ¢‚±º‚Å± = r‚Å±-strContrOnùë™ X·∂ú œÉY·µ¢‚±º‚Å± r‚â§v
... | no  œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º | no  œÉX·µ¢‚±º‚Å± | _         = contradiction (œÉ-pres-ùë™‚Çò X·∂ú i j) œÉX·µ¢‚±º‚Å±

------------------------------------------------------------------------
-- D is contracting in the right way

open Metric ‚ÑùùïÑ‚Çõ using (_StrContrOnOrbitsOver_; _StrContrOnFixedPointOver_)

œÉ-strContrOrbits : œÉ StrContrOnOrbitsOver D
œÉ-strContrOrbits œÉX‚ââX = D<v 0<DXœÉX (r-strContrOrbits 0<DXœÉX (r‚â§D _ _))
  where 0<DXœÉX = Y‚ââX‚áí0<DXY œÉX‚ââX

œÉ-strContrOnùë™ : ‚àÄ {X Y} ‚Üí ùë™‚Çò X ‚Üí Y ‚ââ‚Çò X ‚Üí D (œÉ X) (œÉ Y) < D X Y
œÉ-strContrOnùë™ X·∂ú Y‚ââX = D<v 0<DXY (r-strContrOnùë™ X·∂ú 0<DXY (r‚â§D _ _))
  where 0<DXY = Y‚ââX‚áí0<DXY Y‚ââX

œÉ-strContrOnFP : œÉ StrContrOnFixedPointOver D
œÉ-strContrOnFP {X} {X*} œÉX*‚âàX* X‚ââX* = begin
  D X*     (œÉ X) ‚â°‚ü® D-cong (‚âà‚Çò-sym œÉX*‚âàX*) (‚âà‚Çò-refl {x = œÉ X}) ‚ü©
  D (œÉ X*) (œÉ X) <‚ü® œÉ-strContrOnùë™ (fixedPoint·∂ú œÉX*‚âàX*) X‚ââX* ‚ü©
  D X*     X     ‚àé
  where open ‚â§-Reasoning
