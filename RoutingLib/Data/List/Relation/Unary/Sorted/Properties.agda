open import Relation.Binary using (TotalOrder)

module RoutingLib.Data.List.Relation.Unary.Sorted.Properties
  {a ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} (order : TotalOrder a ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) where

open TotalOrder order renaming (Carrier to A)
open Eq using () renaming (setoid to S; trans to ‚âà-trans; sym to ‚âà-sym)

open import Data.Maybe using (nothing; just)
open import Data.Nat as ‚Ñï using (‚Ñï; z‚â§n; s‚â§s; suc; ‚â§-pred) renaming (_<_ to _<‚Ñï_; _‚â§_ to _‚â§‚Ñï_)
open import Data.Nat.Properties as ‚Ñï using (‚â§+‚â¢‚áí<; ‚â§‚áí‚âØ; <‚áí‚â¢; suc-injective; module ‚â§-Reasoning; <-cmp)
open import Data.Fin as Fin using (Fin; Fin‚Ä≤; zero; suc; cast; pred; to‚Ñï) renaming (_‚â§_ to _‚â§ùîΩ_; _<_ to _<ùîΩ_)
open import Data.Fin.Properties as Fin using (to‚Ñï-cast; to‚Ñï-injective)
open import Data.Fin.Patterns
open import Data.Fin.Induction
open import Data.List as List
open import Data.List.Relation.Unary.All as All using (All; []; _‚à∑_)
open import Data.List.Relation.Unary.Any as Any using (Any; here; there; index)
open import Data.List.Membership.Propositional.Properties using (‚àà-lookup; ‚àà-‚àÉ++)
open import Data.List.Relation.Unary.AllPairs as AllPairs using ([]; _‚à∑_)
open import Data.List.Relation.Unary.Linked using ([]; [-]; _‚à∑_)
open import Data.List.Relation.Unary.Linked.Properties using (Linked‚áíAllPairs)
import Data.List.Relation.Binary.Permutation.Setoid.Properties S as Perm‚Çö
open import Data.List.Properties
open import Data.List.Relation.Unary.All.Properties using (Any¬¨‚áí¬¨All)
open import Data.Product using (‚àÉ; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ; uncurry‚Ä≤)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Function.Base using (_‚àò_)
open import Relation.Binary hiding (Decidable)
open import Relation.Binary.PropositionalEquality as P
  using (_‚â°_; _‚â¢_; cong) renaming (setoid to ‚â°-setoid; refl to ‚â°-refl; sym to ‚â°-sym; trans to ‚â°-trans)
import Relation.Binary.Reasoning.Setoid as SetoidReasoning
import Relation.Binary.Reasoning.PartialOrder as PosetReasoning
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (Pred; Decidable)
open import Data.List.Relation.Unary.Sorted.TotalOrder order as Sorted

open import RoutingLib.Data.Fin.Properties as Fin
open import RoutingLib.Data.List.Relation.Unary.All.Properties as All‚Çö
open import RoutingLib.Data.List.Relation.Binary.Pointwise
open import RoutingLib.Data.List.Relation.Unary.Linked.Properties using (lookup-Linked)
open import RoutingLib.Data.Maybe.Relation.Binary.Connected hiding (refl)

open import Data.List.Relation.Binary.Permutation.Setoid S as Perm using (_‚Ü≠_; ‚Ü≠-sym)
open import RoutingLib.Data.List.Relation.Binary.Permutation.Setoid.Properties S
  using (xs‚Ü≠ys‚áí|xs|‚â°|ys|; permute; permute-lookup; permute-injective)
open import Data.List.Relation.Binary.Equality.Setoid S
open import RoutingLib.Data.List.Relation.Binary.Sublist.Setoid.Properties S using (length-mono-<; filter-‚äÇ)

open import RoutingLib.Relation.Binary.Construct.NonStrictToStrict.TotalOrder order

tail‚Üó : ‚àÄ {x xs} ‚Üí Sorted (x ‚à∑ xs) ‚Üí Sorted xs
tail‚Üó [-]       = []
tail‚Üó (_ ‚à∑ Rxs) = Rxs

head‚Üó : ‚àÄ {x xs} ‚Üí Sorted (x ‚à∑ xs) ‚Üí Connected _‚â§_ (just x) (List.head xs)
head‚Üó [-]       = just-nothing
head‚Üó (Rxy ‚à∑ _) = just Rxy

_‚à∑‚Üó_ : ‚àÄ {x xs} ‚Üí
       Connected _‚â§_ (just x) (List.head xs) ‚Üí
       Sorted xs ‚Üí
       Sorted (x ‚à∑ xs)
_‚à∑‚Üó_ {xs = []}     _  _            = [-]
_‚à∑‚Üó_ {xs = y ‚à∑ xs} (just Rxy) Ryxs = Rxy ‚à∑ Ryxs

lookup-Sorted : ‚àÄ {xs} ‚Üí Sorted xs ‚Üí
                ‚àÄ {v} ‚Üí Connected _‚â§_ (just v) (List.head xs) ‚Üí
                ‚àÄ i ‚Üí v ‚â§ lookup xs i
lookup-Sorted xs‚Üó c i = lookup-Linked trans xs‚Üó c i

lookup-mono-‚â§ : ‚àÄ {xs} ‚Üí Sorted xs ‚Üí ‚àÄ {i j} ‚Üí i ‚â§ùîΩ j ‚Üí lookup xs i ‚â§ lookup xs j
lookup-mono-‚â§ {x ‚à∑ xs} xs‚Üó {zero}  {zero}  z‚â§n       = refl
lookup-mono-‚â§ {x ‚à∑ xs} xs‚Üó {zero}  {suc j} z‚â§n       = lookup-Sorted xs‚Üó (just refl) (suc j)
lookup-mono-‚â§ {x ‚à∑ xs} xs‚Üó {suc i} {suc j} (s‚â§s i‚â§j) = lookup-mono-‚â§ (tail‚Üó xs‚Üó) i‚â§j


private
  ‚Üó‚Ü≠‚Üó‚áí‚â§ : ‚àÄ {xs ys} (xs‚Ü≠ys : xs ‚Ü≠ ys) ‚Üí Sorted xs ‚Üí Sorted ys ‚Üí
          ‚àÄ {i} ‚Üí Acc Fin._<_ i ‚Üí
          ‚àÄ {j} ‚Üí to‚Ñï i ‚Ñï.‚â§ to‚Ñï j ‚Üí
          (‚àÄ k ‚Üí i Fin.< k ‚Üí to‚Ñï k ‚Ñï.‚â§ to‚Ñï j ‚Üí permute xs‚Ü≠ys k Fin.< j) ‚Üí
          ‚àÄ {v} ‚Üí lookup xs i ‚â§ v ‚Üí lookup ys j ‚â§ v
  ‚Üó‚Ü≠‚Üó‚áí‚â§ {xs@(_ ‚à∑ _)} {ys@(_ ‚à∑ _)} xs‚Ü≠ys xs‚Üó ys‚Üó {i} (acc rec) {j} i‚â§j ‚àÄk {v} leq with j Fin.‚â§? permute xs‚Ü≠ys i
  ...   | yes j‚â§œÄ·µ¢ = begin
    lookup ys j                  ‚â§‚ü®  lookup-mono-‚â§ ys‚Üó j‚â§œÄ·µ¢ ‚ü©
    lookup ys (permute xs‚Ü≠ys i)  ‚âàÀò‚ü® permute-lookup xs‚Ü≠ys i ‚ü©
    lookup xs i                  ‚â§‚ü®  leq ‚ü©
    v                            ‚àé
    where open PosetReasoning poset
  ...   | no  j‚â∞œÄ·µ¢ with i Fin.‚âü zero
  ...     | yes ‚â°-refl = let (u , v , u‚â¢v , gu‚â°gv) = Fin.pigeonhole Fin.‚â§-refl g in
    contradiction gu‚â°gv (g-unique u‚â¢v)
    where
    j<‚à£xs‚à£ : to‚Ñï j ‚Ñï.< length xs
    j<‚à£xs‚à£ = P.subst (to‚Ñï j ‚Ñï.<_) (‚â°-sym (xs‚Ü≠ys‚áí|xs|‚â°|ys| xs‚Ü≠ys)) (Fin.to‚Ñï<n j)

    q : (x : Fin‚Ä≤ (suc j)) ‚Üí permute xs‚Ü≠ys (Fin.inject‚â§ x j<‚à£xs‚à£) Fin.< j
    q 0F      = ‚Ñï.‚â∞‚áí> j‚â∞œÄ·µ¢
    q (suc x) = ‚àÄk _ (s‚â§s z‚â§n) (P.subst (_‚â§‚Ñï to‚Ñï j) (‚â°-sym (Fin.to‚Ñï-inject‚â§ (suc x) j<‚à£xs‚à£)) (Fin.to‚Ñï<n x))
    
    g : Fin‚Ä≤ (suc j) ‚Üí Fin‚Ä≤ j
    g x = lower (permute xs‚Ü≠ys (Fin.inject‚â§ x j<‚à£xs‚à£)) (q x)

    g-unique : ‚àÄ {x y} ‚Üí x ‚â¢ y ‚Üí g x ‚â¢ g y
    g-unique {x} {y} x‚â¢y = x‚â¢y
      ‚àò Fin.inject‚â§-injective _ _ x y
      ‚àò permute-injective xs‚Ü≠ys
      ‚àò lower-injective _ _ (q x) (q y)
    
  ...     | no  i‚â¢0 = ‚Üó‚Ü≠‚Üó‚áí‚â§ xs‚Ü≠ys xs‚Üó ys‚Üó
    (rec (pred i) (‚Ñï.‚â§-reflexive (Fin.suc-pred i‚â¢0)))
    (‚Ñï.‚â§-trans (Fin.‚â§-pred i) i‚â§j)
    eq
    (trans (lookup-mono-‚â§ xs‚Üó (Fin.‚â§-pred i)) leq)
    where

    eq : ‚àÄ k ‚Üí pred i <ùîΩ k ‚Üí to‚Ñï k ‚â§‚Ñï to‚Ñï j ‚Üí permute xs‚Ü≠ys k <ùîΩ j
    eq k i‚à∏1‚â§k k‚â§j with i Fin.‚âü k
    ... | yes P.refl = ‚Ñï.‚â∞‚áí> j‚â∞œÄ·µ¢
    ... | no  i‚â¢k    = ‚àÄk k (‚Ñï.‚â§‚àß‚â¢‚áí< (P.subst (_‚â§‚Ñï to‚Ñï k) (Fin.suc-pred i‚â¢0) i‚à∏1‚â§k) (i‚â¢k ‚àò to‚Ñï-injective)) k‚â§j
    
‚Üó‚Ü≠‚Üó‚áí‚âã : ‚àÄ {xs ys} ‚Üí Sorted xs ‚Üí Sorted ys ‚Üí xs ‚Ü≠ ys ‚Üí xs ‚âã ys
‚Üó‚Ü≠‚Üó‚áí‚âã {xs} {ys} xs‚Üó ys‚Üó xs‚Ü≠ys = lookup‚Åª (xs‚Ü≠ys‚áí|xs|‚â°|ys| xs‚Ü≠ys) (Œª {i} {j} i‚â°j ‚Üí antisym
  (‚Üó‚Ü≠‚Üó‚áí‚â§ (‚Ü≠-sym xs‚Ü≠ys) ys‚Üó xs‚Üó (<-wellFounded j) (‚Ñï.‚â§-reflexive (‚â°-sym i‚â°j)) (Œª k j<k k‚â§i ‚Üí contradiction (‚Ñï.<-transÀ° j<k k‚â§i) (‚Ñï.<-irrefl (‚â°-sym i‚â°j))) refl)
  (‚Üó‚Ü≠‚Üó‚áí‚â§ xs‚Ü≠ys         xs‚Üó ys‚Üó (<-wellFounded i) (‚Ñï.‚â§-reflexive i‚â°j)         (Œª k i<k k‚â§j ‚Üí contradiction (‚Ñï.<-transÀ° i<k k‚â§j) (‚Ñï.<-irrefl i‚â°j)) refl))
