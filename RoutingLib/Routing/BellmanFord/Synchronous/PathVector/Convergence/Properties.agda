open import Data.Product using (‚àÉ; _,_; _√ó_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_]‚Ä≤; map; swap)
open import Data.Nat using (‚Ñï; zero; suc; z‚â§n; s‚â§s; _<_; _‚â§_; _‚äî_; _+_; _‚à∏_)
open import Data.Nat.Properties hiding (module ‚â§-Reasoning; _‚âü_)
open import Data.Fin.Properties using () renaming (_‚âü_ to _‚âüùîΩ_)
open import Data.Fin.Subset using (Subset; _‚àà_; _‚àâ_; ‚ÅÖ_‚ÅÜ; ‚à£_‚à£; ‚ä§)
open import Data.Fin.Subset.Properties using (x‚ààp‚à©q‚Å∫; x‚àà‚ÅÖx‚ÅÜ; ‚àà‚ä§)
open import Data.Fin.Dec using (_‚àà?_)
open import Data.Product using (‚àÉ‚ÇÇ; proj‚ÇÇ)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; subst; subst‚ÇÇ)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_; id)
open import Induction.WellFounded using (Acc; acc)
open import Induction.Nat using () renaming (<-well-founded to <-wellFounded)

open import RoutingLib.Data.Fin.Subset using (_\\_)
open import RoutingLib.Data.Fin.Subset.Properties using (‚à£p\\q‚à£<‚à£p‚à£; i‚àâp\\q‚áíi‚àâp; i‚àâ‚ÅÖj‚ÅÜ)
open import RoutingLib.Data.Nat.Properties
open import RoutingLib.Data.Table.Properties using (max[t]<x; x<max[t])
open import RoutingLib.Function.Metric
import RoutingLib.Function.Metric.Construct.MaxLift as MaxLift

open import RoutingLib.Routing.Algebra
open import RoutingLib.Routing.Algebra.CertifiedPathAlgebra
import RoutingLib.Routing.Algebra.CertifiedPathAlgebra.Consistency as Consistency
import RoutingLib.Routing.Algebra.CertifiedPathAlgebra.Properties as PathAlgebraProperties
open import RoutingLib.Routing.Model as Model using (AdjacencyMatrix)
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Convergence.Metrics as PathVectorMetrics
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Properties as PathVectorProperties
import RoutingLib.Routing.BellmanFord.Synchronous.DistanceVector.Convergence.Metrics as DistanceVectorMetrics
import RoutingLib.Routing.BellmanFord.Synchronous.DistanceVector.Convergence.Properties as DistanceVectorProperties

open ‚â§-Reasoning
  
module RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Convergence.Properties
  {a b ‚Ñì n} {algebra : RawRoutingAlgebra a b ‚Ñì}
  (isPathAlgebra : IsCertifiedPathAlgebra algebra n)
  (A : AdjacencyMatrix algebra n)
  (1‚â§n : 1 ‚â§ n)
  where

open Model algebra n
open RawRoutingAlgebra algebra
open IsCertifiedPathAlgebra isPathAlgebra
open Consistency algebra isPathAlgebra A
open PathAlgebraProperties isPathAlgebra
open PathVectorProperties algebra isPathAlgebra A

open PathVectorMetrics isPathAlgebra A

private module DVP = DistanceVectorProperties isRoutingAlgebra·∂ú isFinite·∂ú
-- private module DV = DistanceVectorMetrics isRoutingAlgebra·∂ú isFinite·∂ú

------------------------------------------------------------------------
-- General properties

1<1+n‚à∏‚à£x‚à£ : ‚àÄ {r} ‚Üí 1 < suc n ‚à∏ size r
1<1+n‚à∏‚à£x‚à£ {r} = begin
  2                    ‚â°‚ü® sym (m+n‚à∏n‚â°m 2 n) ‚ü©
  2 + n ‚à∏ n            ‚â§‚ü® ‚à∏-mono ≥-‚â§ (suc (suc n)) (size<n 1‚â§n r) ‚ü©
  2 + n ‚à∏ suc (size r) ‚â°‚ü®‚ü©
  1 + n ‚à∏ size r       ‚àé

------------------------------------------------------------------------
-- Properties of h‚Å±

H‚Å± : ‚Ñï
H‚Å± = suc n

h‚Å±-cong : ‚àÄ {r s} ‚Üí r ‚âà s ‚Üí h‚Å± r ‚â° h‚Å± s
h‚Å±-cong {r} {s} r‚âàs with ùë™? r | ùë™? s
... | yes _  | yes _  = refl
... | no  r‚Å± | yes s·∂ú = contradiction (ùë™-cong (‚âà-sym r‚âàs) s·∂ú) r‚Å±
... | yes r·∂ú | no  s‚Å± = contradiction (ùë™-cong r‚âàs r·∂ú) s‚Å±
... | no  _  | no  _  = cong (suc n ‚à∏_) (size-cong r‚âàs)

postulate h‚Å±-mono : ‚àÄ {x y} ‚Üí ùë∞ x ‚Üí ùë∞ y ‚Üí size x < size y ‚Üí h‚Å± y < h‚Å± x
-- h‚Å±-mono = ?

h‚Å±-decr : ‚àÄ {i j x} ‚Üí ùë∞ (A i j ‚ñ∑ x) ‚Üí h‚Å± (A i j ‚ñ∑ x) < h‚Å± x
h‚Å±-decr {i} {j} {x} A·µ¢‚±ºx‚Å± with ùë™? x | ùë™? (A i j ‚ñ∑ x)
... | yes x·∂ú | _        = contradiction x·∂ú (‚ñ∑-forces-ùë∞ A·µ¢‚±ºx‚Å±)
... | no  _  | yes A·µ¢‚±ºx·∂ú = contradiction A·µ¢‚±ºx·∂ú A·µ¢‚±ºx‚Å±
... | no  _  | no  _    = ‚à∏-mono ≥-< (‚â§-reflexive (size‚Å±-incr A·µ¢‚±ºx‚Å±)) (size‚â§n+1 _)


1‚â§h‚Å± : ‚àÄ r ‚Üí 1 ‚â§ h‚Å± r
1‚â§h‚Å± r with ùë™? r
... | yes _ = s‚â§s z‚â§n
... | no  _ = m<n‚áí0<n‚à∏m (s‚â§s (<‚áí‚â§ (size<n 1‚â§n r)))

h‚Å±‚â§H‚Å± : ‚àÄ r ‚Üí h‚Å± r ‚â§ H‚Å±
h‚Å±‚â§H‚Å± r with ùë™? r
... | yes _ = s‚â§s z‚â§n
... | no  _ = n‚à∏m‚â§n (size r) H‚Å±


h[s·∂ú]‚â§h[r] : ‚àÄ {s} ‚Üí ùë™ s ‚Üí ‚àÄ r ‚Üí h‚Å± s ‚â§ h‚Å± r
h[s·∂ú]‚â§h[r] {s} s·∂ú r with ùë™? s
... | no s‚Å±  = contradiction s·∂ú s‚Å±
... | yes _  = 1‚â§h‚Å± r

h[s·∂ú]<h[r‚Å±] : ‚àÄ {s r} ‚Üí ùë™ s ‚Üí ùë∞ r ‚Üí h‚Å± s < h‚Å± r
h[s·∂ú]<h[r‚Å±] {s} {r} s·∂ú r‚Å± with ùë™? s | ùë™? r
... | no s‚Å± | _      = contradiction s·∂ú s‚Å±
... | _     | yes r·∂ú = contradiction r·∂ú r‚Å±
... | yes _ | no  _  = 1<1+n‚à∏‚à£x‚à£

h‚Å±-force-ùë∞ : ‚àÄ {x y} ‚Üí ùë∞ x ‚äé ùë∞ y ‚Üí h‚Å± x ‚â§ h‚Å± y ‚Üí ùë∞ y
h‚Å±-force-ùë∞ (inj‚ÇÇ y‚Å±) hx‚â§hy y·∂ú = y‚Å± y·∂ú
h‚Å±-force-ùë∞ (inj‚ÇÅ x‚Å±) hx‚â§hy y·∂ú = contradiction (h[s·∂ú]<h[r‚Å±] y·∂ú x‚Å±) (‚â§‚áí‚âØ hx‚â§hy)

------------------------------------------------------------------------
-- Properties of d·µ£‚Å±

d·µ£‚Å±-cong : d·µ£‚Å± Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
d·µ£‚Å±-cong x‚âày u‚âàv = cong‚ÇÇ _‚äî_ (h‚Å±-cong x‚âày) (h‚Å±-cong u‚âàv)

d·µ£‚Å±-sym : ‚àÄ x y ‚Üí d·µ£‚Å± x y ‚â° d·µ£‚Å± y x
d·µ£‚Å±-sym x y = ‚äî-comm (h‚Å± x) (h‚Å± y)

d·µ£‚Å±‚â°0‚áíx‚âày : ‚àÄ {x y} ‚Üí d·µ£‚Å± x y ‚â° 0 ‚Üí x ‚âà y
d·µ£‚Å±‚â°0‚áíx‚âày {x} {y} d·µ£‚Å±‚â°0 = contradiction d·µ£‚Å±‚â°0 (m<n‚áín‚â¢0 (m‚â§o‚áím‚â§n‚äîo (h‚Å± x) (1‚â§h‚Å± y)))

d·µ£‚Å±-maxTriIneq : MaxTriangleIneq S d·µ£‚Å±
d·µ£‚Å±-maxTriIneq x y z = begin
  h‚Å± x ‚äî h‚Å± z                   ‚â§‚ü® ‚äî-monoÀ°-‚â§ (h‚Å± z) (m‚â§m‚äîn (h‚Å± x) (h‚Å± y)) ‚ü©
  h‚Å± x ‚äî h‚Å± y ‚äî h‚Å± z            ‚â°‚ü® ‚äî-triangulate (h‚Å± x) (h‚Å± y) (h‚Å± z) ‚ü©
  (h‚Å± x ‚äî h‚Å± y) ‚äî (h‚Å± y ‚äî h‚Å± z) ‚àé

1‚â§d·µ£‚Å± : ‚àÄ x y ‚Üí 1 ‚â§ d·µ£‚Å± x y
1‚â§d·µ£‚Å± x y = m‚â§n‚áím‚â§n‚äîo (h‚Å± y) (1‚â§h‚Å± x)

d·µ£‚Å±‚â§H‚Å± : ‚àÄ x y ‚Üí d·µ£‚Å± x y ‚â§ H‚Å±
d·µ£‚Å±‚â§H‚Å± x y = n‚â§m√óo‚â§m‚áín‚äîo‚â§m (h‚Å±‚â§H‚Å± x) (h‚Å±‚â§H‚Å± y)

d·µ£‚Å±-bounded : Bounded S d·µ£‚Å±
d·µ£‚Å±-bounded = H‚Å± , d·µ£‚Å±‚â§H‚Å±

d·µ£‚Å±x‚Å±y·∂ú‚â°h‚Å±x‚Å± : ‚àÄ {x y} ‚Üí ùë∞ x ‚Üí ùë™ y ‚Üí d·µ£‚Å± x y ‚â° h‚Å± x
d·µ£‚Å±x‚Å±y·∂ú‚â°h‚Å±x‚Å± {x} {y} x‚Å± y·∂ú with x ‚âü y
... | yes x‚âày = contradiction (ùë™-cong (‚âà-sym x‚âày) y·∂ú) x‚Å±
... | no  _   with ùë™? x | ùë™? y
...   | yes x·∂ú | _      = contradiction x·∂ú x‚Å±
...   | no  _  | no y‚Å± = contradiction y·∂ú y‚Å±
...   | no  _  | yes _ = m‚â§n‚áín‚äîm‚â°n (<‚áí‚â§ 1<1+n‚à∏‚à£x‚à£)

postulate d·µ£‚Å±x·∂úy‚Å±‚â°h‚Å±y‚Å± : ‚àÄ {x y} ‚Üí ùë™ x ‚Üí ùë∞ y ‚Üí d·µ£‚Å± x y ‚â° h‚Å± y

x‚Å±y·∂úz·∂ú‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±xy : ‚àÄ {x y z} ‚Üí ùë∞ x ‚Üí ùë™ y ‚Üí ùë™ z ‚Üí d·µ£‚Å± x z ‚â§ d·µ£‚Å± x y
x‚Å±y·∂úz·∂ú‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±xy x‚Å± y·∂ú z·∂ú =
  ‚â§-reflexive (trans (d·µ£‚Å±x‚Å±y·∂ú‚â°h‚Å±x‚Å± x‚Å± z·∂ú) (sym (d·µ£‚Å±x‚Å±y·∂ú‚â°h‚Å±x‚Å± x‚Å± y·∂ú)))

x·∂úy·∂úz‚Å±‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±yz : ‚àÄ {x y z} ‚Üí ùë™ x ‚Üí ùë™ y ‚Üí ùë∞ z ‚Üí d·µ£‚Å± x z ‚â§ d·µ£‚Å± y z
x·∂úy·∂úz‚Å±‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±yz {x} {y} {z} x·∂ú y·∂ú z‚Å± =
  subst‚ÇÇ _‚â§_ (d·µ£‚Å±-sym z x) (d·µ£‚Å±-sym z y) (x‚Å±y·∂úz·∂ú‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±xy z‚Å± y·∂ú x·∂ú)

------------------------------------------------------------------------
-- Properties of d·µ£·∂ú

d·µ£·∂ú-cong : ‚àÄ {x y w z} (w·∂ú : ùë™ w) (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) (z·∂ú : ùë™ z) ‚Üí
           w ‚âà y ‚Üí x ‚âà z ‚Üí d·µ£·∂ú w·∂ú x·∂ú ‚â° d·µ£·∂ú y·∂ú z·∂ú
d·µ£·∂ú-cong w·∂ú x·∂ú y·∂ú z·∂ú w‚âày x‚âàz = DVP.d-cong
  {x = toCRoute w·∂ú} {y = toCRoute y·∂ú}
  {u = toCRoute x·∂ú} {v = toCRoute z·∂ú} w‚âày x‚âàz

d·µ£·∂ú-sym : ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí d·µ£·∂ú x·∂ú y·∂ú ‚â° d·µ£·∂ú y·∂ú x·∂ú
d·µ£·∂ú-sym x·∂ú y·∂ú = DVP.d-sym (toCRoute x·∂ú) (toCRoute y·∂ú)

x‚âày‚áíd·µ£·∂ú‚â°0 : ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí x ‚âà y ‚Üí d·µ£·∂ú x·∂ú y·∂ú ‚â° 0
x‚âày‚áíd·µ£·∂ú‚â°0 x·∂ú y·∂ú x‚âày = DVP.x‚âày‚áíd‚â°0 {toCRoute x·∂ú} {toCRoute y·∂ú} x‚âày

d·µ£·∂ú‚â°0‚áíx‚âày : ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí d·µ£·∂ú x·∂ú y·∂ú ‚â° 0 ‚Üí x ‚âà y
d·µ£·∂ú‚â°0‚áíx‚âày x·∂ú y·∂ú d‚â°0 = DVP.d‚â°0‚áíx‚âày {toCRoute x·∂ú} {toCRoute y·∂ú} d‚â°0

d·µ£·∂ú-maxTriIneq : ‚àÄ {x y z} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) (z·∂ú : ùë™ z) ‚Üí
                d·µ£·∂ú x·∂ú z·∂ú ‚â§ d·µ£·∂ú x·∂ú y·∂ú ‚äî d·µ£·∂ú y·∂ú z·∂ú
d·µ£·∂ú-maxTriIneq x·∂ú y·∂ú z·∂ú = DVP.d-maxTriIneq (toCRoute x·∂ú) (toCRoute y·∂ú) (toCRoute z·∂ú)

{-
d·µ£·∂ú-bounded : ‚àÉ Œª n ‚Üí ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí d·µ£·∂ú x·∂ú y·∂ú ‚â§ n
d·µ£·∂ú-bounded = _ , Œª x·∂ú y·∂ú ‚Üí d·∂ú‚â§H·∂ú (toCRoute x·∂ú) (toCRoute y·∂ú)
-}
d·µ£·∂ú<H·∂ú : ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí d·µ£·∂ú x·∂ú y·∂ú < H·∂ú
d·µ£·∂ú<H·∂ú x·∂ú y·∂ú = s‚â§s (DVP.d‚â§H (toCRoute x·∂ú) (toCRoute y·∂ú))

d·µ£·∂ú<H·∂ú+x : ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) z ‚Üí d·µ£·∂ú x·∂ú y·∂ú < H·∂ú + z
d·µ£·∂ú<H·∂ú+x x·∂ú y·∂ú z = <-transÀ° (d·µ£·∂ú<H·∂ú x·∂ú y·∂ú) (m‚â§m+n H·∂ú z)

H·∂ú<H·∂ú+d·µ£‚Å± : ‚àÄ x y ‚Üí H·∂ú < H·∂ú + d·µ£‚Å± x y
H·∂ú<H·∂ú+d·µ£‚Å± x y = begin
  1 + H·∂ú       ‚â°‚ü® +-comm 1 H·∂ú ‚ü©
  H·∂ú + 1       ‚â§‚ü® +-mono ≥-‚â§ H·∂ú (1‚â§d·µ£‚Å± x y) ‚ü©
  H·∂ú + d·µ£‚Å± x y ‚àé
  where open ‚â§-Reasoning

------------------------------------------------------------------------
-- Properties of d·µ£

d·µ£-cong : d·µ£ Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
d·µ£-cong {W} {X} {Y} {Z} W‚âàX Y‚âàZ with W ‚âü Y | X ‚âü Z
... | yes _   | yes _   = refl
... | yes W‚âàY | no  X‚ââZ = contradiction (‚âà-trans (‚âà-trans (‚âà-sym W‚âàX) W‚âàY) Y‚âàZ) X‚ââZ
... | no  W‚ââY | yes X‚âàZ = contradiction (‚âà-trans (‚âà-trans W‚âàX X‚âàZ) (‚âà-sym Y‚âàZ)) W‚ââY
... | no _    | no _    with ùë™? W | ùë™? X | ùë™? Y | ùë™? Z
...   | no  W‚Å± | yes X·∂ú | _      | _      = contradiction (ùë™-cong (‚âà-sym W‚âàX) X·∂ú) W‚Å±
...   | yes W·∂ú | no  X‚Å± | _      |  _     = contradiction (ùë™-cong W‚âàX W·∂ú) X‚Å±
...   | _      | _      | yes Y·∂ú | no  Z‚Å± = contradiction (ùë™-cong Y‚âàZ Y·∂ú) Z‚Å±
...   | _      | _      | no  Y‚Å± | yes Z·∂ú = contradiction (ùë™-cong (‚âà-sym Y‚âàZ) Z·∂ú) Y‚Å±
...   | no _   | no _   | _      | _      = cong (H·∂ú +_) (d·µ£‚Å±-cong W‚âàX Y‚âàZ)
...   | yes _  | yes _  | no  _  | no  _  = cong (H·∂ú +_) (d·µ£‚Å±-cong W‚âàX Y‚âàZ)
...   | yes w·∂ú | yes x·∂ú  | yes y·∂ú | yes z·∂ú = d·µ£·∂ú-cong w·∂ú y·∂ú x·∂ú z·∂ú W‚âàX Y‚âàZ

x‚âày‚áíd·µ£‚â°0 : ‚àÄ {X Y} ‚Üí X ‚âà Y ‚Üí d·µ£ X Y ‚â° 0
x‚âày‚áíd·µ£‚â°0 {X} {Y} X‚âàY with X ‚âü Y
... | yes _   = refl
... | no  X‚ââY = contradiction X‚âàY X‚ââY

d·µ£‚â°0‚áíx‚âày : ‚àÄ {X Y} ‚Üí d·µ£ X Y ‚â° 0 ‚Üí X ‚âà Y
d·µ£‚â°0‚áíx‚âày {X} {Y} d·µ£‚â°0 with X ‚âü Y
... | yes X‚âàY = X‚âàY
... | no  _   with ùë™? X | ùë™? Y
...   | yes X·∂ú | yes Y·∂ú  = d·µ£·∂ú‚â°0‚áíx‚âày X·∂ú Y·∂ú d·µ£‚â°0
...   | no  X‚Å± | _      = contradiction d·µ£‚â°0 Œª()
...   | yes X·∂ú | no  Y‚Å± = contradiction d·µ£‚â°0 Œª()

d·µ£-sym : ‚àÄ X Y ‚Üí d·µ£ X Y ‚â° d·µ£ Y X
d·µ£-sym X Y with X ‚âü Y | Y ‚âü X
... | yes _   | yes _   = refl
... | yes X‚âàY | no  Y‚ââX = contradiction (‚âà-sym X‚âàY) Y‚ââX
... | no  X‚ââY | yes Y‚âàX = contradiction (‚âà-sym Y‚âàX) X‚ââY
... | no _    | no _    with ùë™? X | ùë™? Y
...   | yes X·∂ú | yes Y·∂ú = d·µ£·∂ú-sym X·∂ú Y·∂ú
...   | no  _  | no  _  = cong (H·∂ú +_) (d·µ£‚Å±-sym X Y)
...   | no  _  | yes _  = cong (H·∂ú +_) (d·µ£‚Å±-sym X Y)
...   | yes _  | no  _  = cong (H·∂ú +_) (d·µ£‚Å±-sym X Y)

d·µ£-maxTriIneq-lemma : ‚àÄ X Y Z ‚Üí H·∂ú + d·µ£‚Å± X Z ‚â§ (H·∂ú + d·µ£‚Å± X Y) ‚äî (H·∂ú + d·µ£‚Å± Y Z)
d·µ£-maxTriIneq-lemma X Y Z = begin
  H·∂ú + d·µ£‚Å± X Z                    ‚â§‚ü® +-mono ≥-‚â§ H·∂ú (d·µ£‚Å±-maxTriIneq X Y Z) ‚ü©
  H·∂ú + (d·µ£‚Å± X Y ‚äî d·µ£‚Å± Y Z)        ‚â°‚ü® +-distribÀ°-‚äî H·∂ú _ _ ‚ü©
  (H·∂ú + d·µ£‚Å± X Y) ‚äî (H·∂ú + d·µ£‚Å± Y Z) ‚àé
  where open ‚â§-Reasoning

d·µ£-maxTriIneq : MaxTriangleIneq S d·µ£
d·µ£-maxTriIneq x y z with x ‚âü z | x ‚âü y | y ‚âü z
d·µ£-maxTriIneq x y z | yes _   | _       | _       = z‚â§n
d·µ£-maxTriIneq x y z | no  x‚ââz | yes x‚âày | yes y‚âàz = contradiction (‚âà-trans x‚âày y‚âàz) x‚ââz
d·µ£-maxTriIneq x y z | no  _   | yes x‚âày | no  _   with ùë™? x | ùë™? y | ùë™? z
... | yes x·∂ú | yes y·∂ú | yes z·∂ú = ‚â§-reflexive (d·µ£·∂ú-cong x·∂ú z·∂ú y·∂ú z·∂ú x‚âày ‚âà-refl)
... | yes x·∂ú | no  y‚Å± | _     = contradiction (ùë™-cong x‚âày x·∂ú) y‚Å±
... | no  x‚Å± | yes y·∂ú | _     = contradiction (ùë™-cong (‚âà-sym x‚âày) y·∂ú) x‚Å±
... | yes _  | yes _  | no  _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong x‚âày ‚âà-refl))
... | no  _  | no  _  | yes _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong x‚âày ‚âà-refl))
... | no  _  | no  _  | no  _ = +-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong x‚âày ‚âà-refl))
d·µ£-maxTriIneq x y z | no  _   | no  _   | yes y‚âàz with ùë™? x | ùë™? y | ùë™? z
... | yes x·∂ú | yes y·∂ú | yes z·∂ú = m‚â§n‚áím‚â§n‚äîo 0 (‚â§-reflexive (d·µ£·∂ú-cong x·∂ú z·∂ú x·∂ú y·∂ú ‚âà-refl (‚âà-sym y‚âàz)))
... | _      | yes y·∂ú | no  z‚Å± = contradiction (ùë™-cong y‚âàz y·∂ú) z‚Å±
... | _      | no  y‚Å± | yes z·∂ú = contradiction (ùë™-cong (‚âà-sym y‚âàz) z·∂ú) y‚Å±
... | no  _  | yes _  | yes _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong ‚âà-refl (‚âà-sym y‚âàz))))
... | yes _  | no  _  | no  _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong ‚âà-refl (‚âà-sym y‚âàz))))
... | no  _  | no  _  | no  _  = m‚â§n‚áím‚â§n‚äîo 0 (+-mono ≥-‚â§ H·∂ú (‚â§-reflexive (d·µ£‚Å±-cong ‚âà-refl (‚âà-sym y‚âàz))))
d·µ£-maxTriIneq x y z | no  _   | no  _   | no  _   with ùë™? x | ùë™? y | ùë™? z
... | yes x·∂ú | yes y·∂ú | yes z·∂ú = d·µ£·∂ú-maxTriIneq x·∂ú y·∂ú z·∂ú
... | yes x·∂ú | yes y·∂ú | no  z‚Å± = m‚â§o‚áím‚â§n‚äîo (d·µ£·∂ú x·∂ú y·∂ú) (+-mono ≥-‚â§ H·∂ú (x·∂úy·∂úz‚Å±‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±yz x·∂ú y·∂ú z‚Å±))
... | no  x‚Å± | yes y·∂ú | yes z·∂ú = m‚â§n‚áím‚â§n‚äîo (d·µ£·∂ú y·∂ú z·∂ú) (+-mono ≥-‚â§ H·∂ú (x‚Å±y·∂úz·∂ú‚áíd·µ£‚Å±xz‚â§d·µ£‚Å±xy x‚Å± y·∂ú z·∂ú))
... | yes x·∂ú | no  y‚Å± | yes z·∂ú = m‚â§n‚áím‚â§n‚äîo (H·∂ú + d·µ£‚Å± y z) (<‚áí‚â§ (d·µ£·∂ú<H·∂ú+x x·∂ú z·∂ú _))
... | yes _  | no  _  | no  _  = d·µ£-maxTriIneq-lemma x y z
... | no  _  | yes _  | no  _  = d·µ£-maxTriIneq-lemma x y z
... | no  _  | no  _  | yes _  = d·µ£-maxTriIneq-lemma x y z
... | no  _  | no  _  | no  _  = d·µ£-maxTriIneq-lemma x y z

d·µ£‚â§H·∂ú+H‚Å± : ‚àÄ x y ‚Üí d·µ£ x y ‚â§ H·∂ú + H‚Å±
d·µ£‚â§H·∂ú+H‚Å± x y with x ‚âü y
... | yes _ = z‚â§n
... | no  _ with ùë™? x | ùë™? y
...   | no  _  | no  _  = +-mono ≥-‚â§ H·∂ú (d·µ£‚Å±‚â§H‚Å± x y)
...   | no  _  | yes _  = +-mono ≥-‚â§ H·∂ú (d·µ£‚Å±‚â§H‚Å± x y)
...   | yes _  | no  _  = +-mono ≥-‚â§ H·∂ú (d·µ£‚Å±‚â§H‚Å± x y)
...   | yes x·∂ú | yes y·∂ú = ‚â§-trans (<‚áí‚â§ (d·µ£·∂ú<H·∂ú x·∂ú y·∂ú)) (m‚â§m+n H·∂ú H‚Å±)

d·µ£-bounded : Bounded S d·µ£
d·µ£-bounded = H·∂ú + H‚Å± , d·µ£‚â§H·∂ú+H‚Å±

d·µ£-isUltrametric : IsUltrametric S d·µ£
d·µ£-isUltrametric = record
  { cong        = d·µ£-cong
  ; eq‚áí0        = x‚âày‚áíd·µ£‚â°0
  ; 0‚áíeq        = d·µ£‚â°0‚áíx‚âày
  ; sym         = d·µ£-sym
  ; maxTriangle = d·µ£-maxTriIneq
  }

d·µ£-ultrametric : Ultrametric S
d·µ£-ultrametric = record
  { d             = d·µ£
  ; isUltrametric = d·µ£-isUltrametric
  }


H<d·µ£ : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí ùë∞ x ‚äé ùë∞ y ‚Üí H·∂ú < d·µ£ x y
H<d·µ£ {x} {y} x‚âây x‚Å±‚äéy‚Å± with x ‚âü y
... | yes x‚âày = contradiction x‚âày x‚âây
... | no  _   with ùë™? x | ùë™? y | x‚Å±‚äéy‚Å±
... | yes x·∂ú | yes y·∂ú | inj‚ÇÅ x‚Å± = contradiction x·∂ú x‚Å±
... | yes x·∂ú | yes y·∂ú | inj‚ÇÇ y‚Å± = contradiction y·∂ú y‚Å±
... | no  _  | _      | _       = H·∂ú<H·∂ú+d·µ£‚Å± x y
... | yes _  | no  _  | _       = H·∂ú<H·∂ú+d·µ£‚Å± x y

d·µ£·∂ú<d·µ£ : ‚àÄ {w x y z} (w·∂ú : ùë™ w) (x·∂ú : ùë™ x) ‚Üí y ‚ââ z ‚Üí ùë∞ y ‚äé ùë∞ z  ‚Üí d·µ£·∂ú w·∂ú x·∂ú < d·µ£ y z
d·µ£·∂ú<d·µ£ w·∂ú x·∂ú y‚ââz y‚Å±‚äéz‚Å± = <-trans ≥ (<‚áí‚â§ (d·µ£·∂ú<H·∂ú w·∂ú x·∂ú)) (H<d·µ£ y‚ââz y‚Å±‚äéz‚Å±)

d·µ£·∂ú‚â§d·µ£ : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí d·µ£·∂ú x·∂ú y·∂ú ‚â§ d·µ£ x y
d·µ£·∂ú‚â§d·µ£ {x} {y} x‚âây x·∂ú y·∂ú with x ‚âü y
... | yes x‚âày = contradiction x‚âày x‚âây
... | no  _ with ùë™? x | ùë™? y
...   | no  x‚Å±  | _      = contradiction x·∂ú x‚Å±
...   | yes _   | no  y‚Å± = contradiction y·∂ú y‚Å±
...   | yes x·∂ú' | yes y·∂ú' = begin
  DV.h (toCRoute x·∂ú) ‚äî DV.h (toCRoute y·∂ú) ‚â°‚ü® sym (DVP.dxy‚â°hx‚äîhy x‚âây) ‚ü©
  DV.d (toCRoute x·∂ú)  (toCRoute y·∂ú)       ‚â°‚ü® DVP.d-cong ‚âà-refl ‚âà-refl ‚ü©
  DV.d (toCRoute x·∂ú') (toCRoute y·∂ú')      ‚â§‚ü® ‚â§-refl ‚ü©
  d·µ£·∂ú _ _                                 ‚àé

d·µ£·∂ú‚â°d·µ£ : ‚àÄ {x y p q} (p·∂ú : ùë™ p) (q·∂ú : ùë™ q) ‚Üí x ‚âà p ‚Üí y ‚âà q ‚Üí x ‚ââ y ‚Üí d·µ£·∂ú p·∂ú q·∂ú ‚â° d·µ£ x y
d·µ£·∂ú‚â°d·µ£ {x} {y} {p} {q} p·∂ú q·∂ú x‚âàp y‚âàq x‚âây with x ‚âü y | ùë™? x | ùë™? y
... | yes x‚âày | _      | _      = contradiction x‚âày x‚âây
... | _       | no  x‚Å± | _      = contradiction (ùë™-cong (‚âà-sym x‚âàp) p·∂ú) x‚Å±
... | _       | _      | no  y‚Å± = contradiction (ùë™-cong (‚âà-sym y‚âàq) q·∂ú) y‚Å±
... | no _    | yes x·∂ú | yes y·∂ú = d·µ£·∂ú-cong p·∂ú q·∂ú x·∂ú y·∂ú (‚âà-sym x‚âàp) (‚âà-sym y‚âàq)

H+d·µ£‚Å±‚â°d·µ£ : ‚àÄ {x y} {w z} ‚Üí w ‚âà x ‚Üí z ‚âà y ‚Üí x ‚ââ y ‚Üí ùë∞ x ‚äé ùë∞ y ‚Üí H·∂ú + d·µ£‚Å± w z ‚â° d·µ£ x y
H+d·µ£‚Å±‚â°d·µ£ {x} {y} w‚âàx z‚âày x‚âây x‚Å±‚äéy‚Å± with x ‚âü y
... | yes x‚âày = contradiction x‚âày x‚âây
... | no  _   with ùë™? x | ùë™? y | x‚Å±‚äéy‚Å±
...   | yes x·∂ú | yes y·∂ú | inj‚ÇÅ x‚Å± = contradiction x·∂ú x‚Å±
...   | yes x·∂ú | yes y·∂ú | inj‚ÇÇ y‚Å± = contradiction y·∂ú y‚Å±
...   | no  _  | _      | _       = cong (H·∂ú +_) (d·µ£‚Å±-cong w‚âàx z‚âày)
...   | yes _  | no  _  | _       = cong (H·∂ú +_) (d·µ£‚Å±-cong w‚âàx z‚âày)

d·µ£-force-d·µ£‚Å± : ‚àÄ (X Y : RoutingMatrix) {r s} ‚Üí
              (‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ H·∂ú + d·µ£‚Å± (X r s) (Y r s)) ‚Üí
              (‚àÄ {u v} ‚Üí X u v ‚ââ Y u v ‚Üí ùë∞ (X u v) ‚äé ùë∞ (Y u v) ‚Üí
               d·µ£‚Å± (X u v) (Y u v) ‚â§ d·µ£‚Å± (X r s) (Y r s))
d·µ£-force-d·µ£‚Å± X Y {r} {s} d·µ£‚â§H·∂ú+d·µ£‚Å±X‚ÇóY‚Çó {u} {v} X·µ§·µ•‚ââY·µ§·µ• X·µ§·µ•‚Å±‚äéY·µ§·µ•‚Å± =
  +-cancelÀ°-‚â§ H·∂ú (‚â§-trans (‚â§-reflexive (H+d·µ£‚Å±‚â°d·µ£ ‚âà-refl ‚âà-refl X·µ§·µ•‚ââY·µ§·µ• X·µ§·µ•‚Å±‚äéY·µ§·µ•‚Å±)) (d·µ£‚â§H·∂ú+d·µ£‚Å±X‚ÇóY‚Çó u v))

------------------------------------------------------------------------
-- Properties of d‚Çú

private module MaxLift‚Çú = MaxLift ‚Ñùùïã‚Çõ‚Å± (Œª _ ‚Üí d·µ£)

d‚Çú-isUltrametric : IsUltrametric _ d‚Çú
d‚Çú-isUltrametric = MaxLift‚Çú.isUltrametric d·µ£-isUltrametric

open IsUltrametric d‚Çú-isUltrametric public
  using ()
  renaming
  ( cong to d‚Çú-cong
  ; sym  to d‚Çú-sym
  ; eq‚áí0 to x‚âày‚áíd‚Çú‚â°0
  ; 0‚áíeq to d‚Çú‚â°0‚áíx‚âày
  )

d‚Çú-bounded : Bounded ‚Ñùùïã‚Çõ d‚Çú
d‚Çú-bounded = MaxLift‚Çú.bounded d·µ£-bounded

d‚â§d‚Çú : ‚àÄ x y i ‚Üí d·µ£ (x i) (y i) ‚â§ d‚Çú x y
d‚â§d‚Çú = MaxLift‚Çú.d·µ¢‚â§d

------------------------------------------------------------------------
-- Properties of D

private module MaxLift‚Çò = MaxLift ‚ÑùùïÑ‚Çõ‚Å± (Œª _ ‚Üí d‚Çú)

D-isUltrametric : IsUltrametric _ D
D-isUltrametric = MaxLift‚Çò.isUltrametric d‚Çú-isUltrametric

D-bounded : Bounded ‚ÑùùïÑ‚Çõ D
D-bounded = MaxLift‚Çò.bounded d‚Çú-bounded

open IsUltrametric D-isUltrametric public using ()
  renaming
  ( cong to D-cong
  ; 0‚áíeq to D‚â°0‚áíX‚âàY
  ; eq‚áí0 to X‚âàY‚áíD‚â°0
  ; sym to D-sym
  )

D<v : ‚àÄ {X Y v} ‚Üí 0 < v ‚Üí (‚àÄ i j ‚Üí d·µ£ (X i j) (Y i j) < v) ‚Üí D X Y < v
D<v 0<v dXY<v = max[t]<x 0<v (Œª i ‚Üí max[t]<x 0<v (Œª j ‚Üí dXY<v i j))

v<D : ‚àÄ {X Y v} ‚Üí (‚àÉ‚ÇÇ Œª i j ‚Üí v < d·µ£ (X i j) (Y i j)) ‚Üí v < D X Y
v<D (i , j , v<dXY) = x<max[t] 0 (inj‚ÇÇ (i , x<max[t] 0 (inj‚ÇÇ (j , v<dXY))))

Y‚ââX‚áí0<DXY : ‚àÄ {X Y} ‚Üí Y ‚ââ‚Çò X ‚Üí 0 < D X Y
Y‚ââX‚áí0<DXY Y‚ââX = n‚â¢0‚áí0<n (Y‚ââX ‚àò ‚âà‚Çò-sym ‚àò D‚â°0‚áíX‚âàY)

postulate d·µ£‚â§D : ‚àÄ X Y i j ‚Üí d·µ£ (X i j) (Y i j) ‚â§ D X Y

postulate DX·∂úY·∂ú‚â°D·∂úXY : ‚àÄ {X Y} (X·∂ú : ùë™‚Çò X) (Y·∂ú : ùë™‚Çò Y) ‚Üí D X Y ‚â° DV.D (toCMatrix X·∂ú) (toCMatrix Y·∂ú)
-- DX·∂úY·∂ú‚â°D·∂úXY {X} {Y} X·∂ú Y·∂ú = {!!}
