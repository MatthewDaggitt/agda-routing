open import Data.Product using (‚àÉ; _,_; _√ó_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_]‚Ä≤)
open import Data.Nat using (‚Ñï; zero; suc; z‚â§n; s‚â§s; _<_; _‚â§_; _‚äî_)
open import Data.Nat.Properties
  using (‚â§-reflexive; ‚â§-total; ‚äî-comm; ‚äî-identity ≥; m‚â§m‚äîn)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_; id)

open import RoutingLib.Data.Nat.Properties
  using (‚äî-monoÀ°-‚â§; ‚äî-triangulate; m‚â§o‚áím‚â§n‚äîo; m<n‚áín‚â¢0; n‚â§m√óo‚â§m‚áín‚äîo‚â§m; n‚â§m‚áím‚äîn‚â°m;
        module ‚â§-Reasoning; ‚â§‚áí‚âØ)
import RoutingLib.Function.Distance as Distance 

open import RoutingLib.Routing.Definitions
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
import RoutingLib.Routing.BellmanFord.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.Step1_InconsistentHeightFunction as Step1

module RoutingLib.Routing.BellmanFord.PathVector.Step2_InconsistentRouteMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
  open Step1 ùìüùì¢ùìí using
    ( h‚Å± ; H‚Å± ; h‚Å±-cong ; 1‚â§h‚Å±; h‚Å±‚â§H‚Å± ; h‚Å±-decr ; h[s·∂ú]<h[r‚Å±] )
 
  open Distance S using (Ultrametric; IsUltrametric; MaxTriangleIneq; Bounded)

  private

    h-force-ùë∞ : ‚àÄ {x y} ‚Üí h‚Å± x ‚â§ h‚Å± y ‚Üí ùë∞ x ‚Üí ùë∞ y
    h-force-ùë∞ hx‚â§hy x‚Å± y·∂ú = contradiction (h[s·∂ú]<h[r‚Å±] y·∂ú x‚Å±) (‚â§‚áí‚âØ hx‚â§hy)
  
  abstract
  
    d·µ£‚Å± : Route ‚Üí Route ‚Üí ‚Ñï
    d·µ£‚Å± x y with x ‚âü y
    ... | yes _ = 0
    ... | no  _ = h‚Å± x ‚äî h‚Å± y

    d·µ£‚Å±-cong : d·µ£‚Å± Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
    d·µ£‚Å±-cong {x} {y} {u} {v} x‚âày u‚âàv with x ‚âü u | y ‚âü v
    ... | yes _   | yes _   = refl
    ... | yes x‚âàu | no  y‚ââv = contradiction (‚âà-trans (‚âà-trans (‚âà-sym x‚âày) x‚âàu) u‚âàv) y‚ââv
    ... | no  x‚ââu | yes y‚âàv = contradiction (‚âà-trans (‚âà-trans x‚âày y‚âàv) (‚âà-sym u‚âàv)) x‚ââu
    ... | no  _   | no  _   = cong‚ÇÇ _‚äî_ (h‚Å±-cong x‚âày) (h‚Å±-cong u‚âàv)
  
    d·µ£‚Å±-sym : ‚àÄ x y ‚Üí d·µ£‚Å± x y ‚â° d·µ£‚Å± y x
    d·µ£‚Å±-sym x y with x ‚âü y | y ‚âü x
    ... | yes _   | yes _ = refl
    ... | yes x‚âày | no  y‚ââx = contradiction (‚âà-sym x‚âày) y‚ââx
    ... | no  x‚âây | yes y‚âàx = contradiction (‚âà-sym y‚âàx) x‚âây
    ... | no  _   | no  _   = ‚äî-comm (h‚Å± x) (h‚Å± y)

    d·µ£‚Å±‚â°0‚áíx‚âày : ‚àÄ {x y} ‚Üí d·µ£‚Å± x y ‚â° 0 ‚Üí x ‚âà y
    d·µ£‚Å±‚â°0‚áíx‚âày {x} {y} d·µ£‚Å±‚â°0 with x ‚âü y
    ... | yes x‚âày = x‚âày
    ... | no  x‚âây = contradiction d·µ£‚Å±‚â°0 (m<n‚áín‚â¢0 (m‚â§o‚áím‚â§n‚äîo (h‚Å± x) (1‚â§h‚Å± y)))
  
    x‚âày‚áíd·µ£‚Å±‚â°0 : ‚àÄ {x y} ‚Üí x ‚âà y ‚Üí d·µ£‚Å± x y ‚â° 0
    x‚âày‚áíd·µ£‚Å±‚â°0 {x} {y} x‚âày with x ‚âü y
    ... | yes _   = refl
    ... | no  x‚âây = contradiction x‚âày x‚âây
  
    d·µ£‚Å±-maxTriIneq : MaxTriangleIneq d·µ£‚Å±
    d·µ£‚Å±-maxTriIneq x y z with x ‚âü z | x ‚âü y | y ‚âü z
    ... | yes _   | _       | _       = z‚â§n
    ... | no  x‚ââz | yes x‚âày | yes y‚âàz = contradiction (‚âà-trans x‚âày y‚âàz) x‚ââz
    ... | no  _   | yes x‚âày | no  _   = ‚â§-reflexive (cong (_‚äî h‚Å± z) (h‚Å±-cong x‚âày))
    ... | no  _   | no  _   | yes y‚âàz = ‚â§-reflexive (trans (cong (h‚Å± x ‚äî_) (sym (h‚Å±-cong y‚âàz))) (sym (‚äî-identity ≥ _)))
    ... | no  _   | no  _   | no  _   = begin
      h‚Å± x ‚äî h‚Å± z                   ‚â§‚ü® ‚äî-monoÀ°-‚â§ (h‚Å± z) (m‚â§m‚äîn (h‚Å± x) (h‚Å± y)) ‚ü©
      h‚Å± x ‚äî h‚Å± y ‚äî h‚Å± z            ‚â°‚ü® ‚äî-triangulate (h‚Å± x) (h‚Å± y) (h‚Å± z) ‚ü©
      (h‚Å± x ‚äî h‚Å± y) ‚äî (h‚Å± y ‚äî h‚Å± z) ‚àé
      where open ‚â§-Reasoning
  
    d·µ£‚Å±-isUltrametric : IsUltrametric d·µ£‚Å±
    d·µ£‚Å±-isUltrametric = record
      { cong        = d·µ£‚Å±-cong
      ; eq‚áí0        = x‚âày‚áíd·µ£‚Å±‚â°0
      ; 0‚áíeq        = d·µ£‚Å±‚â°0‚áíx‚âày
      ; sym         = d·µ£‚Å±-sym
      ; maxTriangle = d·µ£‚Å±-maxTriIneq
      }

    d·µ£‚Å±‚â§H‚Å± : ‚àÄ x y ‚Üí d·µ£‚Å± x y ‚â§ H‚Å±
    d·µ£‚Å±‚â§H‚Å± x y with x ‚âü y
    ... | yes _ = z‚â§n
    ... | no  _ = n‚â§m√óo‚â§m‚áín‚äîo‚â§m (h‚Å±‚â§H‚Å± x) (h‚Å±‚â§H‚Å± y)
  
    d·µ£‚Å±-bounded : Bounded d·µ£‚Å±
    d·µ£‚Å±-bounded = H‚Å± , d·µ£‚Å±‚â§H‚Å±






    d·µ£‚Å±-strContr-lemma : ‚àÄ {i j k l x y} ‚Üí ùë∞ (A i j ‚ñ∑ x) ‚Üí
                         h‚Å± (A k l ‚ñ∑ y) ‚â§ h‚Å± (A i j ‚ñ∑ x) ‚Üí
                         h‚Å± (A i j ‚ñ∑ x) ‚äî h‚Å± (A k l ‚ñ∑ y) < h‚Å± x ‚äî h‚Å± y
    d·µ£‚Å±-strContr-lemma {i} {j} {k} {l} {x} {y} Ax‚Å± hAy‚â§hAx = begin
      h‚Å± (A i j ‚ñ∑ x) ‚äî h‚Å± (A k l ‚ñ∑ y)  ‚â°‚ü® n‚â§m‚áím‚äîn‚â°m hAy‚â§hAx ‚ü©
      h‚Å± (A i j ‚ñ∑ x)                   <‚ü® h‚Å±-decr Ax‚Å± ‚ü©
      h‚Å± x                             ‚â§‚ü® m‚â§m‚äîn (h‚Å± x) (h‚Å± y) ‚ü©
      h‚Å± x       ‚äî h‚Å± y                ‚àé
      where open ‚â§-Reasoning

    d·µ£‚Å±-strContr : ‚àÄ {i j k l x y} ‚Üí x ‚ââ y ‚Üí ùë∞ (A i j ‚ñ∑ x) ‚äé ùë∞ (A k l ‚ñ∑ y) ‚Üí
                   d·µ£‚Å± (A i j ‚ñ∑ x) (A k l ‚ñ∑ y) < d·µ£‚Å± x y
    d·µ£‚Å±-strContr {i} {j} {k} {l} {x} {y} x‚âây Ax‚Å±‚äéAy‚Å± with x ‚âü y | A i j ‚ñ∑ x ‚âü A k l ‚ñ∑ y
    ... | yes x‚âày | _     = contradiction x‚âày x‚âây
    ... | no  _   | yes _ = m‚â§o‚áím‚â§n‚äîo (h‚Å± x) (1‚â§h‚Å± y)
    ... | no  _   | no  _ with ‚â§-total (h‚Å± (A i j ‚ñ∑ x)) (h‚Å± (A k l ‚ñ∑ y))
    ...   | inj‚ÇÇ hAy‚â§hAx = d·µ£‚Å±-strContr-lemma ([ id , h-force-ùë∞ hAy‚â§hAx ]‚Ä≤ Ax‚Å±‚äéAy‚Å±) hAy‚â§hAx
    ...   | inj‚ÇÅ hAx‚â§hAy = begin
      h‚Å± (A i j ‚ñ∑ x) ‚äî h‚Å± (A k l ‚ñ∑ y) ‚â°‚ü® ‚äî-comm (h‚Å± (A i j ‚ñ∑ x)) (h‚Å± (A k l ‚ñ∑ y)) ‚ü©
      h‚Å± (A k l ‚ñ∑ y) ‚äî h‚Å± (A i j ‚ñ∑ x) <‚ü® d·µ£‚Å±-strContr-lemma ([ h-force-ùë∞ hAx‚â§hAy , id ]‚Ä≤ Ax‚Å±‚äéAy‚Å±) hAx‚â§hAy ‚ü©
      h‚Å± y       ‚äî h‚Å± x               ‚â°‚ü® ‚äî-comm (h‚Å± y) (h‚Å± x) ‚ü©
      h‚Å± x       ‚äî h‚Å± y               ‚àé
      where open ‚â§-Reasoning





{-
    d·µ£‚Å±-strContr2-lem : ‚àÄ {i j r s} {X Y : RMatrix} ‚Üí ùë∞ (œÉ X i j) ‚Üí
                        h‚Å± (œÉ Y i j) ‚â§ h‚Å± (œÉ X i j) ‚Üí
                        (‚àÄ k l ‚Üí h‚Å± (X k l) ‚äî h‚Å± (Y k l) ‚â§ h‚Å± (X r s) ‚äî h‚Å± (Y r s)) ‚Üí
                        h‚Å± (œÉ X i j) ‚äî h‚Å± (œÉ Y i j) < h‚Å± (X r s) ‚äî h‚Å± (Y r s)
    d·µ£‚Å±-strContr2-lem {i} {j} {r} {s} {X} {Y} œÉX·µ¢‚±º‚Å± hœÉY·µ¢‚±º‚â§hœÉX·µ¢‚±º less
      with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º X i j
    ... | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º          = contradiction (ùë™-cong (‚âà-sym œÉX·µ¢‚±º‚âàI·µ¢‚±º) (I·∂ú i j)) œÉX·µ¢‚±º‚Å±
    ... | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º) = begin
      h‚Å± (œÉ X i j) ‚äî h‚Å± (œÉ Y i j) ‚â°‚ü® n‚â§m‚áím‚äîn‚â°m hœÉY·µ¢‚±º‚â§hœÉX·µ¢‚±º ‚ü©
      h‚Å± (œÉ X i j)                ‚â°‚ü® h‚Å±-cong œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º ‚ü©
      h‚Å± (A i k ‚ñ∑ X k j)          <‚ü® h‚Å±-decr (ùë∞-cong œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º œÉX·µ¢‚±º‚Å±) ‚ü©
      h‚Å± (X k j)                  ‚â§‚ü® m‚â§m‚äîn (h‚Å± (X k j)) (h‚Å± (Y k j)) ‚ü©
      h‚Å± (X k j) ‚äî h‚Å± (Y k j)     ‚â§‚ü® less k j ‚ü©
      h‚Å± (X r s) ‚äî h‚Å± (Y r s)     ‚àé
      where open ‚â§-Reasoning

    d·µ£‚Å±-strContr2 : ‚àÄ {i j r s X Y} ‚Üí X r s ‚ââ Y r s ‚Üí œÉ X i j ‚ââ œÉ Y i j ‚Üí
                   ùë∞ (œÉ X i j) ‚äé ùë∞ (œÉ Y i j) ‚Üí
                   (‚àÄ k l ‚Üí d·µ£‚Å± (X k l) (Y k l) < d·µ£‚Å± (X r s) (Y r s)) ‚Üí 
                   d·µ£‚Å± (œÉ X i j) (œÉ Y i j) < d·µ£‚Å± (X r s) (Y r s)
    d·µ£‚Å±-strContr2 {i} {j} {r} {s} {X} {Y} X·µ£‚Çõ‚ââY·µ£‚Çõ œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º œÉX·µ¢‚±º‚Å±‚äéœÉY·µ¢‚±º‚Å± less
      with X r s ‚âü Y r s | œÉ X i j ‚âü œÉ Y i j
    ... | yes X·µ£‚Çõ‚âàY·µ£‚Çõ | _            = contradiction X·µ£‚Çõ‚âàY·µ£‚Çõ X·µ£‚Çõ‚ââY·µ£‚Çõ
    ... | _          | yes œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º = contradiction œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º
    ... | no  _      | no  _
        with œÉX·µ¢‚±º‚Å±‚äéœÉY·µ¢‚±º‚Å± | ‚â§-total (h‚Å± (œÉ X i j)) (h‚Å± (œÉ Y i j))
    ...   | inj‚ÇÅ œÉX·µ¢‚±º‚Å± | inj‚ÇÅ œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º = {!!}
    ...   | inj‚ÇÅ œÉX·µ¢‚±º‚Å± | inj‚ÇÇ œÉY·µ¢‚±º‚â§œÉX·µ¢‚±º = d·µ£‚Å±-strContr2-lem œÉX·µ¢‚±º‚Å± œÉY·µ¢‚±º‚â§œÉX·µ¢‚±º {!!}
    ...   | inj‚ÇÇ œÉY·µ¢‚±º‚Å± | inj‚ÇÅ œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º = {!!}
    ...   | inj‚ÇÇ œÉY·µ¢‚±º‚Å± | inj‚ÇÇ œÉY·µ¢‚±º‚â§œÉX·µ¢‚±º = {!!}
 -}




  d·µ£‚Å±-ultrametric : Ultrametric
  d·µ£‚Å±-ultrametric = record
    { d             = d·µ£‚Å±
    ; isUltrametric = d·µ£‚Å±-isUltrametric
    }

  
