open import Data.Fin using (Fin; zero)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Nat using (‚Ñï; suc; zero; z‚â§n; s‚â§s; _‚â§_; _<_)
open import Data.Product using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Function using (_‚àò_)
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; sym; trans; cong; subst)

open import RoutingLib.Data.Matrix using (SquareMatrix)
open import RoutingLib.Data.Table using (Table; max; zipWith)
open import RoutingLib.Data.Table.Properties using (max[t]<x)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
open import RoutingLib.Data.Nat.Properties using (‚Ñï‚Çõ; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Function.Metric using (Ultrametric; IsUltrametric; Bounded)
import RoutingLib.Function.Metric.MaxLift as MaxLift

open import RoutingLib.Routing.Algebra
import RoutingLib.Routing.BellmanFord.AsyncConvergence.DistanceVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.AsyncConvergence.DistanceVector.Step2_RouteMetric as Step2
open FiniteStrictlyIncreasingRoutingAlgebra using (Step)

module RoutingLib.Routing.BellmanFord.AsyncConvergence.DistanceVector.Step3_StateMetric
  {a b ‚Ñì n} (algebra : FiniteStrictlyIncreasingRoutingAlgebra a b ‚Ñì)
  (A : SquareMatrix (Step algebra) n)
  where
  
open Prelude algebra A
open Step2 algebra A using
  ( d
  ; x‚âày‚áíd‚â°0
  ; d‚â°0‚áíx‚âày
  ; d-isUltrametric
  ; d-bounded
  ; d-strContr
  )

open import RoutingLib.Function.Metric ‚ÑùùïÑ‚Çõ
  using (_StrContrOver_; _StrContrOnOrbitsOver_; _StrContrOnFixedPointOver_)

-------------------------------------
-- Ultrametric over routing tables --
-------------------------------------

d‚Çú : RTable ‚Üí RTable ‚Üí ‚Ñï
d‚Çú x y = max 0 (zipWith d x y)

d‚Çú-isUltrametric : IsUltrametric _ d‚Çú
d‚Çú-isUltrametric = MaxLift.isUltrametric {n = n} _ d-isUltrametric

d‚Çú-bounded : Bounded ‚Ñùùïã‚Çõ d‚Çú
d‚Çú-bounded = MaxLift.bounded ‚Ñùùïã‚Çõ‚Å± d-bounded

-------------------------------------
-- Ultrametric over routing states --
-------------------------------------

D : RMatrix ‚Üí RMatrix ‚Üí ‚Ñï
D X Y = max 0 (zipWith d‚Çú X Y)

D-isUltrametric : IsUltrametric _ D
D-isUltrametric = MaxLift.isUltrametric {n = n} _ d‚Çú-isUltrametric

D-bounded : Bounded ‚ÑùùïÑ‚Çõ D
D-bounded = MaxLift.bounded ‚ÑùùïÑ‚Çõ‚Å± d‚Çú-bounded

open IsUltrametric D-isUltrametric public using ()
  renaming
  ( 0‚áíeq to D‚â°0‚áíX‚âàY
  ; eq‚áí0 to X‚âàY‚áíD‚â°0
  ; cong to D-cong
  )

œÉ-strContr : œÉ StrContrOver D
œÉ-strContr {X} {Y} Y‚ââX with max[t]‚ààt 0 (Œª i ‚Üí d‚Çú (X i) (Y i))
... | inj‚ÇÅ dXY‚â°0            = contradiction (D‚â°0‚áíX‚âàY dXY‚â°0) (Y‚ââX ‚àò ‚âà‚Çò-sym)
... | inj‚ÇÇ (r , DXY‚â°d‚ÇúX·µ£Y·µ£) with max[t]‚ààt 0 (Œª i ‚Üí d (X r i) (Y r i))
...   | inj‚ÇÅ dX·µ£Y·µ£‚â°0              = contradiction (D‚â°0‚áíX‚âàY (trans DXY‚â°d‚ÇúX·µ£Y·µ£ dX·µ£Y·µ£‚â°0)) (Y‚ââX ‚àò ‚âà‚Çò-sym)
...   | inj‚ÇÇ (s , dX·µ£Y·µ£‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ) = begin
  D  (œÉ X)   (œÉ Y)   <‚ü® DœÉXœÉY<dX·µ£‚ÇõY·µ£‚Çõ ‚ü©
  d (X r s) (Y r s)  ‚â°‚ü® sym DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ ‚ü©
  D  X       Y       ‚àé
  where
  open ‚â§-Reasoning

  DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ : D X Y ‚â° d (X r s) (Y r s)
  DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ = trans DXY‚â°d‚ÇúX·µ£Y·µ£ dX·µ£Y·µ£‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ

  X·µ£‚Çõ‚ââY·µ£‚Çõ : X r s ‚ââ Y r s
  X·µ£‚Çõ‚ââY·µ£‚Çõ X·µ£‚Çõ‚âàY·µ£‚Çõ = Y‚ââX (‚âà‚Çò-sym (D‚â°0‚áíX‚âàY (trans DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ (x‚âày‚áíd‚â°0 X·µ£‚Çõ‚âàY·µ£‚Çõ))))

  d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ : ‚àÄ u v ‚Üí X u v ‚ââ Y u v ‚Üí d (X u v) (Y u v) ‚â§ d (X r s) (Y r s)
  d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ u v _ = begin
    d (X u v) (Y u v) ‚â§‚ü® MaxLift.d·µ¢‚â§d ‚Ñùùïã‚Çõ‚Å± d (X u) (Y u) v ‚ü©
    d‚Çú (X u)   (Y u)  ‚â§‚ü® MaxLift.d·µ¢‚â§d ‚ÑùùïÑ‚Çõ‚Å± d‚Çú X (Y) u ‚ü©
    D X (Y)           ‚â°‚ü® DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ ‚ü©
    d (X r s) (Y r s) ‚àé

  0<d·µ£X·µ£‚ÇõY·µ£‚Çõ : 0 < d (X r s) (Y r s)
  0<d·µ£X·µ£‚ÇõY·µ£‚Çõ = n‚â¢0‚áí0<n (X·µ£‚Çõ‚ââY·µ£‚Çõ ‚àò d‚â°0‚áíx‚âày)

  DœÉXœÉY<dX·µ£‚ÇõY·µ£‚Çõ : D (œÉ X) (œÉ Y) < d (X r s) (Y r s)
  DœÉXœÉY<dX·µ£‚ÇõY·µ£‚Çõ = max[t]<x {t = zipWith d‚Çú (œÉ X) (œÉ Y)}
           (Œª i ‚Üí max[t]<x {t = zipWith d (œÉ X i) (œÉ Y i)}
             (Œª j ‚Üí d-strContr X·µ£‚Çõ‚ââY·µ£‚Çõ d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ i j)
             0<d·µ£X·µ£‚ÇõY·µ£‚Çõ)
           0<d·µ£X·µ£‚ÇõY·µ£‚Çõ

œÉ-strContrOnFP : œÉ StrContrOnFixedPointOver D
œÉ-strContrOnFP {X} {X*} œÉX*‚âàX* X‚ââX* = begin
  D X*     (œÉ X) ‚â°‚ü® D-cong (‚âà‚Çò-sym œÉX*‚âàX*) (‚âà‚Çò-refl {x = œÉ X}) ‚ü©
  D (œÉ X*) (œÉ X) <‚ü® œÉ-strContr X‚ââX* ‚ü©
  D X*     X     ‚àé
  where open ‚â§-Reasoning
