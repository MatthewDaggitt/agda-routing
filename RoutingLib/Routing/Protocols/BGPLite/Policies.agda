--------------------------------------------------------------------------------
-- Agda routing library
--
-- A simple conditional policy language inspired by that of BGP. Policy
-- decisions can depend on any part of the path-weight, and hence decisions can
-- be made on its level, its communities and the path along which it was
-- generated.
--------------------------------------------------------------------------------

module RoutingLib.Routing.Protocols.BGPLite.Policies where

open import Data.Bool as ùîπ using (Bool; true; false; _‚àß_; _‚à®_; if_then_else_)
open import Data.Fin.Base using (to‚Ñï)
open import Data.Nat using (‚Ñï; _‚âü_; _+_; _<·µá_; _‚â§·µá_; _‚à∏_; _‚â§_; zero; suc; s‚â§s)
open import Data.Nat.Properties
open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; _√ó_; _,_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Function using (_‚àò_)
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Relation.Nullary.Negation using (contradiction)

open import RoutingLib.Routing.Basics.Path.Uncertified as Path
  using (Path; []; _‚à∑_; length; deflate)
open import RoutingLib.Routing.Basics.Path.Uncertified.Properties

open import RoutingLib.Routing.Protocols.BGPLite.LocalPref
open import RoutingLib.Routing.Protocols.BGPLite.PathWeights
open import RoutingLib.Routing.Protocols.BGPLite.Communities

--------------------------------------------------------------------------------
-- A language for writing conditional expressions

data Condition : Set where
  _and_     : Condition ‚Üí Condition ‚Üí Condition
  _or_      : Condition ‚Üí Condition ‚Üí Condition
  not       : Condition ‚Üí Condition
  inPath    : (i : ‚Ñï)         ‚Üí Condition
  inComm    : (c : Community) ‚Üí Condition
  hasPref   : (l : LocalPref) ‚Üí Condition

evaluate : Condition ‚Üí PathWeight ‚Üí Bool
evaluate (s and t)   r              = evaluate s r ‚àß evaluate t r
evaluate (s or t)    r              = evaluate s r ‚à® evaluate t r
evaluate (not s)     r              = ùîπ.not (evaluate s r)
evaluate (inComm  c) (valid l cs p) = c ‚àà? cs
evaluate (hasPref k) (valid l cs p) = ‚åä k ‚âüÀ°·µñ l ‚åã
evaluate (inPath  i) (valid l cs p) = ‚åä i ‚àà‚Çö? p ‚åã
evaluate (inComm  c) invalid        = false
evaluate (hasPref k) invalid        = false
evaluate (inPath  i) invalid        = false

--------------------------------------------------------------------------------
-- A language for writing policies

data Policy : Set‚ÇÅ where
  reject     : Policy
  decrPrefBy : ‚Ñï ‚Üí Policy
  addComm    : (c : Community) ‚Üí Policy
  delComm    : (c : Community) ‚Üí Policy
  inflate    : ‚Ñï ‚Üí Policy
  if_then_   : Condition ‚Üí Policy ‚Üí Policy
  _‚çÆ_       : Policy ‚Üí Policy ‚Üí Policy
  -- Note not a standard `;`. Use \; (7) instead

apply : Policy ‚Üí PathWeight ‚Üí PathWeight
apply _                   invalid        = invalid
apply (decrPrefBy x)      (valid l cs p) = valid (l - x) cs p
apply (addComm c)         (valid l cs p) = valid l (add c cs) p
apply (delComm c)         (valid l cs p) = valid l (remove c cs) p
apply (inflate n)         (valid l cs p) = valid l cs (Path.inflate p n)
apply reject              r              = invalid
apply (pol‚ÇÇ ‚çÆ pol‚ÇÅ) r                    = apply pol‚ÇÅ (apply pol‚ÇÇ r )
apply (if p then pol)     r              = if (evaluate p r) then (apply pol r) else r

apply-result : ‚àÄ pol l cs p ‚Üí apply pol (valid l cs p) ‚â° invalid ‚äé
             ‚àÉ‚ÇÇ Œª k ds ‚Üí ‚àÉ Œª i ‚Üí l ‚â•À°·µñ k √ó apply pol (valid l cs p) ‚â° valid k ds (Path.inflate p i)
apply-result reject             l cs p = inj‚ÇÅ refl
apply-result (decrPrefBy x)     l cs p = inj‚ÇÇ (l - x , cs , 0 , l-x‚â§l l x , refl)
apply-result (inflate n)        l cs p = inj‚ÇÇ (l     , cs          , n , ‚â§-refl    , refl)
apply-result (addComm c)        l cs p = inj‚ÇÇ (l     , add    c cs , 0 , ‚â§-refl    , refl)
apply-result (delComm c)        l cs p = inj‚ÇÇ (l     , remove c cs , 0 , ‚â§-refl    , refl)
apply-result (if c then pol)    l cs p with evaluate c (valid l cs p)
... | true  = apply-result pol l cs p
... | false = inj‚ÇÇ (l , cs , 0 , ‚â§-refl , refl)
apply-result (pol‚ÇÅ ‚çÆ pol‚ÇÇ) l cs p with apply-result pol‚ÇÅ l cs p
... | inj‚ÇÅ eq‚ÇÅ rewrite eq‚ÇÅ         = inj‚ÇÅ refl
... | inj‚ÇÇ (k , ds , i , l‚â§k , eq‚ÇÅ) with apply-result pol‚ÇÇ k ds (Path.inflate p i)
...   | inj‚ÇÅ eq‚ÇÇ = inj‚ÇÅ (trans (cong (apply pol‚ÇÇ) eq‚ÇÅ) eq‚ÇÇ)
...   | inj‚ÇÇ (m , es , j , k‚â§m , eq‚ÇÇ) = inj‚ÇÇ (m , es , i + j , ‚â§-trans k‚â§m l‚â§k , (begin
  apply pol‚ÇÇ (apply pol‚ÇÅ (valid l cs p))         ‚â°‚ü® cong (apply pol‚ÇÇ) eq‚ÇÅ ‚ü©
  apply pol‚ÇÇ (valid k ds (Path.inflate p i))     ‚â°‚ü® eq‚ÇÇ ‚ü©
  valid m es (Path.inflate (Path.inflate p i) j) ‚â°‚ü® cong (valid m es) (inflate-inflate p i j) ‚ü©
  valid m es (Path.inflate p (i + j))            ‚àé))
  where open ‚â°-Reasoning
