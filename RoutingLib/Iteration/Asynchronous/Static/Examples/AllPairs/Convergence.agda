open import Data.Fin using (Fin) renaming (_‚â§_ to _‚â§F_)
open import Data.List using (List; []; _‚à∑_; length; filter)
open import Data.List.All using (All) renaming ([] to [A]; _‚à∑_ to _‚à∑A_; tabulate to tabulateAll)
open import Data.List.Any using (Any; here; there)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚àà‚Çó_)
open import Data.List.Membership.Propositional.Properties using (‚àà-filter‚Å∫; ‚àà-tabulate‚Å∫; ‚àà-filter‚Åª)
open import Data.List.Relation.Sublist.Propositional renaming (_‚äÜ_ to _‚äÜ‚Çó_)
open import Data.List.Properties using (length-filter; filter-complete; filter-all)
open import Data.Nat using (‚Ñï; zero; suc; _‚à∏_) renaming (_+_ to _+‚Ñï_; _<_ to _<‚Ñï_; _‚â§_ to _‚â§‚Ñï_; z‚â§n to z‚â§‚Ñïn; s‚â§s to s‚â§‚Ñïs; _‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (1+n‚â∞n; +-mono ≥-<; m+n‚à∏m‚â°n) renaming (+-identity ≥ to +-id ≥‚Ñï; +-suc to +‚Ñï-suc; ‚â§-reflexive to ‚â§‚Ñï-reflexive; ‚â§-trans to ‚â§‚Ñï-trans; n‚â§1+n to n‚â§‚Ñï1+n; ‚â§+‚â¢‚áí< to ‚â§+‚â¢‚áí‚Ñï<; ‚â§-refl to ‚â§‚Ñï-refl; n‚â§m+n to n‚â§‚Ñïm+n; m‚â§m+n to m‚â§‚Ñïm+n; <‚áí‚â§ to <‚Ñï‚áí‚â§‚Ñï; ‚â§-step to ‚â§‚Ñï-step)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ; _‚äé_)
open import Data.Product using (_√ó_; ‚àÉ; _,_; proj‚ÇÅ; proj‚ÇÇ; Œ£)
open import Function using (_‚àò_; id)
open import Induction using (RecStruct)
open import Induction.Nat using (<-wellFounded)
open import Induction.WellFounded using (Acc; acc; WfRec; Well-founded)
open import Level using () renaming (zero to lzero)
open import Relation.Binary using (Rel; Setoid; Preorder)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; _‚â¢_; subst; sym; trans; cong; subst‚ÇÇ; setoid)
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (U; Decidable)
open import Relation.Unary.Properties using (U-Universal)

open Relation.Binary.PropositionalEquality.‚â°-Reasoning

open import RoutingLib.Iteration.Asynchronous.Static
import RoutingLib.Iteration.Asynchronous.Static.Examples.AllPairs as AllPairs
open import RoutingLib.Asynchronous.Schedule using (Schedule; ùïã)
open import RoutingLib.Data.List using (allFinPairs)
open import RoutingLib.Data.List.Membership.Propositional.Properties using (‚àà-combine‚Å∫; ‚àà-allFinPairs‚Å∫)
open import RoutingLib.Data.NatInf
open import RoutingLib.Data.NatInf.Properties
open import RoutingLib.Data.Table using (Table; min‚àû; sum; max)
open import RoutingLib.Data.Table.Any using (Any)
open import RoutingLib.Data.Table.Properties using (min‚àû[s]‚â§min‚àû[t]; min‚àû[t]‚â§x; t‚â§max[t]; sum[s]‚â§sum[t]; sum[s]<sum[t])
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (min‚àû[t]‚ààt)

module RoutingLib.Iteration.Asynchronous.Static.Examples.AllPairs.Convergence {n}(ùï§ : Schedule n)(x‚ÇÄ : AllPairs.Matrix n)(C·µ¢,·µ¢ : ‚àÄ i ‚Üí x‚ÇÄ i i ‚â° N 0) where


  open AllPairs n hiding (F)
  open import RoutingLib.Asynchronous.Examples.AllPairs.Properties n
  open Schedule ùï§
  open Parallelisation all-pairs-parallelisation
  open import RoutingLib.Asynchronous.Convergence.Conditions all-pairs-parallelisation using (SynchronousConditions; StartingConditions)
  open import RoutingLib.Asynchronous.Convergence.Proofs.UresinDubois1 all-pairs-parallelisation

  D‚ÇÄ : Pred lzero
  D‚ÇÄ i = U

  x‚ÇÄ‚ààD‚ÇÄ : x‚ÇÄ ‚àà D‚ÇÄ
  x‚ÇÄ‚ààD‚ÇÄ i = U-Universal (x‚ÇÄ i)

  D‚ÇÄ-closed : ‚àÄ x ‚Üí x ‚àà D‚ÇÄ ‚Üí F x ‚àà D‚ÇÄ
  D‚ÇÄ-closed x _ i = U-Universal (F x i)

  F-monotone : ‚àÄ {x y} ‚Üí x ‚àà D‚ÇÄ ‚Üí  y ‚àà D‚ÇÄ ‚Üí (‚àÄ i ‚Üí x i ‚âº y i) ‚Üí
               ‚àÄ i ‚Üí F x i ‚âº F y i
  F-monotone {x} {y} x‚ààD‚ÇÄ y‚ààD‚ÇÄ x‚âºy i j =
    min‚àû[s]‚â§min‚àû[t] (x i j) (inj‚ÇÅ (x‚âºy i j)) ‚â§-path-cost
    where
    ‚â§-path-cost : ‚àÄ k ‚Üí x i j ‚â§ path-cost y i j k ‚äé
                         Œ£ (Fin n) (Œª v ‚Üí path-cost x i j v ‚â§ path-cost y i j k)
    ‚â§-path-cost k = inj‚ÇÇ (k , path-cost-monotone x‚âºy i j k)

  iter-decreasing : ‚àÄ K ‚Üí syncIter x‚ÇÄ (suc K) ‚âº‚Çò syncIter x‚ÇÄ K
  iter-decreasing zero i j  = min‚àû[t]‚â§x (x‚ÇÄ i j) (path-cost x‚ÇÄ i j) (inj‚ÇÅ ‚â§-refl)
  iter-decreasing (suc K) i = F-monotone
    (Œª j ‚Üí U-Universal (syncIter x‚ÇÄ (suc K)))
    (Œª j ‚Üí U-Universal (syncIter x‚ÇÄ K))
    (Œª j ‚Üí iter-decreasing K j) i

  iter-fixed : ‚àÄ t ‚Üí syncIter x‚ÇÄ (suc t) ‚â°‚Çò syncIter x‚ÇÄ t ‚Üí ‚àÄ K ‚Üí
               syncIter x‚ÇÄ t ‚âà syncIter x‚ÇÄ (t +‚Ñï K)
  iter-fixed t iter‚â° zero i j = cong (Œª x ‚Üí syncIter x‚ÇÄ x i j) (sym (+-id ≥‚Ñï t))
  iter-fixed t iter‚â° (suc K) i j = trans (sym (iter‚â° i j))
    (subst (syncIter x‚ÇÄ (suc t) i j ‚â°_)
      (cong (Œª x ‚Üí syncIter x‚ÇÄ x i j) (sym (+‚Ñï-suc t K)))
      (iter-fixed (suc t) (F-cong iter‚â°) K i j))

  iter‚àû-dependent : ‚Ñï ‚Üí Set
  iter‚àû-dependent K = ‚àÄ i j ‚Üí syncIter x‚ÇÄ K i j ‚â° ‚àû ‚Üí syncIter x‚ÇÄ (suc K) i j ‚â° ‚àû

  iter‚àû-chain : ‚àÄ K ‚Üí iter‚àû-dependent K ‚Üí iter‚àû-dependent (suc K)
  iter‚àû-chain K ‚áí‚àû i j iter·µ¢‚±ºsK‚â°‚àû with syncIter x‚ÇÄ (suc (suc K)) i j ‚âü ‚àû
  ... | yes iter·µ¢‚±ºssK‚â°‚àû = iter·µ¢‚±ºssK‚â°‚àû
  ... | no  iter·µ¢‚±ºssK‚â¢‚àû  with min‚àû[t]‚ààt (syncIter x‚ÇÄ (suc K) i j) (path-cost (syncIter x‚ÇÄ (suc K)) i j)
  ...   | inj‚ÇÅ iter·µ¢‚±º‚â° = contradiction (trans iter·µ¢‚±º‚â° iter·µ¢‚±ºsK‚â°‚àû) iter·µ¢‚±ºssK‚â¢‚àû
  ...   | inj‚ÇÇ (k , p) rewrite p with syncIter x‚ÇÄ (suc K) i k ‚âü ‚àû | syncIter x‚ÇÄ (suc K) k j ‚âü ‚àû
  ...     | yes iter·µ¢‚ÇñsK‚â°‚àû | _ rewrite iter·µ¢‚ÇñsK‚â°‚àû = contradiction refl iter·µ¢‚±ºssK‚â¢‚àû
  ...     | no  _         | yes iter‚Çñ‚±ºsK‚â°‚àû rewrite iter‚Çñ‚±ºsK‚â°‚àû =
            contradiction (+-comm (syncIter x‚ÇÄ (suc K) i k) ‚àû) iter·µ¢‚±ºssK‚â¢‚àû
  ...     | no  iter·µ¢‚ÇñsK‚â¢‚àû | no iter‚Çñ‚±ºsK‚â¢‚àû with syncIter x‚ÇÄ K i k ‚âü ‚àû | syncIter x‚ÇÄ K k j ‚âü ‚àû
  ...       | yes iter·µ¢‚ÇñK‚â°‚àû | _            = contradiction (‚áí‚àû i k iter·µ¢‚ÇñK‚â°‚àû) iter·µ¢‚ÇñsK‚â¢‚àû
  ...       | no  _        | yes iter‚Çñ‚±ºK‚â°‚àû = contradiction (‚áí‚àû k j iter‚Çñ‚±ºK‚â°‚àû) iter‚Çñ‚±ºsK‚â¢‚àû
  ...       | no  iter·µ¢‚ÇñK‚â¢‚àû | no  iter‚Çñ‚±ºK‚â¢‚àû with ‚â¢‚àû‚áí‚â°N iter·µ¢‚ÇñK‚â¢‚àû | ‚â¢‚àû‚áí‚â°N iter‚Çñ‚±ºK‚â¢‚àû
  ...         | x·µ¢‚Çñ , p·µ¢‚Çñ | x‚Çñ‚±º , p‚Çñ‚±º rewrite p·µ¢‚Çñ | p‚Çñ‚±º = contradiction
                (min‚àû[t]‚â§x (syncIter x‚ÇÄ K i j) (path-cost (syncIter x‚ÇÄ K) i j)
                  (inj‚ÇÇ (k , path-cost‚â§x·µ¢‚Çñ+x‚Çñ‚±º)))
                iter·µ¢‚±ºsK‚â∞x·µ¢‚Çñ+x‚Çñ‚±º
                where
                iter·µ¢‚±ºsK‚â∞x·µ¢‚Çñ+x‚Çñ‚±º : syncIter x‚ÇÄ (suc K) i j ‚â∞ N (x·µ¢‚Çñ +‚Ñï x‚Çñ‚±º)
                iter·µ¢‚±ºsK‚â∞x·µ¢‚Çñ+x‚Çñ‚±º = subst (_‚â∞ N (x·µ¢‚Çñ +‚Ñï x‚Çñ‚±º)) (sym iter·µ¢‚±ºsK‚â°‚àû) ‚àû‚â∞

                path-cost‚â§x·µ¢‚Çñ+x‚Çñ‚±º : path-cost (syncIter x‚ÇÄ K) i j k ‚â§ N (x·µ¢‚Çñ +‚Ñï x‚Çñ‚±º)
                path-cost‚â§x·µ¢‚Çñ+x‚Çñ‚±º = ‚â§-reflexive (trans (cong (syncIter x‚ÇÄ K i k +_) p‚Çñ‚±º)
                  (cong (_+ N x‚Çñ‚±º) p·µ¢‚Çñ))

  FinPair : Setoid lzero lzero
  FinPair = setoid (Fin n √ó Fin n)

  is‚àû? : ‚àÄ K ‚Üí Decidable (Œª node ‚Üí syncIter x‚ÇÄ K (proj‚ÇÅ node) (proj‚ÇÇ node) ‚â° ‚àû)
  is‚àû? K = Œª node ‚Üí syncIter x‚ÇÄ K (proj‚ÇÅ node) (proj‚ÇÇ node) ‚âü ‚àû

  ‚àû-nodes : ‚Ñï ‚Üí List (Fin n √ó Fin n)
  ‚àû-nodes zero = filter (is‚àû? 0) (allFinPairs n)
  ‚àû-nodes (suc K) = filter (is‚àû? (suc K)) (‚àû-nodes K)

  node‚àà‚àû-nodes‚áínode‚â°‚àû : ‚àÄ K i j ‚Üí (i , j) ‚àà‚Çó ‚àû-nodes K ‚Üí syncIter x‚ÇÄ K i j ‚â° ‚àû
  node‚àà‚àû-nodes‚áínode‚â°‚àû zero i j node‚àà = proj‚ÇÇ (‚àà-filter‚Åª (is‚àû? 0)
    {i , j} {allFinPairs n} node‚àà)
  node‚àà‚àû-nodes‚áínode‚â°‚àû (suc K) i j node‚àà = proj‚ÇÇ (‚àà-filter‚Åª (is‚àû? (suc K))
    {i , j} {‚àû-nodes K} node‚àà)

  node‚â°‚àû‚áínode‚àà‚àû-nodes : ‚àÄ K i j ‚Üí syncIter x‚ÇÄ K i j ‚â° ‚àû ‚Üí (i , j) ‚àà‚Çó ‚àû-nodes K
  node‚â°‚àû‚áínode‚àà‚àû-nodes zero i j iter‚â°‚àû = ‚àà-filter‚Å∫ (is‚àû? 0)
    (‚àà-allFinPairs‚Å∫ i j) iter‚â°‚àû
  node‚â°‚àû‚áínode‚àà‚àû-nodes (suc K) i j iter‚â°‚àû with syncIter x‚ÇÄ K i j ‚âü ‚àû
  ... | yes ‚â°‚àû =  ‚àà-filter‚Å∫ (is‚àû? (suc K))
    (node‚â°‚àû‚áínode‚àà‚àû-nodes K i j ‚â°‚àû) iter‚â°‚àû
  ... | no  ‚â¢‚àû with ‚â¢‚àû‚áí‚â°N ‚â¢‚àû
  ...   | _ , p = contradiction
    (iter-decreasing K i j)
    (subst‚ÇÇ _‚â∞_ (sym iter‚â°‚àû) (sym p) ‚àû‚â∞)

  ‚àû-nodes-dec : ‚àÄ K ‚Üí ‚àû-nodes (suc K) ‚äÜ‚Çó ‚àû-nodes K
  ‚àû-nodes-dec K x‚àà‚àû-nodes = proj‚ÇÅ (‚àà-filter‚Åª (is‚àû? (suc K)) x‚àà‚àû-nodes)

  ‚àû-nodes-length‚â°‚áí‚àû-nodes‚â° : ‚àÄ K ‚Üí length (‚àû-nodes K) ‚â° length (‚àû-nodes (suc K)) ‚Üí
                               ‚àû-nodes K ‚â° ‚àû-nodes (suc K)
  ‚àû-nodes-length‚â°‚áí‚àû-nodes‚â° K length‚â° = sym (filter-complete (is‚àû? (suc K)) (sym length‚â°))

  ‚àû-nodes‚â°‚áíiter‚Çñ‚â°‚àû‚áíiter‚Çõ‚Çñ‚â°‚àû : ‚àÄ K ‚Üí ‚àû-nodes K ‚â° ‚àû-nodes (suc K) ‚Üí
                                iter‚àû-dependent K
  ‚àû-nodes‚â°‚áíiter‚Çñ‚â°‚àû‚áíiter‚Çõ‚Çñ‚â°‚àû K ‚àû-nodes‚â° i j iter‚Çñ‚â°‚àû =
    node‚àà‚àû-nodes‚áínode‚â°‚àû (suc K) i j (subst ((i , j) ‚àà‚Çó_) ‚àû-nodes‚â°
      (node‚â°‚àû‚áínode‚àà‚àû-nodes K i j iter‚Çñ‚â°‚àû))

  ‚àû-nodes‚â°+‚àà‚àû-nodes‚áíiter‚â°‚àû : ‚àÄ K ‚Üí ‚àû-nodes K ‚â° ‚àû-nodes (suc K) ‚Üí
                               {node : Fin n √ó Fin n} ‚Üí node ‚àà‚Çó ‚àû-nodes (suc K) ‚Üí
                               syncIter x‚ÇÄ (suc (suc K)) (proj‚ÇÅ node) (proj‚ÇÇ node) ‚â° ‚àû
  ‚àû-nodes‚â°+‚àà‚àû-nodes‚áíiter‚â°‚àû K ‚àû-nodes‚â° {i , j} node‚àà =
    iter‚àû-chain K (‚àû-nodes‚â°‚áíiter‚Çñ‚â°‚àû‚áíiter‚Çõ‚Çñ‚â°‚àû K ‚àû-nodes‚â°) i j
      (node‚àà‚àû-nodes‚áínode‚â°‚àû (suc K) i j node‚àà)

  ‚àû-nodes-fixed-range : ‚àÄ K ‚Üí ‚àû-nodes K ‚â° ‚àû-nodes (suc K) ‚Üí ‚àÄ t ‚Üí
                        ‚àû-nodes K ‚â° ‚àû-nodes (K +‚Ñï t)
  ‚àû-nodes-fixed-range K ‚àû-nodes‚â° zero = cong ‚àû-nodes (sym (+-id ≥‚Ñï K))
  ‚àû-nodes-fixed-range K ‚àû-nodes‚â° (suc t) = trans ‚àû-nodes‚â°
    (subst (‚àû-nodes (suc K) ‚â°_) (cong ‚àû-nodes (sym (+‚Ñï-suc K t)))
      (‚àû-nodes-fixed-range (suc K) ‚àû-nodes‚Çõ‚â° t))
    where
    ‚àû-nodes‚Çõ‚â° : ‚àû-nodes (suc K) ‚â° ‚àû-nodes (suc (suc K))
    ‚àû-nodes‚Çõ‚â° = sym (filter-all (is‚àû? (suc (suc K)))
      (tabulateAll (‚àû-nodes‚â°+‚àà‚àû-nodes‚áíiter‚â°‚àû K ‚àû-nodes‚â°)))

  ‚àû-nodes-fixed : ‚àÄ K ‚Üí ‚àû-nodes K ‚â° ‚àû-nodes (suc K) ‚Üí ‚àÄ {t} ‚Üí K ‚â§‚Ñï t ‚Üí
                  ‚àû-nodes t ‚â° ‚àû-nodes (suc t)
  ‚àû-nodes-fixed K ‚àû-nodes‚â° {t} K‚â§t = begin
    ‚àû-nodes t                   ‚â°‚ü® cong ‚àû-nodes (sym (m+n‚à∏m‚â°n K‚â§t)) ‚ü©
    ‚àû-nodes (K +‚Ñï (t ‚à∏ K))     ‚â°‚ü® sym (‚àû-nodes-fixed-range K ‚àû-nodes‚â° (t ‚à∏ K)) ‚ü©
    ‚àû-nodes K                   ‚â°‚ü® ‚àû-nodes-fixed-range K ‚àû-nodes‚â° (suc t ‚à∏ K) ‚ü©
    ‚àû-nodes (K +‚Ñï (suc t ‚à∏ K)) ‚â°‚ü® cong ‚àû-nodes (m+n‚à∏m‚â°n {K} {suc t} (‚â§‚Ñï-step K‚â§t)) ‚ü©
    ‚àû-nodes (suc t)             ‚àé

  ‚àû-nodes-length-dec : ‚àÄ K ‚Üí length (‚àû-nodes (suc K)) ‚â§‚Ñï length (‚àû-nodes K)
  ‚àû-nodes-length-dec K = length-filter (is‚àû? (suc K)) (‚àû-nodes K)

  ‚àû-nodes-converge : ‚àÄ {K} ‚Üí Acc _<‚Ñï_ (length (‚àû-nodes K)) ‚Üí ‚àÉ Œª T ‚Üí ‚àÄ {t} ‚Üí
                     T ‚â§‚Ñï t ‚Üí ‚àû-nodes t ‚â° ‚àû-nodes (suc t)
  ‚àû-nodes-converge {K} (acc rs) with length (‚àû-nodes K) ‚âü‚Ñï length (‚àû-nodes (suc K))
  ... | yes ‚àû-nodes-length‚â° = K ,
    ‚àû-nodes-fixed K (‚àû-nodes-length‚â°‚áí‚àû-nodes‚â° K ‚àû-nodes-length‚â°)
  ... | no  ‚àû-nodes-length‚â¢ = ‚àû-nodes-converge {suc K} (rs (length (‚àû-nodes (suc K)))
    (‚â§+‚â¢‚áí‚Ñï< (‚àû-nodes-length-dec K) (‚àû-nodes-length‚â¢ ‚àò sym)))

  score : ‚Ñï ‚Üí ‚Ñï
  score K = sum {n} (Œª i ‚Üí sum {n} (Œª j ‚Üí extract‚Ñï (syncIter x‚ÇÄ K i j)))

  module _ (‚àû-conv : ‚àÉ Œª T ‚Üí ‚àÄ {t} ‚Üí T ‚â§‚Ñï t ‚Üí ‚àû-nodes t ‚â° ‚àû-nodes (suc t)) where

    extract‚Ñï-dec : ‚àÄ {K} ‚Üí proj‚ÇÅ ‚àû-conv ‚â§‚Ñï K ‚Üí ‚àÄ i j ‚Üí
                   extract‚Ñï (syncIter x‚ÇÄ (suc K) i j) ‚â§‚Ñï extract‚Ñï (syncIter x‚ÇÄ K i j)
    extract‚Ñï-dec {K} T‚â§K i j with syncIter x‚ÇÄ (suc K) i j ‚âü ‚àû | syncIter x‚ÇÄ K i j ‚âü ‚àû
    ... | yes iter‚Çõ‚Çñ‚â°‚àû | yes iter‚Çñ‚â°‚àû rewrite iter‚Çõ‚Çñ‚â°‚àû | iter‚Çñ‚â°‚àû = ‚â§‚Ñï-refl
    ... | no  iter‚Çõ‚Çñ‚â¢‚àû | yes iter‚Çñ‚â°‚àû = contradiction
      (‚àû-nodes‚â°‚áíiter‚Çñ‚â°‚àû‚áíiter‚Çõ‚Çñ‚â°‚àû K (proj‚ÇÇ ‚àû-conv T‚â§K) i j iter‚Çñ‚â°‚àû) iter‚Çõ‚Çñ‚â¢‚àû
    ... | no  iter‚Çõ‚Çñ‚â¢‚àû | no  iter‚Çñ‚â¢‚àû =
                 ‚â§‚áíextract‚Ñï‚â§ iter‚Çõ‚Çñ‚â¢‚àû iter‚Çñ‚â¢‚àû (iter-decreasing K i j)
    ... | yes iter‚Çõ‚Çñ‚â°‚àû | no  iter‚Çñ‚â¢‚àû with ‚â¢‚àû‚áí‚â°N iter‚Çñ‚â¢‚àû
    ...   | _ , p = contradiction
      (iter-decreasing K i j)
      (subst‚ÇÇ _‚â∞_ (sym iter‚Çõ‚Çñ‚â°‚àû) (sym p) ‚àû‚â∞)

    score-dec : ‚àÄ {K} ‚Üí proj‚ÇÅ ‚àû-conv ‚â§‚Ñï K ‚Üí score (suc K) ‚â§‚Ñï score K
    score-dec {K} T‚â§K = sum[s]‚â§sum[t]
              (Œª i ‚Üí sum[s]‚â§sum[t]
                (Œª j ‚Üí extract‚Ñï-dec T‚â§K i j))

    extract‚Ñï-dec-strict : ‚àÄ {K} ‚Üí proj‚ÇÅ ‚àû-conv ‚â§‚Ñï K ‚Üí ‚àÄ i j ‚Üí
                          syncIter x‚ÇÄ (suc K) i j ‚â¢ syncIter x‚ÇÄ K i j ‚Üí
                          extract‚Ñï (syncIter x‚ÇÄ (suc K) i j) <‚Ñï extract‚Ñï (syncIter x‚ÇÄ K i j)
    extract‚Ñï-dec-strict {K} T‚â§K i j iter‚â¢ = ‚â§+‚â¢‚áí‚Ñï< (extract‚Ñï-dec T‚â§K i j) extract‚Ñï‚â¢
      where
      extract‚Ñï‚â¢ : extract‚Ñï (syncIter x‚ÇÄ (suc K) i j) ‚â¢ extract‚Ñï (syncIter x‚ÇÄ K i j)
      extract‚Ñï‚â¢ with syncIter x‚ÇÄ (suc K) i j ‚âü ‚àû | syncIter x‚ÇÄ K i j ‚âü ‚àû
      extract‚Ñï‚â¢ | yes iter‚Çõ‚Çñ‚â°‚àû | yes iter‚Çñ‚â°‚àû = contradiction (trans iter‚Çõ‚Çñ‚â°‚àû (sym iter‚Çñ‚â°‚àû)) iter‚â¢
      extract‚Ñï‚â¢ | yes iter‚Çõ‚Çñ‚â°‚àû | no  iter‚Çñ‚â¢‚àû with ‚â¢‚àû‚áí‚â°N iter‚Çñ‚â¢‚àû
      ... | x , p = contradiction (iter-decreasing K i j) (subst‚ÇÇ _‚â∞_ (sym iter‚Çõ‚Çñ‚â°‚àû) (sym p) ‚àû‚â∞)
      extract‚Ñï‚â¢ | no  iter‚Çõ‚Çñ‚â¢‚àû | yes iter‚Çñ‚â°‚àû = contradiction
                  (‚àû-nodes‚â°‚áíiter‚Çñ‚â°‚àû‚áíiter‚Çõ‚Çñ‚â°‚àû K (proj‚ÇÇ ‚àû-conv T‚â§K) i j iter‚Çñ‚â°‚àû)
                  iter‚Çõ‚Çñ‚â¢‚àû
      extract‚Ñï‚â¢ | no  iter‚Çõ‚Çñ‚â¢‚àû | no  iter‚Çñ‚â¢‚àû = ‚â¢‚áíextract‚Ñï‚â¢ iter‚Çõ‚Çñ‚â¢‚àû iter‚Çñ‚â¢‚àû iter‚â¢

    iter‚ââ‚áíscore< : ‚àÄ {t} ‚Üí proj‚ÇÅ (‚àû-conv) ‚â§‚Ñï t ‚Üí syncIter x‚ÇÄ (suc t) ‚ââ syncIter x‚ÇÄ t ‚Üí
                    score (suc t) <‚Ñï score t
    iter‚ââ‚áíscore< {t} T‚â§t iter‚ââ with ‚â¢‚Çò-witness iter‚ââ
    ... | i , j , iter·µ¢‚±º‚â¢ = sum[s]<sum[t]
      ((Œª i ‚Üí sum[s]‚â§sum[t] (Œª j ‚Üí extract‚Ñï-dec T‚â§t i j)))
      (i , sum[s]<sum[t]
        (Œª j ‚Üí extract‚Ñï-dec T‚â§t i j)
        (j , extract‚Ñï-dec-strict T‚â§t i j iter·µ¢‚±º‚â¢))

    iter-fixed-point : ‚àÄ {t} ‚Üí proj‚ÇÅ (‚àû-conv) ‚â§‚Ñï t ‚Üí Acc _<‚Ñï_ (score t) ‚Üí
                       ‚àÉ Œª T ‚Üí ‚àÄ K ‚Üí syncIter x‚ÇÄ T ‚âà syncIter x‚ÇÄ (T +‚Ñï K)
    iter-fixed-point {t} T‚â§t acc‚Çú with syncIter x‚ÇÄ (suc t) ‚âü‚Çò syncIter x‚ÇÄ t
    ... | yes iter‚âà = t , iter-fixed t iter‚âà
    iter-fixed-point {t} T‚â§t (acc rs) | no iter‚ââ =
                     iter-fixed-point {suc t} (‚â§‚Ñï-step T‚â§t)
                       (rs (score (suc t)) (iter‚ââ‚áíscore< T‚â§t iter‚ââ))


  iter-converge : ‚àÉ Œª T ‚Üí ‚àÄ t ‚Üí syncIter x‚ÇÄ T ‚âà syncIter x‚ÇÄ (T +‚Ñï t)
  iter-converge with ‚àû-nodes-converge {0} (<-wellFounded (length (‚àû-nodes 0)))
  ... | T‚àû , ‚àû-conv = iter-fixed-point (T‚àû , ‚àû-conv) (‚â§‚Ñï-refl)
                      (<-wellFounded (score T‚àû))

  start : StartingConditions lzero
  start = record
    { x‚ÇÄ = x‚ÇÄ
    ; D‚ÇÄ = D‚ÇÄ
    ; x‚ÇÄ‚ààD‚ÇÄ = x‚ÇÄ‚ààD‚ÇÄ
    ; D‚ÇÄ-closed = D‚ÇÄ-closed
    }

  poset : M-poset lzero
  poset = record {
    _‚âº·µ¢_ = Œª {i} ‚Üí _‚âº_ ;
    isPartialOrder·µ¢ = Œª i ‚Üí ‚âº-isPartialOrder
    }

  syncCond : SynchronousConditions lzero
  syncCond = record {
    start           = start ;
    poset           = poset ;
    F-monotone      = F-monotone ;
    iter-decreasing = iter-decreasing ;
    iter-converge   = iter-converge
    }

  open import RoutingLib.Asynchronous.Convergence.Proofs.UresinDubois3 all-pairs-parallelisation syncCond using (aco; x‚ÇÄ‚ààD[0])

  convergence-time : ùïã
  convergence-time = {!!} --proj‚ÇÅ (async-converge ? aco x‚ÇÄ‚ààD[0])

  convergence-state : Matrix
  convergence-state = {!!} --Œæ aco ùï§ x‚ÇÄ‚ààD[0]
