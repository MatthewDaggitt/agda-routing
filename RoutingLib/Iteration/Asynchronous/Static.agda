--------------------------------------------------------------------------------
-- Agda routing library
--
-- This module contains the definition of what it means to be a static
-- asynchronous iteration as well as the definition of the state function
-- and what it means for such processes to be "correct".
--------------------------------------------------------------------------------

module RoutingLib.Iteration.Asynchronous.Static where

open import Algebra.FunctionProperties using (Congruent‚ÇÅ)
open import Level using (_‚äî_; 0‚Ñì) renaming (suc to lsuc)
open import Data.Fin using (Fin)
open import Data.Fin.Dec using (_‚àà?_; all?)
open import Data.Fin.Subset using (Subset) renaming (_‚àâ_ to _‚àâ‚Çõ_)
open import Data.Fin.Properties using () renaming (setoid to ùîΩ‚Çõ)
open import Data.Nat using (‚Ñï; _‚â§_; _+_; s‚â§s; _<_; zero; suc)
open import Data.Nat.Properties using (‚â§-refl)
open import Data.Product using (‚àÉ; _√ó_; _,_)
open import Data.Unit using (tt)
open import Relation.Binary as B using (Setoid; Rel; _Preserves_‚ü∂_; Reflexive)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl)
open import Relation.Binary.Indexed.Homogeneous hiding (Rel)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (Pred; _‚àà_; U)
open import Induction.WellFounded using (Acc; acc)
open import Induction.Nat using (<-wellFounded)

open import RoutingLib.Data.Nat.Properties using (‚Ñï‚Çõ)
open import RoutingLib.Data.Table using (Table)
import RoutingLib.Data.Table.Relation.Binary.Equality as TableEquality
import RoutingLib.Relation.Binary.Indexed.Homogeneous.Construct.FiniteSubset as FiniteSubset
import RoutingLib.Relation.Binary.Indexed.Homogeneous.Construct.FiniteSubset.DecEquality as FiniteSubsetEquality
open import RoutingLib.Relation.Unary.Indexed using (IPred; _‚àà·µ¢_; U·µ¢; Universal·µ¢)

open import RoutingLib.Iteration.Asynchronous.Static.Schedule as Schedules
open import RoutingLib.Iteration.Asynchronous.Static.Schedule.Pseudoperiod

------------------------------------------------------------------------
-- Parallelisable functions

record IsAsyncIterable
  {a n ‚Ñì}
  -- Types for state of each node
  {S·µ¢ : Fin n ‚Üí Set a}
  -- Equality for the type of each node
  (_‚âà·µ¢_ : IRel S·µ¢ ‚Ñì)
  -- The set of functions indexed by epoch and participants
  (F : (‚àÄ i ‚Üí S·µ¢ i) ‚Üí (‚àÄ i ‚Üí S·µ¢ i))
  : Set (a ‚äî ‚Ñì) where

  -- The type of the global state of the computation
  S : Set _
  S = ‚àÄ i ‚Üí S·µ¢ i

  -- Global equality
  _‚âà_ : Rel S ‚Ñì
  x ‚âà y = ‚àÄ i ‚Üí x i ‚âà·µ¢ y i

  _‚ââ_ : Rel S ‚Ñì
  x ‚ââ y = ¬¨ (x ‚âà y)

  -- Required assumptions
  field
    isDecEquivalence·µ¢ : IsIndexedDecEquivalence S·µ¢ _‚âà·µ¢_
    F-cong            : F Preserves _‚âà_ ‚ü∂ _‚âà_

  -- Re-export various forms of equality
  ‚âà-iDecSetoid : IndexedDecSetoid (Fin n) a ‚Ñì
  ‚âà-iDecSetoid = record { isDecEquivalence·µ¢ = isDecEquivalence·µ¢ }

  open IndexedDecSetoid ‚âà-iDecSetoid public
    using (_‚âü·µ¢_)
    renaming
    ( reflexive·µ¢    to ‚âà·µ¢-reflexive
    ; reflexive     to ‚âà-reflexive
    ; refl·µ¢         to ‚âà·µ¢-refl
    ; refl          to ‚âà-refl
    ; sym·µ¢          to ‚âà·µ¢-sym
    ; sym           to ‚âà-sym
    ; trans·µ¢        to ‚âà·µ¢-trans
    ; trans         to ‚âà-trans
    ; isEquivalence to ‚âà-isEquivalence
    ; setoid        to ‚âà-setoid
    ; indexedSetoid to ‚âà·µ¢-iSetoid
    )

  _‚âü_ : B.Decidable _‚âà_
  x ‚âü y = all? (Œª i ‚Üí x i ‚âü·µ¢ y i)

  open FiniteSubsetEquality ‚âà-iDecSetoid public hiding (_‚âà[_]_)


record AsyncIterable a ‚Ñì n : Set (lsuc a ‚äî lsuc ‚Ñì) where
  field
    S·µ¢               : Fin n ‚Üí Set a
    _‚âà·µ¢_             : IRel S·µ¢ ‚Ñì
    F                : (‚àÄ i ‚Üí S·µ¢ i) ‚Üí (‚àÄ i ‚Üí S·µ¢ i)
    isAsyncIterable  : IsAsyncIterable _‚âà·µ¢_ F

  open IsAsyncIterable isAsyncIterable public

-------------------------------------------------------------------------
-- Dynamic asynchronous state function
--
-- Given an iterable and a schedule and an initial state, returns the
-- state at time t.

module _ {a ‚Ñì n} (I‚à• : AsyncIterable a ‚Ñì n) (œà : Schedule n) where

  open AsyncIterable I‚à•
  open Schedule œà

  -- The six cases (in-order)
  -- 1. Initially: not participating
  -- 2. Initially: participating
  -- 3. Currently: not participating
  -- 4. Currently: just started participating
  -- 5. Currently: participating but inactive
  -- 6. Currently: participating and active
  asyncIter' : S ‚Üí ‚àÄ {t} ‚Üí Acc _<_ t ‚Üí S
  asyncIter' x‚ÇÄ {zero} _ i = x‚ÇÄ i
  asyncIter' x‚ÇÄ {suc t} (acc rec) i with i ‚àà? Œ± (suc t)
  ... | no  _ = asyncIter' x‚ÇÄ (rec t ‚â§-refl) i
  ... | yes _ = F (Œª j ‚Üí asyncIter' x‚ÇÄ (rec (Œ≤ (suc t) i j) (s‚â§s (Œ≤-causality t i j))) j) i

  asyncIter : S ‚Üí ùïã ‚Üí S
  asyncIter x‚ÇÄ t = asyncIter' x‚ÇÄ (<-wellFounded t)


-------------------------------------------------------------------------
-- The notion of correctness for static parallelisations

module _ {a ‚Ñì n} (I‚à• : AsyncIterable a ‚Ñì n) where

  open AsyncIterable I‚à•

  record Converges : Set (lsuc 0‚Ñì ‚äî a ‚äî ‚Ñì) where
    field
      x*         : S
      k*         : ‚Ñï
      x*-fixed   : F x* ‚âà x*
      x*-reached : ‚àÄ x ‚Üí (œà : Schedule n) ‚Üí
                   ‚àÄ {s e : ùïã} ‚Üí MultiPseudocycle œà k* [ s , e ] ‚Üí
                   ‚àÄ {t} ‚Üí e ‚â§ t ‚Üí
                   asyncIter I‚à• œà x t ‚âà x*

  record PartiallyConverges {p} (X‚ÇÄ : IPred S·µ¢ p) : Set (lsuc 0‚Ñì ‚äî a ‚äî ‚Ñì ‚äî p) where
    field
      x*         : S
      k*         : ‚Ñï
      x*-fixed   : F x* ‚âà x*
      x*-reached : ‚àÄ {x} ‚Üí x ‚àà·µ¢ X‚ÇÄ ‚Üí
                   (œà : Schedule n) ‚Üí
                   ‚àÄ {s e : ùïã} ‚Üí MultiPseudocycle œà k* [ s , e ] ‚Üí
                   ‚àÄ {t} ‚Üí e ‚â§ t ‚Üí
                   asyncIter I‚à• œà x t ‚âà x*

  converges‚áípartiallyConverges : Converges ‚Üí PartiallyConverges U·µ¢
  converges‚áípartiallyConverges conv = record
    { x*         = x*
    ; k*         = k*
    ; x*-fixed   = x*-fixed
    ; x*-reached = Œª {x} _ ‚Üí x*-reached x
    } where open Converges conv

  partiallyConverges‚áíconverges : ‚àÄ {p} {X‚ÇÄ : IPred S·µ¢ p} ‚Üí Universal·µ¢ X‚ÇÄ ‚Üí
                                 PartiallyConverges X‚ÇÄ ‚Üí Converges
  partiallyConverges‚áíconverges _‚ààX‚ÇÄ partialConv = record
    { x*         = x*
    ; k*         = k*
    ; x*-fixed   = x*-fixed
    ; x*-reached = Œª x ‚Üí x*-reached (Œª i ‚Üí x i ‚ààX‚ÇÄ)
    } where open PartiallyConverges partialConv

  
  partiallyConverges‚áíconverges‚Ä≤ : PartiallyConverges U·µ¢ ‚Üí Converges
  partiallyConverges‚áíconverges‚Ä≤ = partiallyConverges‚áíconverges (Œª _ ‚Üí tt)
