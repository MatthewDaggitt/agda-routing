open import Level using (_⊔_) renaming (zero to lzero; suc to lsuc)
open import Data.Nat using (ℕ; zero; suc; pred; z≤n; s≤s; _≟_; _<_; _≤_; _∸_; _+_)
open import Data.Nat.Properties using (n≤1+n; ≤-trans; ≤-antisym)
open import Data.Fin using (Fin; zero; suc)
open import Data.Fin.Subset using (Subset; _∈_; _∉_; _⊆_)
open import Data.Product using (∃; _×_; _,_)
open import Relation.Binary using (_Preserves_⟶_)
open import Relation.Binary.PropositionalEquality using (_≡_; _≢_; sym; trans; subst)

module RoutingLib.Iteration.Asynchronous.Schedule where

--------------------------------------------------------------------------------
-- Time --
--------------------------------------------------------------------------------
-- Some type definitions

-- Time
𝕋 : Set
𝕋 = ℕ

-- Time periods
open import RoutingLib.Data.Range public
  renaming (Range to TimePeriod; _∈_ to _∈ₜ_)

-- Epoch numbers
Epoch : Set
Epoch = ℕ

--------------------------------------------------------------------------------
-- Mono schedules --
--------------------------------------------------------------------------------
-- A schedule dictating the flow of inforamtion within a computation
-- (ala Uresin & Dubois)

record DataSchedule (n : ℕ) : Set where
  field
    -- "α t" is the set of nodes that are active at time t
    α : (t : 𝕋) → Subset n
    -- "β t i j" is the time at which the data used by node i at time t was generated by node j
    β : (t : 𝕋) (i j : Fin n) → 𝕋

    -- Information can only be used after it is generated
    β-causality   : ∀ t i j → β (suc t) i j ≤ t

  -- Some derived properties
  β-decreasing : ∀ {t} i j → 1 ≤ t → β t i j ≤ t
  β-decreasing i j (s≤s z≤n) = ≤-trans (β-causality _ i j) (n≤1+n _)

--------------------------------------------------------------------------------
-- Epoch schedules --
--------------------------------------------------------------------------------
-- A schedule dictating the nature of the changing computation

record EpochSchedule (n : ℕ) : Set where
  field
    -- "η t" is the current epoch at time t
    η : (t : 𝕋) → Epoch
    -- "π e" is the set of participating nodes in epoch e
    π : Epoch → Subset n

    -- Epochs increase monotonically
    η-mono         : η Preserves _≤_ ⟶ _≤_

  -- "ρ t" is the set of participants at time t 
  ρ : 𝕋 → Subset n
  ρ t = π (η t)

  ∈ρ-subst : ∀ {s e} → η s ≡ η e → ∀ {i} → i ∈ ρ s → i ∈ ρ e
  ∈ρ-subst ηₛ≡ηₑ {i} i∈ρₛ = subst (λ v → i ∈ π v) ηₛ≡ηₑ i∈ρₛ

  -- If two points are in an epoch then any point in between them is also in that epoch
  η-inRangeₛ : ∀ {s e} → η s ≡ η e → ∀ {t} → t ∈ₜ [ s , e ] → η s ≡ η t
  η-inRangeₛ ηₛ≡ηₑ (s≤t , t≤e) = ≤-antisym (η-mono s≤t) (subst (η _ ≤_) (sym ηₛ≡ηₑ) (η-mono t≤e))

  η-inRangeₑ : ∀ {s e} → η s ≡ η e → ∀ {t} → t ∈ₜ [ s , e ] → η t ≡ η e
  η-inRangeₑ ηₛ≡ηₑ t∈[s,e] = trans (sym (η-inRangeₛ ηₛ≡ηₑ t∈[s,e])) ηₛ≡ηₑ

  η-inRange : ∀ {s e} → η s ≡ η e → ∀ {t} → t ∈ₜ [ s , e ] → η s ≡ η t × η t ≡ η e
  η-inRange ηₛ≡ηₑ t∈[s,e] = η-inRangeₛ ηₛ≡ηₑ t∈[s,e] , η-inRangeₑ ηₛ≡ηₑ t∈[s,e]
  
--------------------------------------------------------------------------------
-- Schedule --
--------------------------------------------------------------------------------
-- An asynchronous schedule for n processors

record Schedule (n : ℕ) : Set where
  field
    dataSchedule  : DataSchedule n
    epochSchedule : EpochSchedule n
    
  open DataSchedule  dataSchedule  public
  open EpochSchedule epochSchedule public
