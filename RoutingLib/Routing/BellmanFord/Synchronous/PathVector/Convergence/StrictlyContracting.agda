
open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚âÆ_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties hiding (module ‚â§-Reasoning)
open import Data.Fin using (Fin)
open import Data.Fin.Properties using () renaming (_‚âü_ to _‚âüùîΩ_)
open import Data.Fin.Subset using (Subset; _‚àà_; _‚àâ_; ‚ä§; ‚ÅÖ_‚ÅÜ; ‚à£_‚à£)
open import Data.Fin.Subset.Properties using (x‚ààp‚à©q‚Å∫; x‚àà‚ÅÖx‚ÅÜ; ‚àà‚ä§)
open import Data.Fin.Dec using (_‚àà?_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; swap)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; sym; trans; cong; subst; subst‚ÇÇ; cong‚ÇÇ)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_)
open import Induction.WellFounded using (Acc; acc)
open import Induction.Nat using (<-wellFounded)

open import RoutingLib.Data.Fin.Subset using (_\\_)
open import RoutingLib.Data.Fin.Subset.Properties
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; n<m‚áín‚äìo<m; n‚â§m‚áín‚äìo‚â§m; m<n‚áín‚â¢0; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Data.Matrix using (Any; map; min‚Å∫)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫[M]<min‚Å∫[N])
open import RoutingLib.Data.Table using (Table)
open import RoutingLib.Data.Table.Properties using (max[t]<x)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
import RoutingLib.Function.Metric as Metric
import RoutingLib.Function.Metric.MaxLift as MaxLift

open import RoutingLib.Routing.Algebra
open import RoutingLib.Routing.Algebra.CertifiedPathAlgebra
import RoutingLib.Routing.Algebra.CertifiedPathAlgebra.Consistency as Consistency
import RoutingLib.Routing.Algebra.CertifiedPathAlgebra.Properties as PathAlgebraProperties
open import RoutingLib.Routing.Model as Model using (AdjacencyMatrix)
import RoutingLib.Routing.BellmanFord.Synchronous as BellmanFord
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Properties as BellmanFordProperties
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Convergence.Metrics as PathVectorMetrics
import RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Convergence.Properties as PathVectorMetricProperties
import RoutingLib.Routing.BellmanFord.Synchronous.DistanceVector.Convergence.Properties as DistanceVectorProperties
import RoutingLib.Routing.BellmanFord.Synchronous.DistanceVector.Convergence.StrictlyContracting as DistanceVectorStrContr

open ‚â§-Reasoning

module RoutingLib.Routing.BellmanFord.Synchronous.PathVector.Convergence.StrictlyContracting
  {a b ‚Ñì n} {algebra : RawRoutingAlgebra a b ‚Ñì}
  (isPathAlgebra : IsCertifiedPathAlgebra algebra n)
  (isStrictlyIncreasing : IsStrictlyIncreasing algebra)
  (A : AdjacencyMatrix algebra n)
  (1‚â§n : 1 ‚â§ n)
  where

open RawRoutingAlgebra algebra
open IsCertifiedPathAlgebra isPathAlgebra
open Consistency algebra isPathAlgebra A
open PathAlgebraProperties isPathAlgebra

open BellmanFord algebra A 
open BellmanFord algebra·∂ú A·∂ú using () renaming (œÉ to œÉ·∂ú)
open BellmanFordProperties algebra isPathAlgebra A
open PathVectorMetrics isPathAlgebra A
open PathVectorMetricProperties isPathAlgebra A
private module DVP = DistanceVectorProperties isRoutingAlgebra·∂ú isFinite·∂ú
private module DVSC = DistanceVectorStrContr isRoutingAlgebra·∂ú isFinite·∂ú (isStrictlyIncreasing·∂ú isStrictlyIncreasing) A·∂ú

------------------------------------------------------------------------
-- Properties of d·µ£‚Å±

private

  chain‚ÇÅ : ‚àÄ X i j ‚Üí ùë∞ (œÉ X i j) ‚Üí ‚àÉ Œª k ‚Üí ùë∞ (X k j) √ó h‚Å± (œÉ X i j) < h‚Å± (X k j) ‚äî h‚Å± (œÉ X k j)
  chain‚ÇÅ X i j œÉX·µ¢‚±º‚Å± with œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º X _ _ œÉX·µ¢‚±º‚Å±
  ... | k , œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º , X‚Çñ‚±º‚Å± = k , X‚Çñ‚±º‚Å± , (begin
    h‚Å± (œÉ X i j)              ‚â°‚ü® h‚Å±-cong 1‚â§n œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º ‚ü©
    h‚Å± (A i k ‚ñ∑ X k j)        <‚ü® h‚Å±-decr 1‚â§n (ùë∞-cong œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º œÉX·µ¢‚±º‚Å±) ‚ü©
    h‚Å± (X k j)                ‚â§‚ü® m‚â§m‚äîn (h‚Å± (X k j)) (h‚Å± (œÉ X k j)) ‚ü©
    h‚Å± (X k j) ‚äî h‚Å± (œÉ X k j) ‚àé)

  chain‚ÇÇ : ‚àÄ X i k j ‚Üí h‚Å± (œÉ X i j) < h‚Å± (X k j) ‚äî h‚Å± (œÉ X k j) ‚Üí X k j ‚âà œÉ X k j ‚Üí h‚Å± (œÉ X i j) < h‚Å± (œÉ X k j)
  chain‚ÇÇ X i k j hœÉX·µ¢‚±º<hX‚Çñ‚±º‚äîhœÉX‚Çñ‚±º X‚Çñ‚±º‚âàœÉX‚Çñ‚±º = begin
    h‚Å± (œÉ X i j)                <‚ü® hœÉX·µ¢‚±º<hX‚Çñ‚±º‚äîhœÉX‚Çñ‚±º ‚ü©
    h‚Å± (X k j)   ‚äî h‚Å± (œÉ X k j) ‚â°‚ü® cong (_‚äî h‚Å± (œÉ X k j)) (h‚Å±-cong 1‚â§n X‚Çñ‚±º‚âàœÉX‚Çñ‚±º) ‚ü©
    h‚Å± (œÉ X k j) ‚äî h‚Å± (œÉ X k j) ‚â°‚ü® ‚äî-idem (h‚Å± (œÉ X k j)) ‚ü©
    h‚Å± (œÉ X k j)                ‚àé

  reduction : ‚àÄ X {r s} ‚Üí
              (‚àÄ {u v} ‚Üí X u v ‚ââ œÉ X u v ‚Üí ùë∞ (X u v) ‚äé ùë∞ (œÉ X u v) ‚Üí d·µ£‚Å± (X u v) (œÉ X u v) ‚â§ d·µ£‚Å± (X r s) (œÉ X r s)) ‚Üí
              ‚àÄ i j (L : Subset n) ‚Üí Acc _<_ ‚à£ L ‚à£ ‚Üí (‚àÄ {l} ‚Üí l ‚àâ L ‚Üí h‚Å± (œÉ X l j) ‚â§ h‚Å± (œÉ X i j)) ‚Üí
              ùë∞ (œÉ X i j) ‚Üí h‚Å± (œÉ X i j) < h‚Å± (X r s) ‚äî h‚Å± (œÉ X r s)
  reduction X {r} {s} d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ i j L (acc rec) L-less œÉX·µ¢‚±º‚Å± with chain‚ÇÅ X _ _ œÉX·µ¢‚±º‚Å±
  ... | k , X‚Çñ‚±º‚Å± , hœÉX·µ¢‚±º<hX‚Çñ‚±º‚äîhœÉX‚Çñ‚±º  with X k j ‚âü œÉ X k j
  ...   | no  X‚Çñ‚±º‚ââœÉX‚Çñ‚±º = <-transÀ° (hœÉX·µ¢‚±º<hX‚Çñ‚±º‚äîhœÉX‚Çñ‚±º) (d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ X‚Çñ‚±º‚ââœÉX‚Çñ‚±º (inj‚ÇÅ X‚Çñ‚±º‚Å±))
  ...   | yes X‚Çñ‚±º‚âàœÉX‚Çñ‚±º with chain‚ÇÇ X i k j hœÉX·µ¢‚±º<hX‚Çñ‚±º‚äîhœÉX‚Çñ‚±º X‚Çñ‚±º‚âàœÉX‚Çñ‚±º | k ‚àà? L
  ...     | hœÉX·µ¢‚±º<hœÉX‚Çñ‚±º | no  k‚àâL = contradiction hœÉX·µ¢‚±º<hœÉX‚Çñ‚±º (‚â§‚áí‚âØ (L-less k‚àâL))
  ...     | hœÉX·µ¢‚±º<hœÉX‚Çñ‚±º | yes k‚ààL = begin
    h‚Å± (œÉ X i j)              <‚ü® hœÉX·µ¢‚±º<hœÉX‚Çñ‚±º ‚ü©
    h‚Å± (œÉ X k j)              <‚ü® reduction X d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ k j (L \\ ‚ÅÖ k ‚ÅÜ) (rec _ ‚à£L\\k‚à£<‚à£L‚à£) L-exclude (ùë∞-cong X‚Çñ‚±º‚âàœÉX‚Çñ‚±º X‚Çñ‚±º‚Å±) ‚ü©
    h‚Å± (X r s) ‚äî h‚Å± (œÉ X r s) ‚àé

    where

    ‚à£L\\k‚à£<‚à£L‚à£ : ‚à£ L \\ ‚ÅÖ k ‚ÅÜ ‚à£ < ‚à£ L ‚à£
    ‚à£L\\k‚à£<‚à£L‚à£ = ‚à£p\\q‚à£<‚à£p‚à£ {p = L} {‚ÅÖ k ‚ÅÜ} (k , x‚ààp‚à©q‚Å∫ (k‚ààL , x‚àà‚ÅÖx‚ÅÜ k))

    L-exclude : ‚àÄ {l} ‚Üí l ‚àâ (L \\ ‚ÅÖ k ‚ÅÜ) ‚Üí h‚Å± (œÉ X l j) ‚â§ h‚Å± (œÉ X k j)
    L-exclude {l} l‚àâL\\k with l ‚âüùîΩ k
    ... | yes refl = ‚â§-refl
    ... | no  l‚â¢k  = <‚áí‚â§ (<-trans ≥ (L-less (i‚àâp\\q‚áíi‚àâp l‚àâL\\k (i‚àâ‚ÅÖj‚ÅÜ l‚â¢k))) hœÉX·µ¢‚±º<hœÉX‚Çñ‚±º)



d·µ£‚Å±-strContrOrbits : ‚àÄ X {r s} ‚Üí
               (‚àÄ {u v} ‚Üí X u v ‚ââ œÉ X u v ‚Üí ùë∞ (X u v) ‚äé ùë∞ (œÉ X u v) ‚Üí d·µ£‚Å± (X u v) (œÉ X u v) ‚â§ d·µ£‚Å± (X r s) (œÉ X r s)) ‚Üí
               ‚àÄ {i j} ‚Üí ùë∞ (œÉ X i j) ‚äé ùë∞ (œÉ (œÉ X) i j) ‚Üí d·µ£‚Å± (œÉ X i j) (œÉ (œÉ X) i j) < d·µ£‚Å± (X r s) (œÉ X r s)
d·µ£‚Å±-strContrOrbits X {r} {s} d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ {i} {j} œÉX·µ¢‚±º‚Å±‚äéœÉ¬≤X·µ¢‚±º‚Å± with ‚â§-total (h‚Å± (œÉ (œÉ X) i j)) (h‚Å± (œÉ X i j))
...   | inj‚ÇÅ œÉ¬≤X·µ¢‚±º‚â§œÉX·µ¢‚±º = begin
  h‚Å± (œÉ X i j) ‚äî h‚Å± (œÉ (œÉ X) i j) ‚â°‚ü® m‚â§n‚áín‚äîm‚â°n œÉ¬≤X·µ¢‚±º‚â§œÉX·µ¢‚±º ‚ü©
  h‚Å± (œÉ X i j)                    <‚ü® reduction X d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ i j ‚ä§ (<-wellFounded ‚à£ ‚ä§ {n = n} ‚à£) (Œª l‚àâ‚ä§ ‚Üí contradiction ‚àà‚ä§ l‚àâ‚ä§) (h‚Å±-force-ùë∞ 1‚â§n (swap œÉX·µ¢‚±º‚Å±‚äéœÉ¬≤X·µ¢‚±º‚Å±) œÉ¬≤X·µ¢‚±º‚â§œÉX·µ¢‚±º) ‚ü©
  h‚Å± (X r s)   ‚äî h‚Å± (œÉ X r s)     ‚àé
...   | inj‚ÇÇ œÉX·µ¢‚±º‚â§œÉ¬≤X·µ¢‚±º with œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º (œÉ X) _ _ (h‚Å±-force-ùë∞ 1‚â§n œÉX·µ¢‚±º‚Å±‚äéœÉ¬≤X·µ¢‚±º‚Å± œÉX·µ¢‚±º‚â§œÉ¬≤X·µ¢‚±º)
... | k , œÉ¬≤X·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º , œÉX‚Çñ‚±º‚Å± = begin
  h‚Å± (œÉ X i j) ‚äî h‚Å± (œÉ (œÉ X) i j) ‚â°‚ü® m‚â§n‚áím‚äîn‚â°n œÉX·µ¢‚±º‚â§œÉ¬≤X·µ¢‚±º ‚ü©
  h‚Å± (œÉ (œÉ X) i j)                ‚â°‚ü® h‚Å±-cong 1‚â§n œÉ¬≤X·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º ‚ü©
  h‚Å± (A i k ‚ñ∑ œÉ X k j)            <‚ü® h‚Å±-decr 1‚â§n (ùë∞-cong œÉ¬≤X·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º (h‚Å±-force-ùë∞ 1‚â§n œÉX·µ¢‚±º‚Å±‚äéœÉ¬≤X·µ¢‚±º‚Å± œÉX·µ¢‚±º‚â§œÉ¬≤X·µ¢‚±º)) ‚ü©
  h‚Å± (œÉ X k j)                    <‚ü® reduction X d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ k j ‚ä§ (<-wellFounded ‚à£ ‚ä§ {n = n} ‚à£) (Œª l‚àâ‚ä§ ‚Üí contradiction ‚àà‚ä§ l‚àâ‚ä§) œÉX‚Çñ‚±º‚Å± ‚ü©
  h‚Å± (X r s)   ‚äî h‚Å± (œÉ X r s)     ‚àé





d·µ£‚Å±-strContr·∂ú : ‚àÄ X Y {r s} ‚Üí ùë™‚Çò X ‚Üí
               (‚àÄ {u v} ‚Üí X u v ‚ââ Y u v ‚Üí ùë∞ (X u v) ‚äé ùë∞ (Y u v) ‚Üí d·µ£‚Å± (X u v) (Y u v) ‚â§ d·µ£‚Å± (X r s) (Y r s)) ‚Üí
               ‚àÄ {i j} ‚Üí ùë∞ (œÉ Y i j) ‚Üí d·µ£‚Å± (œÉ X i j) (œÉ Y i j) < d·µ£‚Å± (X r s) (Y r s)
d·µ£‚Å±-strContr·∂ú X Y {r} {s} X·∂ú d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ {i} {j} œÉY·µ¢‚±º‚Å± with œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y _ _ œÉY·µ¢‚±º‚Å±
... | k , œÉY·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º , Y‚Çñ‚±º‚Å± = begin
  h‚Å± (œÉ X i j) ‚äî h‚Å± (œÉ Y i j) ‚â°‚ü® m‚â§n‚áím‚äîn‚â°n (<‚áí‚â§ (h[s·∂ú]<h[r‚Å±] 1‚â§n (œÉ-pres-ùë™‚Çò X·∂ú i j) œÉY·µ¢‚±º‚Å±)) ‚ü©
  h‚Å± (œÉ Y i j)            ‚â°‚ü® h‚Å±-cong 1‚â§n œÉY·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º ‚ü©
  h‚Å± (A i k ‚ñ∑ Y k j)      <‚ü® h‚Å±-decr 1‚â§n (ùë∞-cong œÉY·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º œÉY·µ¢‚±º‚Å±) ‚ü©
  h‚Å± (Y k j)              ‚â§‚ü® n‚â§m‚äîn (h‚Å± (X k j)) (h‚Å± (Y k j)) ‚ü©
  h‚Å± (X k j) ‚äî h‚Å± (Y k j) ‚â§‚ü® d·µ£‚Å±‚â§d·µ£‚Å±X·µ£‚ÇõY·µ£‚Çõ (Y‚Çñ‚±º‚Å± ‚àò (Œª X‚Çñ‚±º‚âàY‚Çñ‚±º ‚Üí ùë™-cong X‚Çñ‚±º‚âàY‚Çñ‚±º (X·∂ú k j))) (inj‚ÇÇ Y‚Çñ‚±º‚Å±) ‚ü©
  h‚Å± (X r s) ‚äî h‚Å± (Y r s) ‚àé


------------------------------------------------------------------------
-- Properties of d·µ£·∂ú

d·µ£·∂ú-strContr : ‚àÄ {X Y r s} ‚Üí X r s ‚ââ Y r s ‚Üí
               (X·∂ú : ùë™‚Çò X) (Y·∂ú : ùë™‚Çò Y) (œÉX·∂ú : ùë™‚Çò (œÉ X)) (œÉY·∂ú : ùë™‚Çò (œÉ Y)) ‚Üí
               (‚àÄ {u v} ‚Üí X u v ‚ââ Y u v ‚Üí
               d·µ£·∂ú (X·∂ú u v) (Y·∂ú u v) ‚â§ d·µ£·∂ú (X·∂ú r s) (Y·∂ú r s)) ‚Üí
               ‚àÄ i j ‚Üí d·µ£·∂ú (œÉX·∂ú i j) (œÉY·∂ú i j) < d·µ£·∂ú (X·∂ú r s) (Y·∂ú r s)
d·µ£·∂ú-strContr {X} {Y} {r} {s} X·µ£‚Çõ‚ââY·µ£‚Çõ X·∂ú Y·∂ú œÉX·∂ú œÉY·∂ú d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ i j = begin
  DV.d (toCMatrix œÉX·∂ú i j) (toCMatrix œÉY·∂ú i j) ‚â°‚ü® DVP.d-cong œÉX·∂ú·µ¢‚±º‚âàœÉ·∂úX'·µ¢‚±º œÉY·∂ú·µ¢‚±º‚âàœÉ·∂úY'·µ¢‚±º ‚ü©
  DV.d (œÉ·∂ú X' i j)         (œÉ·∂ú Y' i j)         <‚ü® DVSC.d-strContr X·µ£‚Çõ‚ââY·µ£‚Çõ less i j ‚ü©
  DV.d (X' r s)            (Y' r s)            ‚â°‚ü®‚ü©
  DV.d (toCMatrix X·∂ú r s)  (toCMatrix Y·∂ú r s)  ‚àé
  where

  open ‚â§-Reasoning

  X' = toCMatrix X·∂ú
  Y' = toCMatrix Y·∂ú

  œÉX·∂ú·µ¢‚±º‚âàœÉ·∂úX'·µ¢‚±º : toCMatrix œÉX·∂ú i j ‚âà·∂ú œÉ·∂ú X' i j
  œÉX·∂ú·µ¢‚±º‚âàœÉ·∂úX'·µ¢‚±º = œÉ-toCMatrix-commute X·∂ú œÉX·∂ú i j

  œÉY·∂ú·µ¢‚±º‚âàœÉ·∂úY'·µ¢‚±º : toCMatrix œÉY·∂ú i j ‚âà·∂ú œÉ·∂ú Y' i j
  œÉY·∂ú·µ¢‚±º‚âàœÉ·∂úY'·µ¢‚±º = œÉ-toCMatrix-commute Y·∂ú œÉY·∂ú i j

  less : ‚àÄ u v ‚Üí X' u v ‚ââ·∂ú Y' u v ‚Üí DV.d (X' u v) (Y' u v) ‚â§ DV.d (X' r s) (Y' r s)
  less u v X'·µ§·µ•‚ââœÉX'·µ§·µ• = d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ X'·µ§·µ•‚ââœÉX'·µ§·µ•

------------------------------------------------------------------------
-- Properties of d·µ£

d·µ£-strContrOrbits‚Å± : ‚àÄ {X i j r s} ‚Üí
                   (‚àÄ u v ‚Üí d·µ£ (X u v) (œÉ X u v) ‚â§ H·∂ú + d·µ£‚Å± (X r s) (œÉ X r s)) ‚Üí
                   d·µ£ (œÉ X i j) (œÉ (œÉ X) i j) < H·∂ú + d·µ£‚Å± (X r s) (œÉ X r s)
d·µ£-strContrOrbits‚Å± {X} {i} {j} {r} {s} d·µ£‚â§H·∂ú+d·µ£‚Å± with œÉ X i j ‚âü œÉ (œÉ X) i j
... | yes œÉX‚Çñ‚âàœÉY‚Çñ = s‚â§s z‚â§n
... | no  œÉX‚Çñ‚ââœÉY‚Çñ with ùë™? (œÉ X i j) | ùë™? (œÉ (œÉ X) i j)
...   | yes œÉX·µ¢‚±º·∂ú | yes œÉ¬≤X·µ¢‚±º·∂ú = d·µ£·∂ú<H·∂ú+x 1‚â§n œÉX·µ¢‚±º·∂ú œÉ¬≤X·µ¢‚±º·∂ú _
...   | no  œÉX·µ¢‚±º‚Å± | _          = +-mono ≥-< H·∂ú (d·µ£‚Å±-strContrOrbits X (d·µ£-force-d·µ£‚Å± 1‚â§n X (œÉ X) d·µ£‚â§H·∂ú+d·µ£‚Å±) (inj‚ÇÅ œÉX·µ¢‚±º‚Å±))
...   | yes _     | no  œÉ¬≤X·µ¢‚±º‚Å± = +-mono ≥-< H·∂ú (d·µ£‚Å±-strContrOrbits X (d·µ£-force-d·µ£‚Å± 1‚â§n X (œÉ X) d·µ£‚â§H·∂ú+d·µ£‚Å±) (inj‚ÇÇ œÉ¬≤X·µ¢‚±º‚Å±))


chain‚ÇÉ : ‚àÄ X i j k ‚Üí ùë∞ (œÉ X i j) ‚Üí œÉ X i j ‚âà A i k ‚ñ∑ X k j ‚Üí
         X k j ‚âà œÉ X k j ‚Üí size (œÉ X k j) < size (œÉ X i j)
chain‚ÇÉ X i j k œÉX·µ¢‚±º‚Å± œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º X‚Çñ‚±º‚âàœÉX‚Çñ‚±º
  with ‚âà-trans œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º (‚ñ∑-cong (A i k) X‚Çñ‚±º‚âàœÉX‚Çñ‚±º)
... | œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º = begin
    size (œÉ X k j)         <‚ü® ‚â§-reflexive (size‚Å±-incr (ùë∞-cong œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º œÉX·µ¢‚±º‚Å±)) ‚ü©
    size (A i k ‚ñ∑ œÉ X k j) ‚â°‚ü® sym (size-cong œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑œÉX‚Çñ‚±º) ‚ü©
    size (œÉ X i j)         ‚àé
    where open ‚â§-Reasoning


reduction‚ÇÇ : ‚àÄ X l j ‚Üí ùë∞ (œÉ X l j) ‚Üí Acc _<_ (size (œÉ X l j)) ‚Üí
            ‚àÉ Œª k ‚Üí H·∂ú < d·µ£ (X k j) (œÉ X k j)
reduction‚ÇÇ X l j œÉX‚Çó‚±º‚Å± (acc rec) with œÉX·µ¢‚±º‚Å±‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º X _ _ œÉX‚Çó‚±º‚Å±
... | (k , œÉX‚Çó‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º , X‚Çñ‚±º‚Å±) with X k j ‚âü œÉ X k j
...   | no  X‚Çñ‚±º‚ââœÉX‚Çñ‚±º = k , H<d·µ£ 1‚â§n X‚Çñ‚±º‚ââœÉX‚Çñ‚±º (inj‚ÇÅ X‚Çñ‚±º‚Å±)
...   | yes X‚Çñ‚±º‚âàœÉX‚Çñ‚±º with chain‚ÇÉ X l j k œÉX‚Çó‚±º‚Å± œÉX‚Çó‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º X‚Çñ‚±º‚âàœÉX‚Çñ‚±º
...     | |œÉX‚Çñ‚±º|<|œÉX‚Çó‚±º| = reduction‚ÇÇ X k j
    (ùë∞-cong X‚Çñ‚±º‚âàœÉX‚Çñ‚±º X‚Çñ‚±º‚Å±) (rec (size (œÉ X k j)) |œÉX‚Çñ‚±º|<|œÉX‚Çó‚±º|)

force-X·∂ú : ‚àÄ X ‚Üí (‚àÄ u v ‚Üí d·µ£ (X u v) (œÉ X u v) < H·∂ú) ‚Üí ùë™‚Çò X
force-X·∂ú X d·µ£<H i j with ùë™? (X i j)
... | yes X·µ¢‚±º·∂ú = X·µ¢‚±º·∂ú
... | no  X·µ¢‚±º‚Å± with X i j ‚âü œÉ X i j
...   | no  X·µ¢‚±º‚ââœÉX·µ¢‚±º = contradiction (<‚áí‚â§ (H<d·µ£ 1‚â§n X·µ¢‚±º‚ââœÉX·µ¢‚±º (inj‚ÇÅ X·µ¢‚±º‚Å±))) (<‚áí‚â± (d·µ£<H i j))
...   | yes X·µ¢‚±º‚âàœÉX·µ¢‚±º with reduction‚ÇÇ X i j (ùë∞-cong X·µ¢‚±º‚âàœÉX·µ¢‚±º X·µ¢‚±º‚Å±) (<-wellFounded (size (œÉ X i j)))
...     | k , H·∂ú<d·µ£X‚Çñ‚±ºœÉX‚Çñ‚±º = contradiction H·∂ú<d·µ£X‚Çñ‚±ºœÉX‚Çñ‚±º (<‚áí‚âØ (d·µ£<H k j))




d·µ£-strContrOrbits·∂ú : ‚àÄ {X r s i j} ‚Üí X r s ‚ââ œÉ X r s ‚Üí (X·µ£‚Çõ·∂ú : ùë™ (X r s)) (œÉX·µ£‚Çõ·∂ú : ùë™ (œÉ X r s)) ‚Üí
                     (‚àÄ u v ‚Üí d·µ£ (X u v) (œÉ X u v) ‚â§ d·µ£·∂ú X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú) ‚Üí
                     d·µ£ (œÉ X i j) (œÉ (œÉ X) i j) < d·µ£·∂ú X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú
d·µ£-strContrOrbits·∂ú {X} {r} {s} {i} {j}  X·µ£‚Çõ‚ââœÉX·µ£‚Çõ X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú d·µ£‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ with œÉ X i j ‚âü œÉ (œÉ X) i j
... | yes œÉX·µ¢‚±º‚âàœÉ¬≤X·µ¢‚±º = n‚â¢0‚áí0<n (X·µ£‚Çõ‚ââœÉX·µ£‚Çõ ‚àò d·µ£·∂ú‚â°0‚áíx‚âày 1‚â§n X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú)
... | no  œÉX·µ¢‚±º‚ââœÉ¬≤X·µ¢‚±º with force-X·∂ú X (Œª u v ‚Üí <-trans ≥ (d·µ£‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ u v) (d·µ£·∂ú<H·∂ú 1‚â§n _ _))
...   | X·∂ú with œÉ-pres-ùë™‚Çò X·∂ú
...     | œÉX·∂ú with œÉ-pres-ùë™‚Çò œÉX·∂ú
...       | œÉ¬≤X·∂ú with ùë™? (œÉ X i j) | ùë™? (œÉ (œÉ X) i j)
...         | no  œÉX·µ¢‚±º‚Å± | _           = contradiction (œÉX·∂ú i j) œÉX·µ¢‚±º‚Å±
...         | yes _     | no  œÉ¬≤X·µ¢‚±º‚Å±  = contradiction (œÉ¬≤X·∂ú i j) œÉ¬≤X·µ¢‚±º‚Å±
...         | yes œÉX·µ¢‚±º·∂ú  | yes œÉ¬≤X·µ¢‚±º·∂ú  = begin
  d·µ£·∂ú œÉX·µ¢‚±º·∂ú œÉ¬≤X·µ¢‚±º·∂ú          ‚â°‚ü® d·µ£·∂ú-cong 1‚â§n _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
  d·µ£·∂ú (œÉX·∂ú i j) (œÉ¬≤X·∂ú i j) <‚ü® d·µ£·∂ú-strContr X·µ£‚Çõ‚ââœÉX·µ£‚Çõ X·∂ú œÉX·∂ú œÉX·∂ú œÉ¬≤X·∂ú d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ i j ‚ü©
  d·µ£·∂ú (X·∂ú r s) (œÉX·∂ú r s)   ‚â°‚ü® d·µ£·∂ú-cong 1‚â§n _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
  d·µ£·∂ú X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú           ‚àé
  where

  open ‚â§-Reasoning

  d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ : ‚àÄ {u v} ‚Üí X u v ‚ââ œÉ X u v ‚Üí d·µ£·∂ú (X·∂ú u v) (œÉX·∂ú u v) ‚â§ d·µ£·∂ú (X·∂ú r s) (œÉX·∂ú r s)
  d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ {u} {v} X·µ§·µ•‚ââœÉX·µ§·µ• = begin
    d·µ£·∂ú (X·∂ú u v) (œÉX·∂ú u v) ‚â§‚ü® d·µ£·∂ú‚â§d·µ£ 1‚â§n X·µ§·µ•‚ââœÉX·µ§·µ• _ _ ‚ü©
    d·µ£ (X u v) (œÉ X u v)  ‚â§‚ü® d·µ£‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ u v ‚ü©
    d·µ£·∂ú X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú         ‚â°‚ü® d·µ£·∂ú-cong 1‚â§n _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
    d·µ£·∂ú (X·∂ú r s) (œÉX·∂ú r s) ‚àé

d·µ£-strContrOrbits : ‚àÄ {X r s} ‚Üí X r s ‚ââ œÉ X r s ‚Üí
                    (‚àÄ u v ‚Üí d·µ£ (X u v) (œÉ X u v) ‚â§ d·µ£ (X r s) (œÉ X r s)) ‚Üí
                    ‚àÄ i j ‚Üí d·µ£ (œÉ X i j) (œÉ (œÉ X) i j) < d·µ£ (X r s) (œÉ X r s)
d·µ£-strContrOrbits {X} {r} {s} X·µ£‚Çõ‚ââœÉX·µ£‚Çõ d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ i j with X r s ‚âü œÉ X r s
... | yes X·µ£‚Çõ‚âàœÉX·µ£‚Çõ = contradiction X·µ£‚Çõ‚âàœÉX·µ£‚Çõ X·µ£‚Çõ‚ââœÉX·µ£‚Çõ
... | no  _        with ùë™? (X r s) | ùë™? (œÉ X r s)
...   | yes X·µ£‚Çõ·∂ú | yes œÉX·µ£‚Çõ·∂ú = d·µ£-strContrOrbits·∂ú X·µ£‚Çõ‚ââœÉX·µ£‚Çõ X·µ£‚Çõ·∂ú œÉX·µ£‚Çõ·∂ú d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ
...   | no  _    | _        = d·µ£-strContrOrbits‚Å± d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ
...   | yes _    | no  _    = d·µ£-strContrOrbits‚Å± d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ





-- Strictly contracting when one of the arguments is consistent


force-Y·∂ú : ‚àÄ {X Y r s} ‚Üí ùë™‚Çò X ‚Üí
           (X·µ£‚Çõ·∂ú : ùë™ (X r s)) (Y·µ£‚Çõ·∂ú : ùë™ (Y r s)) ‚Üí
           (‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ d·µ£·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú) ‚Üí
           ùë™‚Çò Y
force-Y·∂ú {X} {Y} X·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú d·µ£‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ i j with X i j ‚âü Y i j
... | yes X·µ¢‚±º‚âàY·µ¢‚±º = ùë™-cong X·µ¢‚±º‚âàY·µ¢‚±º (X·∂ú i j)
... | no  X·µ¢‚±º‚ââY·µ¢‚±º with ùë™? (Y i j)
...   | yes Y·µ¢‚±º·∂ú = Y·µ¢‚±º·∂ú
...   | no  Y·µ¢‚±º‚Å± = contradiction (d·µ£‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ i j) (<‚áí‚â± (d·µ£·∂ú<d·µ£ 1‚â§n X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú X·µ¢‚±º‚ââY·µ¢‚±º (inj‚ÇÇ Y·µ¢‚±º‚Å±)))

d·µ£-strContr·∂ú·∂ú : ‚àÄ {X Y r s} ‚Üí X r s ‚ââ Y r s ‚Üí ùë™‚Çò X ‚Üí
                (X·µ£‚Çõ·∂ú : ùë™ (X r s)) (Y·µ£‚Çõ·∂ú : ùë™ (Y r s)) ‚Üí
                (‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ d·µ£·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú) ‚Üí
                ‚àÄ i j ‚Üí d·µ£ (œÉ X i j) (œÉ Y i j) < d·µ£·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú
d·µ£-strContr·∂ú·∂ú {X} {Y} {r} {s}  X·µ£‚Çõ‚ââY·µ£‚Çõ X·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú d·µ£‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ i j
  with œÉ X i j ‚âü œÉ Y i j
... | yes œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º = n‚â¢0‚áí0<n (X·µ£‚Çõ‚ââY·µ£‚Çõ ‚àò d·µ£·∂ú‚â°0‚áíx‚âày 1‚â§n X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú)
... | no  œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º with force-Y·∂ú X·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú d·µ£‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ
...   | Y·∂ú with œÉ-pres-ùë™‚Çò X·∂ú |  œÉ-pres-ùë™‚Çò Y·∂ú
...       | œÉX·∂ú | œÉY·∂ú with ùë™? (œÉ X i j) | ùë™? (œÉ Y i j)
...         | no  œÉX·µ¢‚±º‚Å± | _         = contradiction (œÉX·∂ú i j) œÉX·µ¢‚±º‚Å±
...         | yes _     | no  œÉY·µ¢‚±º‚Å± = contradiction (œÉY·∂ú i j) œÉY·µ¢‚±º‚Å±
...         | yes œÉX·µ¢‚±º·∂ú | yes œÉY·µ¢‚±º·∂ú = begin
  d·µ£·∂ú œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú         ‚â°‚ü® d·µ£·∂ú-cong 1‚â§n _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
  d·µ£·∂ú (œÉX·∂ú i j) (œÉY·∂ú i j) <‚ü® d·µ£·∂ú-strContr X·µ£‚Çõ‚ââY·µ£‚Çõ X·∂ú Y·∂ú œÉX·∂ú œÉY·∂ú d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ i j ‚ü©
  d·µ£·∂ú (X·∂ú r s) (Y·∂ú r s)   ‚â°‚ü® d·µ£·∂ú-cong 1‚â§n _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
  d·µ£·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú           ‚àé
  where

  open ‚â§-Reasoning

  d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ : ‚àÄ {u v} ‚Üí X u v ‚ââ Y u v ‚Üí
                   d·µ£·∂ú (X·∂ú u v) (Y·∂ú u v) ‚â§ d·µ£·∂ú (X·∂ú r s) (Y·∂ú r s)
  d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ {u} {v} X·µ§·µ•‚ââY·µ§·µ• = begin
    d·µ£·∂ú (X·∂ú u v) (Y·∂ú u v) ‚â§‚ü® d·µ£·∂ú‚â§d·µ£ 1‚â§n X·µ§·µ•‚ââY·µ§·µ• _ _ ‚ü©
    d·µ£  (X u v)  (Y u v)  ‚â§‚ü® d·µ£‚â§d·µ£·∂úX·µ£‚ÇõY·µ£‚Çõ u v ‚ü©
    d·µ£·∂ú X·µ£‚Çõ·∂ú     Y·µ£‚Çõ·∂ú     ‚â°‚ü® d·µ£·∂ú-cong 1‚â§n _ _ _ _ ‚âà-refl ‚âà-refl ‚ü©
    d·µ£·∂ú (X·∂ú r s) (Y·∂ú r s) ‚àé

d·µ£-strContr·∂ú‚Å± : ‚àÄ {X Y : RoutingMatrix} {r s} ‚Üí ùë™‚Çò X ‚Üí ùë∞ (Y r s) ‚Üí
                (‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ H·∂ú + d·µ£‚Å± (X r s) (Y r s)) ‚Üí
                ‚àÄ i j ‚Üí d·µ£ (œÉ X i j) (œÉ Y i j) < H·∂ú + d·µ£‚Å± (X r s) (Y r s)
d·µ£-strContr·∂ú‚Å± {X} {Y} {r} {s} X·∂ú Y·µ£‚Çõ‚Å± d·µ£‚â§H·∂ú+d·µ£‚Å± i j with œÉ X i j ‚âü œÉ Y i j
... | yes œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º = s‚â§s z‚â§n
... | no  œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º with ùë™? (œÉ X i j) | ùë™? (œÉ Y i j)
...   | yes œÉX·µ¢‚±º·∂ú | yes œÉY·µ¢‚±º·∂ú = d·µ£·∂ú<H·∂ú+x 1‚â§n œÉX·µ¢‚±º·∂ú œÉY·µ¢‚±º·∂ú _
...   | yes _     | no  œÉY·µ¢‚±º‚Å± = +-mono ≥-< H·∂ú (d·µ£‚Å±-strContr·∂ú X Y X·∂ú (d·µ£-force-d·µ£‚Å± 1‚â§n X Y d·µ£‚â§H·∂ú+d·µ£‚Å±) œÉY·µ¢‚±º‚Å±)
...   | no  œÉX·µ¢‚±º‚Å± | _         = contradiction (œÉ-pres-ùë™‚Çò X·∂ú i j) œÉX·µ¢‚±º‚Å±

  --(d·µ£‚Å±-strContrOrbits X (d·µ£-force-d·µ£‚Å± X d·µ£‚â§H·∂ú+d·µ£‚Å±) (inj‚ÇÇ œÉ¬≤X·µ¢‚±º‚Å±))

d·µ£-strContr·∂ú : ‚àÄ {X Y r s} ‚Üí ùë™‚Çò X ‚Üí X r s ‚ââ Y r s ‚Üí
              (‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ d·µ£ (X r s) (Y r s)) ‚Üí
              ‚àÄ i j ‚Üí d·µ£ (œÉ X i j) (œÉ Y i j) < d·µ£ (X r s) (Y r s)
d·µ£-strContr·∂ú {X} {Y} {r} {s} X·∂ú X·µ£‚Çõ‚ââY·µ£‚Çõ d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ with X r s ‚âü Y r s
... | yes X·µ£‚Çõ‚âàY·µ£‚Çõ = contradiction X·µ£‚Çõ‚âàY·µ£‚Çõ X·µ£‚Çõ‚ââY·µ£‚Çõ
... | no  _        with ùë™? (X r s) | ùë™? (Y r s)
...   | yes X·µ£‚Çõ·∂ú | yes Y·µ£‚Çõ·∂ú = d·µ£-strContr·∂ú·∂ú X·µ£‚Çõ‚ââY·µ£‚Çõ X·∂ú X·µ£‚Çõ·∂ú Y·µ£‚Çõ·∂ú d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ
...   | yes _    | no  Y·µ£‚Çõ‚Å± = d·µ£-strContr·∂ú‚Å± X·∂ú Y·µ£‚Çõ‚Å± d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ
...   | no  X·µ£‚Çõ‚Å± | _        = contradiction (X·∂ú r s) X·µ£‚Çõ‚Å±


------------------------------------------------------------------------
-- Properties of d·µ£


-- Strictly contracting

open Metric ‚ÑùùïÑ‚Çõ using (_StrContrOnOrbitsOver_; _StrContrOnFixedPointOver_)

œÉ-strContrOrbits : œÉ StrContrOnOrbitsOver D
œÉ-strContrOrbits {X} œÉX‚ââX with max[t]‚ààt 0 (Œª i ‚Üí d‚Çú (X i) (œÉ X i))
... | inj‚ÇÅ dXœÉX‚â°0              = contradiction (‚âà‚Çò-sym (D‚â°0‚áíX‚âàY 1‚â§n dXœÉX‚â°0)) œÉX‚ââX
... | inj‚ÇÇ (r , DXœÉX‚â°d‚ÇúX·µ£œÉX·µ£) with max[t]‚ààt 0 (Œª i ‚Üí d·µ£ (X r i) (œÉ X r i))
...   | inj‚ÇÅ dX·µ£œÉX·µ£‚â°0               = contradiction (‚âà‚Çò-sym (D‚â°0‚áíX‚âàY 1‚â§n (trans DXœÉX‚â°d‚ÇúX·µ£œÉX·µ£ dX·µ£œÉX·µ£‚â°0))) œÉX‚ââX
...   | inj‚ÇÇ (s , dX·µ£œÉX·µ£‚â°d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ) = begin
  D (œÉ X) (œÉ (œÉ X))   <‚ü® test ‚ü©
  d·µ£ (X r s) (œÉ X r s) ‚â°‚ü® sym DXœÉX‚âàd·µ£X·µ£‚ÇõœÉX·µ£‚Çõ ‚ü©
  D X (œÉ X)            ‚àé
  where
  open ‚â§-Reasoning

  DXœÉX‚âàd·µ£X·µ£‚ÇõœÉX·µ£‚Çõ : D X (œÉ X) ‚â° d·µ£ (X r s) (œÉ X r s)
  DXœÉX‚âàd·µ£X·µ£‚ÇõœÉX·µ£‚Çõ = trans DXœÉX‚â°d‚ÇúX·µ£œÉX·µ£ dX·µ£œÉX·µ£‚â°d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ

  X·µ£‚Çõ‚ââœÉX·µ£‚Çõ : X r s ‚ââ œÉ X r s
  X·µ£‚Çõ‚ââœÉX·µ£‚Çõ X·µ£‚Çõ‚âàœÉX·µ£‚Çõ = œÉX‚ââX (‚âà‚Çò-sym (D‚â°0‚áíX‚âàY 1‚â§n (trans DXœÉX‚âàd·µ£X·µ£‚ÇõœÉX·µ£‚Çõ (x‚âày‚áíd·µ£‚â°0 1‚â§n X·µ£‚Çõ‚âàœÉX·µ£‚Çõ))))

  d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ : ‚àÄ u v ‚Üí d·µ£ (X u v) (œÉ X u v) ‚â§ d·µ£ (X r s) (œÉ X r s)
  d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ u v = begin
    d·µ£ (X u v) (œÉ X u v)  ‚â§‚ü® MaxLift.d·µ¢‚â§d ‚Ñùùïã‚Çõ‚Å± d·µ£ (X u) (œÉ X u) v ‚ü©
    d‚Çú (X u)   (œÉ X u)   ‚â§‚ü® MaxLift.d·µ¢‚â§d ‚ÑùùïÑ‚Çõ‚Å± d‚Çú X (œÉ X) u ‚ü©
    D X (œÉ X)            ‚â°‚ü® DXœÉX‚âàd·µ£X·µ£‚ÇõœÉX·µ£‚Çõ ‚ü©
    d·µ£ (X r s) (œÉ X r s) ‚àé

  0<d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ : 0 < d·µ£ (X r s) (œÉ X r s)
  0<d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ = n‚â¢0‚áí0<n (X·µ£‚Çõ‚ââœÉX·µ£‚Çõ ‚àò d·µ£‚â°0‚áíx‚âày 1‚â§n)

  test : D (œÉ X) (œÉ (œÉ X)) < d·µ£ (X r s) (œÉ X r s)
  test = max[t]<x 0<d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ (Œª i ‚Üí
           max[t]<x 0<d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ (Œª j ‚Üí
             d·µ£-strContrOrbits X·µ£‚Çõ‚ââœÉX·µ£‚Çõ d·µ£‚â§d·µ£X·µ£‚ÇõœÉX·µ£‚Çõ i j))




-- Strictly contracting when one of the arguments is consistent

œÉ-strContr·∂ú : ‚àÄ {X Y} ‚Üí ùë™‚Çò X ‚Üí X ‚ââ‚Çò Y ‚Üí D (œÉ X) (œÉ Y) < D X Y
œÉ-strContr·∂ú {X} {Y} X·∂ú X‚ââY with max[t]‚ààt 0 (Œª i ‚Üí d‚Çú (X i) (Y i))
... | inj‚ÇÅ dXY‚â°0              = contradiction (D‚â°0‚áíX‚âàY 1‚â§n dXY‚â°0) X‚ââY
... | inj‚ÇÇ (r , DXY‚â°d‚ÇúX·µ£Y·µ£) with max[t]‚ààt 0 (Œª i ‚Üí d·µ£ (X r i) (Y r i))
...   | inj‚ÇÅ dX·µ£Y·µ£‚â°0               = contradiction (D‚â°0‚áíX‚âàY 1‚â§n (trans DXY‚â°d‚ÇúX·µ£Y·µ£ dX·µ£Y·µ£‚â°0)) X‚ââY
...   | inj‚ÇÇ (s , dX·µ£Y·µ£‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ) = begin
  D  (œÉ X)   (œÉ Y)   <‚ü® test ‚ü©
  d·µ£ (X r s) (Y r s) ‚â°‚ü® sym DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ ‚ü©
  D  X       Y       ‚àé
  where
  open ‚â§-Reasoning

  DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ : D X Y ‚â° d·µ£ (X r s) (Y r s)
  DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ = trans DXY‚â°d‚ÇúX·µ£Y·µ£ dX·µ£Y·µ£‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ

  X·µ£‚Çõ‚ââY·µ£‚Çõ : X r s ‚ââ Y r s
  X·µ£‚Çõ‚ââY·µ£‚Çõ X·µ£‚Çõ‚âàY·µ£‚Çõ = X‚ââY (D‚â°0‚áíX‚âàY 1‚â§n (trans DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ (x‚âày‚áíd·µ£‚â°0 1‚â§n X·µ£‚Çõ‚âàY·µ£‚Çõ)))

  d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ : ‚àÄ u v ‚Üí d·µ£ (X u v) (Y u v) ‚â§ d·µ£ (X r s) (Y r s)
  d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ u v = begin
    d·µ£ (X u v) (Y u v) ‚â§‚ü® MaxLift.d·µ¢‚â§d ‚Ñùùïã‚Çõ‚Å± d·µ£ (X u) (Y u) v ‚ü©
    d‚Çú (X u)   (Y u)   ‚â§‚ü® MaxLift.d·µ¢‚â§d ‚ÑùùïÑ‚Çõ‚Å± d‚Çú X (Y) u ‚ü©
    D X (Y)           ‚â°‚ü® DXY‚âàd·µ£X·µ£‚ÇõY·µ£‚Çõ ‚ü©
    d·µ£ (X r s) (Y r s) ‚àé

  0<d·µ£X·µ£‚ÇõY·µ£‚Çõ : 0 < d·µ£ (X r s) (Y r s)
  0<d·µ£X·µ£‚ÇõY·µ£‚Çõ = n‚â¢0‚áí0<n (X·µ£‚Çõ‚ââY·µ£‚Çõ ‚àò d·µ£‚â°0‚áíx‚âày 1‚â§n)

  test : D (œÉ X) (œÉ Y) < d·µ£ (X r s) (Y r s)
  test = max[t]<x 0<d·µ£X·µ£‚ÇõY·µ£‚Çõ (Œª i ‚Üí
           max[t]<x 0<d·µ£X·µ£‚ÇõY·µ£‚Çõ (Œª j ‚Üí
             d·µ£-strContr·∂ú X·∂ú X·µ£‚Çõ‚ââY·µ£‚Çõ d·µ£‚â§d·µ£X·µ£‚ÇõY·µ£‚Çõ i j))


œÉ-strContrOnFP : œÉ StrContrOnFixedPointOver D
œÉ-strContrOnFP {X} {X*} œÉX*‚âàX* X‚ââX* = begin
  D X*     (œÉ X) ‚â°‚ü® D-cong 1‚â§n (‚âà‚Çò-sym œÉX*‚âàX*) (‚âà‚Çò-refl {x = œÉ X}) ‚ü©
  D (œÉ X*) (œÉ X) <‚ü® œÉ-strContr·∂ú (fixedPoint·∂ú œÉX*‚âàX*) (X‚ââX* ‚àò ‚âà‚Çò-sym) ‚ü©
  D X*     X     ‚àé
  where open ‚â§-Reasoning
