open import Schedule
  using (Schedule; ùïã)
open import Data.Nat
  using (‚Ñï; zero; suc; _‚à∏_; _‚â§_; _+_; s‚â§s)
open import Data.Fin
  using (Fin)
open import Schedule.Synchronous
  using (Œ±‚ÇÄ) renaming (Œ± to Œ±-sync; nonstarvation to nonstarvation-sync)
open import Schedule.RoundRobin
  using () renaming (Œ± to Œ±-rr; nonstarvation to nonstarvation-rr)
open import Data.Nat.Properties
  using (n‚à∏m‚â§n; <‚áí‚â¢; m+n‚à∏n‚â°m; +-suc; m‚â§m+n; +-comm; +-assoc)
open import Data.Product
  using (‚àÉ; _,_)
open import Relation.Binary.PropositionalEquality
  using (_‚â¢_; _‚â°_; subst; cong; cong‚ÇÇ; refl; sym; trans)
open import Function
  using (_‚àò_)

open Relation.Binary.PropositionalEquality.‚â°-Reasoning
  using (begin_; _‚â°‚ü®_‚ü©_; _‚àé)

module Schedule.Latency (l : ‚Ñï) where

  Œ≤ : {n : ‚Ñï} ‚Üí ùïã ‚Üí Fin n ‚Üí ùïã
  Œ≤ t _ = t ‚à∏ 1 ‚à∏ l 

  causality : {n : ‚Ñï} ‚Üí ‚àÄ t (i : Fin n) ‚Üí Œ≤ (suc t) i ‚â§ t
  causality t i = n‚à∏m‚â§n l t

  finite : {n : ‚Ñï} ‚Üí ‚àÄ t (i : Fin n) ‚Üí ‚àÉ Œª k ‚Üí ‚àÄ k‚ÇÅ ‚Üí Œ≤ (t + k + k‚ÇÅ) i ‚â¢ t
  finite t i = suc (suc l) , Œª k ‚Üí subst (_‚â¢ t)
           (sym (trans
             (cong‚ÇÇ Œ≤ {u = i}
             (begin
               t + suc (suc l) + k ‚â°‚ü® +-assoc t (suc (suc l)) k ‚ü©
               t + (suc (suc l) + k) ‚â°‚ü® cong (t +_) (begin
                   suc (suc l) + k ‚â°‚ü® +-comm (suc (suc l)) k ‚ü©
                   k + suc (suc l) ‚â°‚ü® +-suc k (suc l) ‚ü©
                   suc (k + suc l) ‚â°‚ü® cong suc (+-suc k l) ‚ü©
                   suc (suc k + l) ‚àé
                   ) ‚ü©
               t + suc (suc k + l) ‚â°‚ü® +-suc t (suc k + l) ‚ü©
               suc (t + (suc k + l)) ‚â°‚ü® cong suc (sym (+-assoc t (suc k) l)) ‚ü©
               suc (t + suc k + l) ‚àé)
             refl)
             (m+n‚à∏n‚â°m (t + suc k) l)))
           ((<‚áí‚â¢ (subst (suc t ‚â§_) (sym (+-suc t k)) (s‚â§s (m‚â§m+n t k)))) ‚àò sym)

  latency-sync-schedule : (n : ‚Ñï) ‚Üí Schedule n
  latency-sync-schedule n = record {
    Œ± = Œ±-sync ;
    Œ±‚ÇÄ = Œ±‚ÇÄ ;
    Œ≤ = Œ≤ ;
    causality = causality ;
    nonstarvation = nonstarvation-sync;
    finite = finite
    }

  latency-rr-schedule : (n : ‚Ñï) ‚Üí Schedule (suc n)
  latency-rr-schedule n = record {
    Œ± = Œ±-rr ;
    Œ±‚ÇÄ = Œ±‚ÇÄ ;
    Œ≤ = Œ≤ ;
    causality = causality ;
    nonstarvation = nonstarvation-rr;
    finite = finite
    }
  
