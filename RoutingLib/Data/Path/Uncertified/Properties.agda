open import Data.List.Any using (any; there; here)
open import Data.Maybe using (just; nothing)
open import Data.Nat
open import Data.Nat.Properties
open import Data.Fin.Properties using (pigeonhole)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Product using (_,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ)
open import Level using (0‚Ñì)
open import Function using (_‚àò_)
open import Relation.Binary.Product.Pointwise using (‚â°?√ó‚â°?‚áí‚â°?)
open import Relation.Binary hiding (NonEmpty)
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary.Negation using (¬¨?)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)

open import RoutingLib.Data.Nat.Properties using (<‚áí‚â§suc)
import RoutingLib.Relation.Binary.Construct.NonStrictToStrict.DecTotalOrder as ToStrict

open import RoutingLib.Data.Path.Uncertified

module RoutingLib.Data.Path.Uncertified.Properties where

----------------------------------------------------------------------------
-- Edges

_‚âü‚Çë_ : Decidable {A = Edge} _‚â°_
_‚âü‚Çë_ = ‚â°?√ó‚â°?‚áí‚â°? _‚âü_ _‚âü_

ùïç‚Çõ : Setoid _ _
ùïç‚Çõ = setoid Vertex

ùîº‚Çõ : Setoid _ _
ùîº‚Çõ = setoid Edge

----------------------------------------------------------------------------
-- Linking

_‚áø?_ : Decidable _‚áø_
(i , j) ‚áø? [] with i ‚âü j
... | yes i‚â°j = no  Œª{(start i‚â¢j) ‚Üí i‚â¢j i‚â°j}
... | no  i‚â¢j = yes (start i‚â¢j)
(i , j) ‚áø? ((k , l) ‚à∑ p) with i ‚âü j | j ‚âü k
... | yes i‚â°j | _        = no Œª{(continue i‚â¢j) ‚Üí i‚â¢j i‚â°j}
... | no  _   | no  j‚â¢k  = no Œª{(continue _) ‚Üí j‚â¢k refl}
... | no  i‚â¢j | yes refl = yes (continue i‚â¢j)

‚áø-resp-‚âà‚Çö : ‚àÄ {e} ‚Üí (e ‚áø_) Respects _‚âà‚Çö_
‚áø-resp-‚âà‚Çö refl e‚áøp = e‚áøp

ij‚áøp‚áíi‚â¢j : ‚àÄ {i j p} ‚Üí (i , j) ‚áø p ‚Üí i ‚â¢ j
ij‚áøp‚áíi‚â¢j (start    i‚â¢j) = i‚â¢j
ij‚áøp‚áíi‚â¢j (continue i‚â¢j) = i‚â¢j

‚áø-source : ‚àÄ {i j p} ‚Üí i ‚â¢ j ‚Üí source p ‚â° just j ‚Üí (i , j) ‚áø p
‚áø-source {p = []}    i‚â¢j ()
‚áø-source {p = x ‚à∑ p} i‚â¢j refl = continue i‚â¢j

p‚ÇÄ‚â°n‚áíp‚â°[] : ‚àÄ {p} ‚Üí source p ‚â° nothing ‚Üí p ‚â° []
p‚ÇÄ‚â°n‚áíp‚â°[] {[]}    refl = refl
p‚ÇÄ‚â°n‚áíp‚â°[] {x ‚à∑ p} ()

----------------------------------------------------------------------------
-- Membership

_‚àà‚Çë?_ : Decidable _‚àà‚Çë_
k ‚àà‚Çë? (i , j) with k ‚âü i | k ‚âü j
... | yes refl | _        = yes left
... | _        | yes refl = yes right
... | no  k‚â¢i  | no  k‚â¢j  = no Œª
  { left  ‚Üí k‚â¢i refl
  ; right ‚Üí k‚â¢j refl
  }

_‚àà‚Çö?_ : Decidable _‚àà‚Çö_
k ‚àà‚Çö? p = any (k ‚àà‚Çë?_) p

‚àâ‚Çö-resp-‚âà‚Çö : ‚àÄ {k} ‚Üí (k ‚àâ‚Çö_) Respects _‚â°_
‚àâ‚Çö-resp-‚âà‚Çö refl k‚àâp = k‚àâp

‚àà-source : ‚àÄ {p i} ‚Üí source p ‚â° just i ‚Üí i ‚àà‚Çö p
‚àà-source {[]}    ()
‚àà-source {x ‚à∑ p} refl = here left

----------------------------------------------------------------------------
-- Equality

p‚ââi‚à∑p : ‚àÄ {e p} ‚Üí ¬¨ (p ‚âà‚Çö e ‚à∑ p)
p‚ââi‚à∑p {p}    ()

_‚âü‚Çö_ : Decidable _‚âà‚Çö_
[]      ‚âü‚Çö []      = yes refl
[]      ‚âü‚Çö (k ‚à∑ q) = no Œª()
(i ‚à∑ p) ‚âü‚Çö []      = no Œª()
(i ‚à∑ p) ‚âü‚Çö (k ‚à∑ q) with i ‚âü‚Çë k | p ‚âü‚Çö q
... | no  i‚â¢k  | _        = no (Œª{refl ‚Üí i‚â¢k refl})
... | _        | no  p‚â¢q  = no (Œª{refl ‚Üí p‚â¢q refl})
... | yes refl | yes refl = yes refl

‚â°‚Çö-isDecEquivalence : IsDecEquivalence _‚âà‚Çö_
‚â°‚Çö-isDecEquivalence = record
  { isEquivalence = isEquivalence
  ; _‚âü_           = _‚âü‚Çö_
  }

‚Ñô‚Çõ : Setoid 0‚Ñì 0‚Ñì
‚Ñô‚Çõ = setoid Path

‚Ñô‚Çõ? : DecSetoid 0‚Ñì 0‚Ñì
‚Ñô‚Çõ? = record { isDecEquivalence = ‚â°‚Çö-isDecEquivalence }

----------------------------------------------------------------------------
-- Lexicographic order

‚â§‚Çó‚Çë‚Çì-refl : Reflexive _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-refl {[]}    = stop
‚â§‚Çó‚Çë‚Çì-refl {i ‚à∑ p} = step refl refl ‚â§‚Çó‚Çë‚Çì-refl

‚â§‚Çó‚Çë‚Çì-reflexive : _‚â°_ ‚áí _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-reflexive refl = ‚â§‚Çó‚Çë‚Çì-refl

‚â§‚Çó‚Çë‚Çì-total : Total _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-total p [] = inj‚ÇÇ stop
‚â§‚Çó‚Çë‚Çì-total [] q = inj‚ÇÅ stop
‚â§‚Çó‚Çë‚Çì-total ((i , j) ‚à∑ p) ((l , k) ‚à∑ q) with <-cmp i l
... | tri< i<l _ _ = inj‚ÇÅ (here‚ÇÅ i<l)
... | tri> _ _ l<i = inj‚ÇÇ (here‚ÇÅ l<i)
... | tri‚âà _ i‚â°l _ with <-cmp j k
...   | tri< j<k _ _ = inj‚ÇÅ (here‚ÇÇ i‚â°l j<k)
...   | tri> _ _ j<k = inj‚ÇÇ (here‚ÇÇ (sym i‚â°l) j<k)
...   | tri‚âà _ j‚â°k _ with ‚â§‚Çó‚Çë‚Çì-total p q
...     | inj‚ÇÅ p‚â§q = inj‚ÇÅ (step i‚â°l j‚â°k p‚â§q)
...     | inj‚ÇÇ q‚â§p = inj‚ÇÇ (step (sym i‚â°l) (sym j‚â°k) q‚â§p)

‚â§‚Çó‚Çë‚Çì-trans : Transitive _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-trans stop                  _                     = stop
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (here‚ÇÅ j<k)           = here‚ÇÅ (<-trans i<j j<k)
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (here‚ÇÇ refl j<k)      = here‚ÇÅ i<j
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (step  refl refl q‚â§r) = here‚ÇÅ i<j
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (here‚ÇÅ j<k)           = here‚ÇÅ j<k
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (here‚ÇÇ refl j<k)      = here‚ÇÇ refl (<-trans i<j j<k)
‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (step  refl refl q‚â§r) = here‚ÇÇ refl i<j
‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (here‚ÇÅ j<k)           = here‚ÇÅ j<k
‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (here‚ÇÇ refl j<k)      = here‚ÇÇ refl j<k
‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (step  refl refl q‚â§r) = step refl refl (‚â§‚Çó‚Çë‚Çì-trans p‚â§q q‚â§r)

‚â§‚Çó‚Çë‚Çì-antisym : Antisymmetric _‚âà‚Çö_ _‚â§‚Çó‚Çë‚Çì_
‚â§‚Çó‚Çë‚Çì-antisym stop                  stop                  = refl
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (here‚ÇÅ j<i)           = contradiction i<j (<‚áí‚âØ j<i)
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (here‚ÇÇ refl j<i)      = contradiction i<j 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (step  refl refl p‚â§q) = contradiction i<j 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (here‚ÇÅ j<i)           = contradiction j<i 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (here‚ÇÇ refl j<i)      = contradiction i<j (<‚áí‚âØ j<i)
‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (step  refl refl p‚â§q) = contradiction i<j 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl i<j) (here‚ÇÅ j<i)           = contradiction j<i 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl _)   (here‚ÇÇ _ j<i)         = contradiction j<i 1+n‚â∞n
‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl p‚â§q) (step refl refl q‚â§p)  = cong (_ ‚à∑_) (‚â§‚Çó‚Çë‚Çì-antisym p‚â§q q‚â§p)

_‚â§‚Çó‚Çë‚Çì?_ : Decidable _‚â§‚Çó‚Çë‚Çì_
[] ‚â§‚Çó‚Çë‚Çì? _ = yes stop
(i ‚à∑ p) ‚â§‚Çó‚Çë‚Çì? []          = no Œª()
((i , j) ‚à∑ p) ‚â§‚Çó‚Çë‚Çì? ((k , l) ‚à∑ q) with <-cmp i k | <-cmp j l | p ‚â§‚Çó‚Çë‚Çì? q
... | tri< i<k _   _ | _              | _       = yes (here‚ÇÅ i<k)
... | tri> i‚âÆk i‚â¢k _ | _              | _       = no Œª
  { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
  ; (here‚ÇÇ i‚â°k _)   ‚Üí i‚â¢k i‚â°k
  ; (step  i‚â°k _ _) ‚Üí i‚â¢k i‚â°k
  }
... | tri‚âà _   i‚â°k _ | tri< j<l _   _ | _       = yes (here‚ÇÇ i‚â°k j<l)
... | tri‚âà i‚âÆk _   _ | tri> j‚âÆl j‚â¢l _ | _       = no Œª
  { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
  ; (here‚ÇÇ _ j<l)   ‚Üí j‚âÆl j<l
  ; (step  _ j‚â°l _) ‚Üí j‚â¢l j‚â°l
  }
... | tri‚âà i‚âÆk _   _ | tri‚âà j‚âÆl _ _   | no  p‚â∞q = no Œª
  { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
  ; (here‚ÇÇ _ j<l)   ‚Üí j‚âÆl j<l
  ; (step  _ _ p‚â§q) ‚Üí p‚â∞q p‚â§q
  }
... | tri‚âà _   i‚â°k _ | tri‚âà _ j‚â°l _   | yes p‚â§q = yes (step i‚â°k j‚â°l p‚â§q)

‚â§‚Çó‚Çë‚Çì-decTotalOrder : DecTotalOrder _ _ _
‚â§‚Çó‚Çë‚Çì-decTotalOrder = record
  { isDecTotalOrder = record
    { isTotalOrder = record
      { isPartialOrder = record
        { isPreorder = record
          { isEquivalence = isEquivalence
          ; reflexive     = ‚â§‚Çó‚Çë‚Çì-reflexive
          ; trans         = ‚â§‚Çó‚Çë‚Çì-trans
          }
        ; antisym    = ‚â§‚Çó‚Çë‚Çì-antisym
        }
      ; total        = ‚â§‚Çó‚Çë‚Çì-total
      }
    ; _‚âü_          = _‚âü‚Çö_
    ; _‚â§?_         = _‚â§‚Çó‚Çë‚Çì?_
    }
  }

open ToStrict ‚â§‚Çó‚Çë‚Çì-decTotalOrder public
  using ()
  renaming
  ( <-trans   to <‚Çó‚Çë‚Çì-trans
  ; <-asym    to <‚Çó‚Çë‚Çì-asym
  ; <-irrefl  to <‚Çó‚Çë‚Çì-irrefl
  ; <-respÀ°-‚âà to <‚Çó‚Çë‚Çì-respÀ°-‚âà‚Çö
  ; <-resp ≥-‚âà to <‚Çó‚Çë‚Çì-resp ≥-‚âà‚Çö
  ; <-cmp     to <‚Çó‚Çë‚Çì-cmp
  )

p‚âÆ‚Çó‚Çë‚Çì[] : ‚àÄ {p} ‚Üí ¬¨ (p <‚Çó‚Çë‚Çì [])
p‚âÆ‚Çó‚Çë‚Çì[] {[]}    (_ , []‚ââ[]) = []‚ââ[] refl
p‚âÆ‚Çó‚Çë‚Çì[] {e ‚à∑ p} (() , _)


----------------------------------------------------------------------------
-- length

|p|‚â¢|q|‚áíp‚ââq : ‚àÄ {p q} ‚Üí length p ‚â¢ length q ‚Üí p ‚ââ‚Çö q
|p|‚â¢|q|‚áíp‚ââq {[]}    {[]}    0‚â¢0     = contradiction refl 0‚â¢0
|p|‚â¢|q|‚áíp‚ââq {[]}    {y ‚à∑ q} |p|‚â¢|q| = Œª()
|p|‚â¢|q|‚áíp‚ââq {x ‚à∑ p} {[]}    |p|‚â¢|q| = Œª()
|p|‚â¢|q|‚áíp‚ââq {x ‚à∑ p} {y ‚à∑ q} |p|‚â¢|q| = Œª { refl ‚Üí |p|‚â¢|q| refl }

----------------------------------------------------------------------------
-- inflate

inflate-length : ‚àÄ p n ‚Üí length p ‚â§ length (inflate p n)
inflate-length p       zero    = ‚â§-refl
inflate-length []      (suc n) = ‚â§-refl
inflate-length (x ‚à∑ p) (suc n) = ‚â§-trans (inflate-length (x ‚à∑ p) n) (n‚â§1+n _)

inflate-extract : ‚àÄ p n {i} ‚Üí source p ‚â° just i ‚Üí
                  inflate ((i , i) ‚à∑ p) n ‚â° (i , i) ‚à∑ inflate p n
inflate-extract p       zero    p‚ÇÄ‚â°i = refl
inflate-extract []      (suc n) ()
inflate-extract (x ‚à∑ p) (suc n) refl = cong (_ ‚à∑_) (inflate-extract (x ‚à∑ p) n refl)

inflate-source : ‚àÄ p n {i} ‚Üí source p ‚â° just i ‚Üí
                 source (inflate p n) ‚â° just i
inflate-source p       zero    eq   = eq
inflate-source []      (suc n) ()
inflate-source (x ‚à∑ p) (suc n) refl = refl

inflate-inflate : ‚àÄ p m n ‚Üí inflate (inflate p m) n ‚â° inflate p (m + n)
inflate-inflate p             zero    n       = refl
inflate-inflate []            (suc m) zero    = refl
inflate-inflate []            (suc m) (suc n) = refl
inflate-inflate ((i , j) ‚à∑ p) (suc m) n       = begin
  inflate ((i , i) ‚à∑ inflate ((i , j) ‚à∑ p) m) n ‚â°‚ü® inflate-extract _ n (inflate-source (((i , j) ‚à∑ p)) m refl) ‚ü©
  (i , i) ‚à∑ inflate (inflate ((i , j) ‚à∑ p) m) n ‚â°‚ü® cong ((i , i) ‚à∑_) (inflate-inflate _ m n) ‚ü©
  (i , i) ‚à∑ inflate ((i , j) ‚à∑ p) (m + n)       ‚àé
  where open ‚â°-Reasoning

----------------------------------------------------------------------------
-- deflate

p‚â°[]‚áídeflate[p]‚â°[] : ‚àÄ {p} ‚Üí p ‚â° [] ‚Üí deflate p ‚â° []
p‚â°[]‚áídeflate[p]‚â°[] refl = refl

deflate-inflate-[] : ‚àÄ p n ‚Üí deflate (inflate p n) ‚â° [] ‚Üí deflate p ‚â° []
deflate-inflate-[] []            n       eq = refl
deflate-inflate-[] ((i , j) ‚à∑ p) zero    eq = eq
deflate-inflate-[] ((i , j) ‚à∑ p) (suc n) eq with i ‚âü i
... | no  i‚â¢i = contradiction refl i‚â¢i
... | yes _   with source (deflate (inflate ((i , j) ‚à∑ p) n)) | inspect source (deflate (inflate ((i , j) ‚à∑ p) n))
...   | nothing | [ i‚ÇÄ‚â°nothing ] = deflate-inflate-[] ((i , j) ‚à∑ p) n (p‚ÇÄ‚â°n‚áíp‚â°[] i‚ÇÄ‚â°nothing)
...   | just k  | [ i‚ÇÄ‚â°k ] with i ‚âü k
...     | yes _ = deflate-inflate-[] _ n eq
...     | no  _ = contradiction eq Œª()
{-
deflate-inflate : ‚àÄ p n ‚Üí deflate (inflate p n) ‚â° deflate p
deflate-inflate p             zero    = refl
deflate-inflate []            (suc n) = refl
deflate-inflate ((i , j) ‚à∑ p) (suc n) with i ‚âü i
... | no  i‚â¢i = contradiction refl i‚â¢i
... | yes _   with source (deflate (inflate ((i , j) ‚à∑ p) n)) | inspect source (deflate (inflate ((i , j) ‚à∑ p) n))
...   | nothing | [ i‚ÇÄ‚â°nothing ] = sym (deflate-inflate-[] _ n (p‚ÇÄ‚â°n‚áíp‚â°[] i‚ÇÄ‚â°nothing))
...   | just k  | [ i‚ÇÄ‚â°k ]       with i ‚âü k
...     | yes refl = deflate-inflate ((i , j) ‚à∑ p) n
...     | no  i‚â¢k  = {!!} --contradiction {!!} i‚â¢k
-}
deflate-skip : ‚àÄ p {i j} ‚Üí i ‚â¢ j ‚Üí deflate ((i , j) ‚à∑ p) ‚â° (i , j) ‚à∑ deflate p
deflate-skip p {i} {j} i‚â¢j with i ‚âü j
... | yes i‚â°j = contradiction i‚â°j i‚â¢j
... | no  _   = refl

deflate-idem : ‚àÄ p ‚Üí deflate (deflate p) ‚â° deflate p
deflate-idem []            = refl
deflate-idem ((i , j) ‚à∑ p) with i ‚âü j
... | no  i‚â¢j = trans (deflate-skip (deflate p) i‚â¢j) (cong (_ ‚à∑_) (deflate-idem p))
... | yes _   with source (deflate p)
...   | nothing = refl
...   | just k  with i ‚âü k
...     | yes _ = deflate-idem p
...     | no  i‚â¢k = trans (deflate-skip (deflate p) i‚â¢k) (cong (_ ‚à∑_) (deflate-idem p))

‚àà-deflate‚Åª : ‚àÄ {i p} ‚Üí i ‚àà‚Çö deflate p ‚Üí i ‚àà‚Çö p
‚àà-deflate‚Åª {i} {[]}          ()
‚àà-deflate‚Åª {i} {(k , j) ‚à∑ p} i‚ààd[kj‚à∑p] with k ‚âü j | i‚ààd[kj‚à∑p]
... | no  _    | here  eq  = here eq
... | no  _    | there i‚ààp = there (‚àà-deflate‚Åª i‚ààp)
... | yes refl | i‚ààd[kj‚à∑p]‚ÇÇ with source (deflate p) | inspect source (deflate p) | i‚ààd[kj‚à∑p]‚ÇÇ
...   | nothing | _        | ()
...   | just l  | [ p‚ÇÄ‚â°l ] | i‚ààd[kj‚à∑p]‚ÇÉ with k ‚âü l | i‚ààd[kj‚à∑p]‚ÇÉ
...     | yes refl | i‚ààd[p]      = there (‚àà-deflate‚Åª i‚ààd[p])
...     | no  k‚â¢l  | here  left  = here left
...     | no  k‚â¢l  | here  right = there (‚àà-deflate‚Åª (‚àà-source p‚ÇÄ‚â°l))
...     | no  _    | there i‚ààp   = there (‚àà-deflate‚Åª i‚ààp)

‚áø-deflate‚Å∫ : ‚àÄ {e p} ‚Üí e ‚áø p ‚Üí e ‚áø deflate p
‚áø-deflate‚Å∫ (start i‚â¢j)                    = start i‚â¢j
‚áø-deflate‚Å∫ (continue {_} {j} {k} {p} i‚â¢j) with j ‚âü k
... | no  _    = continue i‚â¢j
... | yes refl with source (deflate p) | inspect source (deflate p)
...   | nothing | _        = start i‚â¢j
...   | just l  | [ p‚ÇÄ‚â°l ] with j ‚âü l
...     | yes refl = ‚áø-source i‚â¢j p‚ÇÄ‚â°l
...     | no  _    = continue i‚â¢j
