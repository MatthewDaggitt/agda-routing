open import Data.Fin using (Fin)
open import Data.Fin.Properties using () renaming (_РЅЪ_ to _РЅЪ­Юћй_)
open import Data.Nat using (РёЋ)
open import Data.Product using (_,_; _├Ќ_)
open import Level using () renaming (zero to РёЊРѓђ)
open import Relation.Binary
open import Relation.Binary.Product.Pointwise using (_├Ќ-РЅЪ_)
open import Relation.Binary.PropositionalEquality using (_РЅА_; refl)
open import Relation.Nullary using (┬г_; yes; no)

open import RoutingLib.Data.SimplePath.NonEmpty

module RoutingLib.Data.SimplePath.NonEmpty.Relation.Equality where

  module _ {n : РёЋ} where
  
    ----------------------------------------------------------------------------
    -- Relations
  
    infix 4 _РЅѕРѓџ_ _РЅЅРѓџ_

    data _РЅѕРѓџ_ : Rel (SimplePathРЂ┐рхЌ n) РёЊРѓђ where
      []  : [] РЅѕРѓџ []
      _Рѕи_ : Рѕђ {e f p q w x y z} Рєњ e РЅА f Рєњ p РЅѕРѓџ q Рєњ e Рѕи p РѕБ w РѕБ x РЅѕРѓџ f Рѕи q РѕБ y РѕБ z

    _РЅЅРѓџ_ : Rel (SimplePathРЂ┐рхЌ n) РёЊРѓђ
    p РЅЅРѓџ q = ┬г (p РЅѕРѓџ q)


    ----------------------------------------------------------------------------
    -- Properties
  
    private
  
      _РЅЪ­Юћ╝_ : Decidable {A = Fin n ├Ќ Fin n} _РЅА_
      _РЅЪ­Юћ╝_ = _РЅЪ­Юћй_ ├Ќ-РЅЪ _РЅЪ­Юћй_
    
    abstract

      pРЅЅiРѕиp : Рѕђ {e} {p : SimplePathРЂ┐рхЌ n} {eРЄ┐p eРѕЅp} Рєњ ┬г (p РЅѕРѓџ e Рѕи p РѕБ eРЄ┐p РѕБ eРѕЅp)
      pРЅЅiРѕиp {p = []}            ()
      pРЅЅiРѕиp {p = _ Рѕи _ РѕБ _ РѕБ _} (_ Рѕи pРЅѕРѓџiРѕиp) = pРЅЅiРѕиp pРЅѕРѓџiРѕиp
    
      -- Injectivity properties

      module _ {i j k l p q w x y z} where
      
        Рѕи╦А-injectiveРѓЂ : (i , j) Рѕи p РѕБ w РѕБ x РЅѕРѓџ (k , l) Рѕи q РѕБ y РѕБ z Рєњ i РЅА k
        Рѕи╦А-injectiveРѓЂ (refl Рѕи _) = refl

        Рѕи╦А-injectiveРѓѓ : (i , j) Рѕи p РѕБ w РѕБ x РЅѕРѓџ (k , l) Рѕи q РѕБ y РѕБ z Рєњ j РЅА l
        Рѕи╦А-injectiveРѓѓ (refl Рѕи _) = refl

        Рѕи╩│-injective : (i , j) Рѕи p РѕБ w РѕБ x РЅѕРѓџ (k , l) Рѕи q РѕБ y РѕБ z Рєњ p РЅѕРѓџ q
        Рѕи╩│-injective (_ Рѕи pРЅѕq) = pРЅѕq

      -- Algebraic properties
      РЅѕРѓџ-refl : Reflexive _РЅѕРѓџ_
      РЅѕРѓџ-refl {[]}            = []
      РЅѕРѓџ-refl {_ Рѕи _ РѕБ _ РѕБ _} = refl Рѕи РЅѕРѓџ-refl

      РЅѕРѓџ-sym : Symmetric _РЅѕРѓџ_
      РЅѕРѓџ-sym []           = []
      РЅѕРѓџ-sym (refl Рѕи pРЅѕРѓџq) = refl Рѕи (РЅѕРѓџ-sym pРЅѕРѓџq)

      РЅѕРѓџ-trans : Transitive _РЅѕРѓџ_
      РЅѕРѓџ-trans []            []           = []
      РЅѕРѓџ-trans (refl Рѕи pРЅѕРѓџq)  (refl Рѕи qРЅѕРѓџr) = refl Рѕи (РЅѕРѓџ-trans pРЅѕРѓџq qРЅѕРѓџr)

      _РЅЪРѓџ_ : Decidable _РЅѕРѓџ_
      []              РЅЪРѓџ []              = yes []
      []              РЅЪРѓџ (k Рѕи q РѕБ _ РѕБ _) = no ╬╗()
      (i Рѕи p РѕБ _ РѕБ _) РЅЪРѓџ []              = no ╬╗()
      (i Рѕи p РѕБ _ РѕБ _) РЅЪРѓџ (k Рѕи q РѕБ _ РѕБ _) with i РЅЪ­Юћ╝ k | p РЅЪРѓџ q
      ... | no  iРЅбk | _       = no (╬╗{(iРЅАk Рѕи _) Рєњ iРЅбk iРЅАk})
      ... | _       | no  pРЅбq = no (╬╗{(_ Рѕи pРЅАq) Рєњ pРЅбq pРЅАq})
      ... | yes iРЅАk | yes pРЅАq = yes (iРЅАk Рѕи pРЅАq)
  
      РЅѕРѓџ-isEquivalence : IsEquivalence _РЅѕРѓџ_
      РЅѕРѓџ-isEquivalence = record 
        { refl  = РЅѕРѓџ-refl 
        ; sym   = РЅѕРѓџ-sym 
        ; trans = РЅѕРѓџ-trans 
        }

      РЅѕРѓџ-isDecEquivalence : IsDecEquivalence _РЅѕРѓџ_
      РЅѕРѓџ-isDecEquivalence = record 
        { isEquivalence = РЅѕРѓџ-isEquivalence 
        ; _РЅЪ_           = _РЅЪРѓџ_ 
        }

  РёЎРѓЏ : РёЋ Рєњ Setoid РёЊРѓђ РёЊРѓђ
  РёЎРѓЏ n = record 
    { Carrier       = SimplePathРЂ┐рхЌ n 
    ; _РЅѕ_           = _РЅѕРѓџ_ 
    ; isEquivalence = РЅѕРѓџ-isEquivalence 
    }

  РёЎРѓЏ? : РёЋ Рєњ DecSetoid РёЊРѓђ РёЊРѓђ
  РёЎРѓЏ? n = record
    { Carrier          = SimplePathРЂ┐рхЌ n 
    ; _РЅѕ_              = _РЅѕРѓџ_ 
    ; isDecEquivalence = РЅѕРѓџ-isDecEquivalence 
    }
