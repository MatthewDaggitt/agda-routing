open import Level using () renaming (zero to 0‚Ñì)
open import Data.List.Any using (any)
open import Data.Nat using (‚Ñï; zero; suc; z‚â§n; s‚â§s; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_; _‚â§?_ to _‚â§‚Ñï?_; _‚â§_ to _‚â§‚Ñï_; _<_ to _<‚Ñï_)
open import Data.Nat.Properties using (<-trans; ‚â∞‚áí>; <‚áí‚â¢; <‚áí‚âØ; ‚â§-refl; ‚â§-trans; 1+n‚â∞n; _<?_; ‚â∞‚áí‚â•)
open import Data.Fin using (Fin; _<_; _‚â§?_; _‚âü_) renaming (zero to fzero; suc to fsuc)
open import Data.Fin.Properties using (<-cmp; ‚â§-antisym; ‚â§-total) renaming (_‚âü_ to _‚âüùîΩ_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Product using (_,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ)
open import Function using (_‚àò_)
open import Relation.Binary.Product.Pointwise using (_√ó-‚âü_)
open import Relation.Binary hiding (NonEmpty)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; sym; trans; subst; cong; cong‚ÇÇ; setoid; isEquivalence)
open import Relation.Nullary.Negation using (¬¨?)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)

open import RoutingLib.Data.Nat.Properties using (<‚áí‚â§suc)
open import RoutingLib.Data.Fin.Pigeonhole using (pigeonhole)
import RoutingLib.Relation.Binary.NonStrictToStrict.DecTotalOrder as ToStrict

open import RoutingLib.Data.Path.Uncertified.FiniteEdge.NonEmpty

module RoutingLib.Data.Path.Uncertified.FiniteEdge.NonEmpty.Properties where

----------------------------------------------------------------------------
-- Edges

_‚âü‚Çë_ : ‚àÄ {n} ‚Üí Decidable {A = Edge n} _‚â°_
_‚âü‚Çë_ = _‚âüùîΩ_ √ó-‚âü _‚âüùîΩ_

ùïç‚Çõ : ‚Ñï ‚Üí Setoid _ _
ùïç‚Çõ n = setoid (Vertex n)

ùîº‚Çõ : ‚Ñï ‚Üí Setoid _ _
ùîº‚Çõ n = setoid (Edge n)

----------------------------------------------------------------------------
-- Linking

_‚áø?_ : ‚àÄ {n} ‚Üí Decidable (_‚áø_ {n})
(i , j) ‚áø? [] with i ‚âüùîΩ j
... | yes i‚â°j = no  Œª{(start i‚â¢j) ‚Üí i‚â¢j i‚â°j}
... | no  i‚â¢j = yes (start i‚â¢j)
(i , j) ‚áø? ((k , l) ‚à∑ p) with i ‚âüùîΩ j | j ‚âüùîΩ k
... | yes i‚â°j | _        = no Œª{(continue i‚â¢j) ‚Üí i‚â¢j i‚â°j}
... | no  _   | no  j‚â¢k  = no Œª{(continue _) ‚Üí j‚â¢k refl}
... | no  i‚â¢j | yes refl = yes (continue i‚â¢j)

‚áø-resp-‚âà‚Çö : ‚àÄ {n} {e : Edge n} ‚Üí (e ‚áø_) Respects _‚âà‚Çö_
‚áø-resp-‚âà‚Çö refl e‚áøp = e‚áøp

ij‚áøp‚áíi‚â¢j : ‚àÄ {n} {i j : Vertex n} {p} ‚Üí (i , j) ‚áø p ‚Üí i ‚â¢ j
ij‚áøp‚áíi‚â¢j (start    i‚â¢j) = i‚â¢j
ij‚áøp‚áíi‚â¢j (continue i‚â¢j) = i‚â¢j

----------------------------------------------------------------------------
-- Membership

_‚àà‚Çë?_ : ‚àÄ {n} ‚Üí Decidable (_‚àà‚Çë_ {n})
k ‚àà‚Çë? (i , j) with k ‚âü i | k ‚âü j
... | yes refl | _        = yes left
... | _        | yes refl = yes right
... | no  k‚â¢i  | no  k‚â¢j  = no Œª
  { left  ‚Üí k‚â¢i refl
  ; right ‚Üí k‚â¢j refl
  }

_‚àà?_ : ‚àÄ {n} ‚Üí Decidable (_‚àà_ {n})
k ‚àà? p = any (k ‚àà‚Çë?_) p

‚àâ-resp-‚âà‚Çö : ‚àÄ {n} {k : Fin n} ‚Üí (k ‚àâ_) Respects _‚â°_
‚àâ-resp-‚âà‚Çö refl k‚àâp = k‚àâp

----------------------------------------------------------------------------
-- Equality

p‚ââi‚à∑p : ‚àÄ {n e} {p : Path‚Åø·µó n} ‚Üí ¬¨ (p ‚âà‚Çö e ‚à∑ p)
p‚ââi‚à∑p {p}    ()

_‚âü‚Çö_ : ‚àÄ {n} ‚Üí Decidable (_‚âà‚Çö_ {n})
[]      ‚âü‚Çö []      = yes refl
[]      ‚âü‚Çö (k ‚à∑ q) = no Œª()
(i ‚à∑ p) ‚âü‚Çö []      = no Œª()
(i ‚à∑ p) ‚âü‚Çö (k ‚à∑ q) with i ‚âü‚Çë k | p ‚âü‚Çö q
... | no  i‚â¢k  | _        = no (Œª{refl ‚Üí i‚â¢k refl})
... | _        | no  p‚â¢q  = no (Œª{refl ‚Üí p‚â¢q refl})
... | yes refl | yes refl = yes refl

module _ (n : ‚Ñï) where

  ‚â°‚Çö-isDecEquivalence : IsDecEquivalence (_‚âà‚Çö_ {n})
  ‚â°‚Çö-isDecEquivalence = record
    { isEquivalence = isEquivalence
    ; _‚âü_           = _‚âü‚Çö_
    }

  ‚Ñô‚Çõ : Setoid 0‚Ñì 0‚Ñì
  ‚Ñô‚Çõ = setoid (Path‚Åø·µó n)
  
  ‚Ñô‚Çõ? : DecSetoid 0‚Ñì 0‚Ñì
  ‚Ñô‚Çõ? = record { isDecEquivalence = ‚â°‚Çö-isDecEquivalence }

----------------------------------------------------------------------------
-- Lexicographic order

module _ {n : ‚Ñï} where

  ‚â§‚Çó‚Çë‚Çì-refl : Reflexive (_‚â§‚Çó‚Çë‚Çì_ {n})
  ‚â§‚Çó‚Çë‚Çì-refl {[]}    = stop
  ‚â§‚Çó‚Çë‚Çì-refl {i ‚à∑ p} = step refl refl ‚â§‚Çó‚Çë‚Çì-refl
  
  ‚â§‚Çó‚Çë‚Çì-reflexive : _‚â°_ ‚áí (_‚â§‚Çó‚Çë‚Çì_ {n})
  ‚â§‚Çó‚Çë‚Çì-reflexive refl = ‚â§‚Çó‚Çë‚Çì-refl

  ‚â§‚Çó‚Çë‚Çì-total : Total (_‚â§‚Çó‚Çë‚Çì_ {n})
  ‚â§‚Çó‚Çë‚Çì-total p [] = inj‚ÇÇ stop
  ‚â§‚Çó‚Çë‚Çì-total [] q = inj‚ÇÅ stop
  ‚â§‚Çó‚Çë‚Çì-total ((i , j) ‚à∑ p) ((l , k) ‚à∑ q) with <-cmp i l
  ... | tri< i<l _ _ = inj‚ÇÅ (here‚ÇÅ i<l)
  ... | tri> _ _ l<i = inj‚ÇÇ (here‚ÇÅ l<i)
  ... | tri‚âà _ i‚â°l _ with <-cmp j k
  ...   | tri< j<k _ _ = inj‚ÇÅ (here‚ÇÇ i‚â°l j<k)
  ...   | tri> _ _ j<k = inj‚ÇÇ (here‚ÇÇ (sym i‚â°l) j<k)
  ...   | tri‚âà _ j‚â°k _ with ‚â§‚Çó‚Çë‚Çì-total p q
  ...     | inj‚ÇÅ p‚â§q = inj‚ÇÅ (step i‚â°l j‚â°k p‚â§q)
  ...     | inj‚ÇÇ q‚â§p = inj‚ÇÇ (step (sym i‚â°l) (sym j‚â°k) q‚â§p)

  ‚â§‚Çó‚Çë‚Çì-trans : Transitive (_‚â§‚Çó‚Çë‚Çì_ {n})
  ‚â§‚Çó‚Çë‚Çì-trans stop                  _                     = stop
  ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (here‚ÇÅ j<k)           = here‚ÇÅ (<-trans i<j j<k)
  ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (here‚ÇÇ refl j<k)      = here‚ÇÅ i<j
  ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (step  refl refl q‚â§r) = here‚ÇÅ i<j
  ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (here‚ÇÅ j<k)           = here‚ÇÅ j<k
  ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (here‚ÇÇ refl j<k)      = here‚ÇÇ refl (<-trans i<j j<k)
  ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (step  refl refl q‚â§r) = here‚ÇÇ refl i<j
  ‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (here‚ÇÅ j<k)           = here‚ÇÅ j<k
  ‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (here‚ÇÇ refl j<k)      = here‚ÇÇ refl j<k
  ‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (step  refl refl q‚â§r) = step refl refl (‚â§‚Çó‚Çë‚Çì-trans p‚â§q q‚â§r)

  ‚â§‚Çó‚Çë‚Çì-antisym : Antisymmetric _‚âà‚Çö_ (_‚â§‚Çó‚Çë‚Çì_ {n})
  ‚â§‚Çó‚Çë‚Çì-antisym stop                  stop                  = refl
  ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (here‚ÇÅ j<i)           = contradiction i<j (<‚áí‚âØ j<i)
  ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (here‚ÇÇ refl j<i)      = contradiction i<j 1+n‚â∞n
  ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (step  refl refl p‚â§q) = contradiction i<j 1+n‚â∞n
  ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (here‚ÇÅ j<i)           = contradiction j<i 1+n‚â∞n
  ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (here‚ÇÇ refl j<i)      = contradiction i<j (<‚áí‚âØ j<i)
  ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (step  refl refl p‚â§q) = contradiction i<j 1+n‚â∞n
  ‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl i<j) (here‚ÇÅ j<i)           = contradiction j<i 1+n‚â∞n
  ‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl _)   (here‚ÇÇ _ j<i)         = contradiction j<i 1+n‚â∞n
  ‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl p‚â§q) (step refl refl q‚â§p)  = cong (_ ‚à∑_) (‚â§‚Çó‚Çë‚Çì-antisym p‚â§q q‚â§p)
  
  _‚â§‚Çó‚Çë‚Çì?_ : Decidable (_‚â§‚Çó‚Çë‚Çì_ {n})
  [] ‚â§‚Çó‚Çë‚Çì? _ = yes stop
  (i ‚à∑ p) ‚â§‚Çó‚Çë‚Çì? []          = no Œª()
  ((i , j) ‚à∑ p) ‚â§‚Çó‚Çë‚Çì? ((k , l) ‚à∑ q) with <-cmp i k | <-cmp j l | p ‚â§‚Çó‚Çë‚Çì? q
  ... | tri< i<k _   _ | _              | _       = yes (here‚ÇÅ i<k)
  ... | tri> i‚âÆk i‚â¢k _ | _              | _       = no Œª
    { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
    ; (here‚ÇÇ i‚â°k _)   ‚Üí i‚â¢k i‚â°k
    ; (step  i‚â°k _ _) ‚Üí i‚â¢k i‚â°k
    }
  ... | tri‚âà _   i‚â°k _ | tri< j<l _   _ | _       = yes (here‚ÇÇ i‚â°k j<l)
  ... | tri‚âà i‚âÆk _   _ | tri> j‚âÆl j‚â¢l _ | _       = no Œª
    { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
    ; (here‚ÇÇ _ j<l)   ‚Üí j‚âÆl j<l
    ; (step  _ j‚â°l _) ‚Üí j‚â¢l j‚â°l
    }
  ... | tri‚âà i‚âÆk _   _ | tri‚âà j‚âÆl _ _   | no  p‚â∞q = no Œª
    { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
    ; (here‚ÇÇ _ j<l)   ‚Üí j‚âÆl j<l
    ; (step  _ _ p‚â§q) ‚Üí p‚â∞q p‚â§q
    }
  ... | tri‚âà _   i‚â°k _ | tri‚âà _ j‚â°l _   | yes p‚â§q = yes (step i‚â°k j‚â°l p‚â§q)


module _ (n : ‚Ñï) where

  ‚â§‚Çó‚Çë‚Çì-decTotalOrder : DecTotalOrder _ _ _
  ‚â§‚Çó‚Çë‚Çì-decTotalOrder = record
    { isDecTotalOrder = record
      { isTotalOrder = record
        { isPartialOrder = record
          { isPreorder = record
            { isEquivalence = isEquivalence {A = Path‚Åø·µó n} 
            ; reflexive     = ‚â§‚Çó‚Çë‚Çì-reflexive
            ; trans         = ‚â§‚Çó‚Çë‚Çì-trans
            }
          ; antisym    = ‚â§‚Çó‚Çë‚Çì-antisym
          }
        ; total        = ‚â§‚Çó‚Çë‚Çì-total
        }
      ; _‚âü_          = _‚âü‚Çö_
      ; _‚â§?_         = _‚â§‚Çó‚Çë‚Çì?_
      }
    }

module _ {n : ‚Ñï} where

  open ToStrict (‚â§‚Çó‚Çë‚Çì-decTotalOrder n) public
    using ()
    renaming
    ( <-trans   to <‚Çó‚Çë‚Çì-trans
    ; <-asym    to <‚Çó‚Çë‚Çì-asym
    ; <-irrefl  to <‚Çó‚Çë‚Çì-irrefl
    ; <-respÀ°-‚âà to <‚Çó‚Çë‚Çì-respÀ°-‚âà‚Çö
    ; <-resp ≥-‚âà to <‚Çó‚Çë‚Çì-resp ≥-‚âà‚Çö
    ; <-cmp     to <‚Çó‚Çë‚Çì-cmp
    )

  p‚âÆ‚Çó‚Çë‚Çì[] : ‚àÄ {p : Path‚Åø·µó n} ‚Üí ¬¨ (p <‚Çó‚Çë‚Çì [])
  p‚âÆ‚Çó‚Çë‚Çì[] {[]}    (_ , []‚ââ[]) = []‚ââ[] refl
  p‚âÆ‚Çó‚Çë‚Çì[] {e ‚à∑ p} (() , _)

{-

----------------------------------------------------------------------------
-- lookup

‚àâ-lookup : ‚àÄ {n} {p : Path‚Åø·µó n} (p‚Å∫ : NonEmpty p) ‚Üí
           ‚àÄ {i} ‚Üí i ‚àâ p ‚Üí ‚àÄ k ‚Üí lookup·µ• p‚Å∫ k ‚â¢ i
‚àâ-lookup (nonEmpty (_ , _) [] e‚áøp e‚àâp) (notHere x x‚ÇÅ i‚àâp) fzero = x ‚àò sym
‚àâ-lookup (nonEmpty (_ , _) [] e‚áøp e‚àâp) (notHere x x‚ÇÅ i‚àâp) (fsuc fzero) = x‚ÇÅ ‚àò sym
‚àâ-lookup (nonEmpty (_ , _) [] e‚áøp e‚àâp) (notHere x x‚ÇÅ i‚àâp) (fsuc (fsuc ()))
‚àâ-lookup (nonEmpty (_ , _) (e ‚à∑ p ‚à£ e‚áøp‚ÇÅ ‚à£ e‚àâp‚ÇÅ) e‚áøp e‚àâp) (notHere x x‚ÇÅ i‚àâp) fzero = x ‚àò sym
‚àâ-lookup (nonEmpty (_ , _) (e ‚à∑ p ‚à£ e‚áøp‚ÇÅ ‚à£ e‚àâp‚ÇÅ) e‚áøp e‚àâp) (notHere x x‚ÇÅ i‚àâp) (fsuc fzero) = x‚ÇÅ ‚àò sym
‚àâ-lookup (nonEmpty (_ , _) (e ‚à∑ p ‚à£ e‚áøp‚ÇÅ ‚à£ e‚àâp‚ÇÅ) e‚áøp e‚àâp) (notHere x x‚ÇÅ i‚àâp) (fsuc (fsuc k)) =
  ‚àâ-lookup (nonEmpty e p e‚áøp‚ÇÅ e‚àâp‚ÇÅ) i‚àâp (fsuc k)

‚àâ-lookup‚ÇÇ : ‚àÄ {n} {p : Path‚Åø·µó n} (p‚Å∫ : NonEmpty p) ‚Üí
            ‚àÄ {i j} ‚Üí (i , j) ‚áø p ‚Üí ‚àÄ k ‚Üí lookup·µ• p‚Å∫ (fsuc k) ‚â¢ j
‚àâ-lookup‚ÇÇ (nonEmpty (j , l) p  e‚áøp e‚àâp) (continue x) fzero    = ij‚áøp‚áíi‚â¢j e‚áøp ‚àò sym
‚àâ-lookup‚ÇÇ (nonEmpty (j , l) [] e‚áøp e‚àâp) (continue x) (fsuc ())
‚àâ-lookup‚ÇÇ (nonEmpty (j , l) ((_ , _) ‚à∑ p ‚à£ _ ‚à£ _) _ (notHere _ j‚â¢l _)) (continue _) (fsuc fzero) = j‚â¢l ‚àò sym
‚àâ-lookup‚ÇÇ (nonEmpty (j , l) (e ‚à∑ p ‚à£ e‚áøp‚ÇÅ ‚à£ e‚àâp‚ÇÅ) _ e‚àâp) (continue x) (fsuc (fsuc k)) =
  ‚àâ-lookup (nonEmpty e p e‚áøp‚ÇÅ e‚àâp‚ÇÅ) e‚àâp (fsuc (fsuc k))

lookup! : ‚àÄ {n} {p : Path‚Åø·µó n} (p‚Å∫ : NonEmpty p) ‚Üí ‚àÄ k l ‚Üí k ‚â¢ l ‚Üí lookup·µ• p‚Å∫ k ‚â¢ lookup·µ• p‚Å∫ l
lookup! (nonEmpty e p e‚áøp e‚àâp)               fzero           fzero           0‚â¢0 = contradiction refl 0‚â¢0
lookup! (nonEmpty e p e‚áøp e‚àâp)               fzero           (fsuc fzero)    _   = ij‚áøp‚áíi‚â¢j e‚áøp
lookup! (nonEmpty e [] e‚áøp e‚àâp)              fzero           (fsuc (fsuc ()))
lookup! (nonEmpty e p e‚áøp e‚àâp)               (fsuc fzero)    fzero           _   = ij‚áøp‚áíi‚â¢j e‚áøp ‚àò sym
lookup! (nonEmpty e [] e‚áøp e‚àâp)              (fsuc (fsuc ())) _
lookup! (nonEmpty e p e‚áøp e‚àâp)               (fsuc fzero)    (fsuc fzero)    1‚â¢1 = contradiction refl 1‚â¢1
lookup! (nonEmpty e [] e‚áøp e‚àâp)              (fsuc fzero)    (fsuc (fsuc ()))
lookup! (nonEmpty e (f ‚à∑ p ‚à£ a ‚à£ b) e‚áøp e‚àâp) fzero           (fsuc (fsuc l)) _   =
  (‚àâ-lookup (nonEmpty f p a b) e‚àâp (fsuc l)) ‚àò sym
lookup! (nonEmpty e (f ‚à∑ p ‚à£ a ‚à£ b) e‚áøp e‚àâp) (fsuc (fsuc k)) fzero           _   =
  (‚àâ-lookup (nonEmpty f p a b) e‚àâp (fsuc k))
lookup! (nonEmpty e (f ‚à∑ p ‚à£ a ‚à£ b) e‚áøp e‚àâp) (fsuc fzero)    (fsuc (fsuc l)) _   =
  ‚àâ-lookup‚ÇÇ (nonEmpty f p a b) e‚áøp l ‚àò sym
lookup! (nonEmpty e (f ‚à∑ p ‚à£ a ‚à£ b) e‚áøp e‚àâp) (fsuc (fsuc k)) (fsuc fzero)    _   =
  ‚àâ-lookup‚ÇÇ (nonEmpty f p a b) e‚áøp k
lookup! (nonEmpty e (_ ‚à∑ _ ‚à£ _ ‚à£ _) e‚áøp e‚àâp) (fsuc (fsuc k)) (fsuc (fsuc l)) k‚â¢l =
  lookup! (nonEmpty _ _ _ _) (fsuc k) (fsuc l) (k‚â¢l ‚àò cong fsuc)

----------------------------------------------------------------------------
-- length

length-cong : ‚àÄ {n} {p q : Path‚Åø·µó n} ‚Üí p ‚âà‚Çö q ‚Üí length p ‚â° length q
length-cong []        = refl
length-cong (_ ‚à∑ p‚âà‚Çöq) = cong suc (length-cong p‚âà‚Çöq)

|p|<n : ‚àÄ {n} {p : Path‚Åø·µó n} ‚Üí NonEmpty p ‚Üí length p <‚Ñï n
|p|<n {n} q@(nonEmpty e p e‚áøp e‚àâp) with suc (length p) <? n
... | yes |q|<n = |q|<n
... | no  |q|‚âÆn with pigeonhole (‚â∞‚áí> |q|‚âÆn) (lookup·µ• q)
...   | i , j , i‚â¢j , p·µ¢‚â°p‚±º = contradiction p·µ¢‚â°p‚±º (lookup! q i j i‚â¢j)

|p|‚â§1+n : ‚àÄ {n} (p : Path‚Åø·µó n) ‚Üí length p ‚â§‚Ñï suc n
|p|‚â§1+n []                  = z‚â§n
|p|‚â§1+n (e ‚à∑ p ‚à£ e‚áøp ‚à£ e‚àâp) = <‚áí‚â§suc (|p|<n (nonEmpty _ _ e‚áøp e‚àâp))
-}
