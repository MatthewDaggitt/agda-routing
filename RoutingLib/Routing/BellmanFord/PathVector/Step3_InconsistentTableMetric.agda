open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (‚â§-trans; ‚â§-refl; ‚â§-reflexive; m‚â§m+n; m+n‚à∏m‚â°n; +-mono-‚â§; ‚à∏-mono;  ‚äì-mono-<; m‚â§m‚äîn; m‚äìn‚â§m; ‚â∞‚áí‚â•; n‚â§m‚äîn; m‚äìn‚â§n; <-transÀ°; <-trans ≥; +-distribÀ°-‚äî)
open import Data.Fin using (Fin)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; subst; subst‚ÇÇ; cong‚ÇÇ)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_)

open import RoutingLib.Routing.Definitions
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Data.Graph
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions using () renaming (SufficientConditions to GeneralSufficientConditions)
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; n<m‚áín‚äìo<m; n‚â§m‚áín‚äìo‚â§m; m<n‚áín‚â¢0; ‚â§-steps ≥; +-mono ≥-‚â§; +-mono ≥-<; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Data.Matrix using (Any; map; min‚Å∫)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫[M]<min‚Å∫[N])
open import RoutingLib.Data.Table using (Table)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
import RoutingLib.Function.Distance as Distance 
import RoutingLib.Function.Distance.MaxLift as MaxLift

import RoutingLib.Routing.BellmanFord.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.Step2_InconsistentRouteMetric as Step2

module RoutingLib.Routing.BellmanFord.PathVector.Step3_InconsistentTableMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
  open Step2 ùìüùì¢ùìí
  open Distance ‚Ñùùïã‚Çõ using (Ultrametric; Bounded)

  d‚Çú‚Å±-ultrametric : Ultrametric
  d‚Çú‚Å±-ultrametric = MaxLift.ultrametric (Œª _ ‚Üí _) (Œª _ ‚Üí d·µ£‚Å±-ultrametric)

  open Ultrametric d‚Çú‚Å±-ultrametric public using ()
    renaming
    ( d    to d‚Çú‚Å±
    ; 0‚áíeq to d‚Çú‚Å±‚â°0‚áíX‚âàY
    ; eq‚áí0 to X‚âàY‚áíd‚Çú‚Å±‚â°0
    ; sym  to d‚Çú‚Å±-sym
    )

  d‚Çú‚Å±-bounded : Bounded d‚Çú‚Å±
  d‚Çú‚Å±-bounded = MaxLift.bounded (Œª _ ‚Üí S) d·µ£‚Å± d·µ£‚Å±-bounded
  
  X‚Å±Y·∂úZ·∂ú‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±XY : ‚àÄ {X Y Z} ‚Üí ùë∞‚Çú X ‚Üí ùë™‚Çú Y ‚Üí ùë™‚Çú Z ‚Üí d‚Çú‚Å± X Z ‚â§ d‚Çú‚Å± X Y
  X‚Å±Y·∂úZ·∂ú‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±XY X‚Å± Y·∂ú Z·∂ú = {!!}
    --‚â§-reflexive (trans (X‚Å±Y·∂ú‚áíD‚Å±XY‚â°D‚Å±X X‚Å± Z·∂ú) (sym (X‚Å±Y·∂ú‚áíD‚Å±XY‚â°D‚Å±X X‚Å± Y·∂ú)))
    
  X·∂úY·∂úZ‚Å±‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±YZ : ‚àÄ {X Y Z} ‚Üí ùë™‚Çú X ‚Üí ùë™‚Çú Y ‚Üí ùë∞‚Çú Z ‚Üí d‚Çú‚Å± X Z ‚â§ d‚Çú‚Å± Y Z
  X·∂úY·∂úZ‚Å±‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±YZ {X} {Y} {Z} X·∂ú Y·∂ú Z‚Å± =
    subst‚ÇÇ _‚â§_ (d‚Çú‚Å±-sym Z X) (d‚Çú‚Å±-sym Z Y) (X‚Å±Y·∂úZ·∂ú‚áíd‚Çú‚Å±XZ‚â§d‚Çú‚Å±XY Z‚Å± Y·∂ú X·∂ú)


{-
  d‚Çú‚Å±-strContrExt : ‚àÄ {i j r s X Y} ‚Üí X r s ‚ââ Y r s ‚Üí œÉ X i j ‚ââ œÉ Y i j ‚Üí
                    d·µ£‚Å± (œÉ X i j) (œÉ Y i j) < d·µ£‚Å± (X r s) (Y r s)
  d‚Çú‚Å±-strContrExt {i} {j} {r} {s} {X} {Y} X·µ£‚Çõ‚ââY·µ£‚Çõ œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º
    with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º X r s | œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º Y r s
  ... | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º          | _                      = {!!}
  ... | _                      | inj‚ÇÇ œÉY·µ¢‚±º‚âàI·µ¢‚±º           = {!!}
  ... | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º) | inj‚ÇÅ (l , œÉY·µ¢‚±º‚âàA·µ¢‚ÇóX‚Çó‚±º) = {!!}

-}

  

  d‚Çú‚Å±-strContr : ‚àÄ {i r X Y} ‚Üí X r ‚ââ‚Çú Y r ‚Üí œÉ X i ‚ââ‚Çú œÉ Y i ‚Üí
                 ùë∞‚Çú (œÉ X i) ‚äé ùë∞‚Çú (œÉ Y i) ‚Üí
                 --(‚àÄ k ‚Üí d‚Çú (œÉ X k) (œÉ Y k) ‚â§ H·∂ú + d‚Çú‚Å± (œÉ X i) (œÉ Y i)) ‚Üí
                 (‚àÄ s ‚Üí d‚Çú‚Å± (X s) (Y s) ‚â§ d‚Çú‚Å± (X r) (Y r)) ‚Üí
                 d‚Çú‚Å± (œÉ X i) (œÉ Y i) < d‚Çú‚Å± (X r) (Y r)
  d‚Çú‚Å±-strContr {i} {r} {X} {Y} X‚Çó‚ââY‚Çó œÉX‚Çñ‚ââœÉY‚Çñ œÉX‚Çñ‚Å±‚äéœÉY‚Çñ‚Å± d‚Çú‚Å±‚â§d‚Çú‚Å±X·µ£Y·µ£
    with max[t]‚ààt 0 (Œª j ‚Üí d·µ£‚Å± (X r j) (Y r j))
       | max[t]‚ààt 0 (Œª j ‚Üí d·µ£‚Å± (œÉ X i j) (œÉ Y i j))
  ... | inj‚ÇÅ d‚Çú‚Å±X‚ÇóK‚Çó‚â°0           | _                 = contradiction (d‚Çú‚Å±‚â°0‚áíX‚âàY d‚Çú‚Å±X‚ÇóK‚Çó‚â°0) X‚Çó‚ââY‚Çó
  ... | inj‚ÇÇ (m , d‚Çú‚Å±‚â°d·µ£X‚Çó‚ÇòY‚Çó‚Çò)  | inj‚ÇÅ d‚Çú‚Å±œÉX‚ÇñœÉY‚Çñ‚â°0 = contradiction (d‚Çú‚Å±‚â°0‚áíX‚âàY d‚Çú‚Å±œÉX‚ÇñœÉY‚Çñ‚â°0) œÉX‚Çñ‚ââœÉY‚Çñ
  ... | inj‚ÇÇ (s , d‚Çú‚Å±‚â°d·µ£X·µ£‚ÇõY·µ£‚Çõ)  | inj‚ÇÇ (j , d‚Çú‚Å±‚â°d·µ£œÉX·µ¢‚±ºœÉY·µ¢‚±º) with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º X i j
  ...   | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º = {!!}
  ...   | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º) = begin
    d‚Çú‚Å± (œÉ X i)        (œÉ Y i)          ‚â°‚ü® d‚Çú‚Å±‚â°d·µ£œÉX·µ¢‚±ºœÉY·µ¢‚±º ‚ü©
    d·µ£‚Å± (œÉ X i j)       (œÉ Y i j)       ‚â§‚ü® {!!} ‚ü©
    d·µ£‚Å± (œÉ X i j)       (A i k ‚ñ∑ Y k j) ‚â°‚ü® d·µ£‚Å±-cong œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º ‚âà-refl ‚ü©
    d·µ£‚Å± (A i k ‚ñ∑ X k j) (A i k ‚ñ∑ Y k j) <‚ü® d·µ£‚Å±-strContr {!!} {!!} ‚ü©
    d·µ£‚Å± (X k j)         (Y k j)         ‚â§‚ü® MaxLift.d·µ¢‚â§d (Œª _ ‚Üí S) d·µ£‚Å± (X k) (Y k) j ‚ü©
    d‚Çú‚Å± (X k)          (Y k)            ‚â§‚ü® d‚Çú‚Å±‚â§d‚Çú‚Å±X·µ£Y·µ£ k ‚ü©
    d‚Çú‚Å± (X r)          (Y r)            ‚àé
    where open ‚â§-Reasoning

  
