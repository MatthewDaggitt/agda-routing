open import Data.Fin using (Fin)
open import Data.List using (List)
open import Data.List.Any.Membership.Propositional using (_‚àà_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Nat using (‚Ñï; suc; zero; z‚â§n; s‚â§s; _‚äî_; _*_; _‚à∏_) renaming (_‚â§_ to _‚â§‚Ñï_; _<_ to _<‚Ñï_)
open import Data.Nat.Properties as ‚Ñï‚Çö using (‚äî-mono-‚â§) renaming (‚â§-antisym to ‚â§‚Ñï-antisym; ‚â§-decTotalOrder to ‚â§‚Ñï-decTotalOrder)
open import Data.Product using (‚àÉ; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Function using (_‚àò_)
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; sym; trans; cong; subst; module ‚â°-Reasoning)
import Relation.Binary.PartialOrderReasoning as PO-Reasoning

open import RoutingLib.Data.List using (between)
open import RoutingLib.Data.List.Uniqueness.Propositional using (Unique)
open import RoutingLib.Data.List.Sorting using (Sorted)
open import RoutingLib.Data.Nat.Properties using (‚Ñï‚Çõ)
open import RoutingLib.Function.Distance using (IsUltrametric; MaxTriangleIneq)
open import RoutingLib.Data.Matrix using (Matrix; zipWith; max‚Å∫)
open import RoutingLib.Data.Matrix.Properties using (max‚Å∫-cong; M‚â§max‚Å∫[M]; max‚Å∫[M]‚â°x; max‚Å∫[M]‚â§x; max‚Å∫-constant; zipWith-sym)
open import RoutingLib.Data.Matrix.Membership.Propositional.Properties using (max‚Å∫[M]‚ààM)
open import RoutingLib.Data.Matrix.Relation.Pointwise using (zipWith-cong)

open import RoutingLib.Routing.Definitions using (RoutingProblem; RoutingAlgebra)
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions
import RoutingLib.Routing.BellmanFord.DistanceVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.DistanceVector.Step2_RouteMetric as Step2

module RoutingLib.Routing.BellmanFord.DistanceVector.Step3_StateMetric
  {a b ‚Ñì n-1}
  {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  (ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)) 
  (ùì¢ùìí : SufficientConditions ùì°ùìê)
  where
  
  open Prelude ùì°ùìü ùì¢ùìí
  open Step2 ùì°ùìü ùì¢ùìí using
    ( d
    ; d-cong
    ; x‚âày‚áíd‚â°0
    ; d‚â°0‚áíx‚âày
    ; d-sym
    ; d-maxTriIneq
    ; d-strContr
    ; d-mono
    )


  D : RMatrix ‚Üí RMatrix ‚Üí ‚Ñï
  D X Y = max‚Å∫ (zipWith d X Y)

  abstract
  
    D-cong : D Preserves‚ÇÇ _‚âà‚Çò_ ‚ü∂ _‚âà‚Çò_ ‚ü∂ _‚â°_
    D-cong X‚âàY U‚âàV = max‚Å∫-cong (zipWith-cong _‚âà_ _‚âà_ _‚â°_ d-cong X‚âàY U‚âàV)
    
    d‚â§D : ‚àÄ X Y i j ‚Üí d (X i j) (Y i j) ‚â§‚Ñï D X Y
    d‚â§D X Y i j = M‚â§max‚Å∫[M] (zipWith d X Y) i j
    
    D-sym : ‚àÄ X Y ‚Üí D X Y ‚â° D Y X
    D-sym X Y = max‚Å∫-cong (zipWith-sym _‚â°_ d-sym X Y)

    X‚âàY‚áíD‚â°0 : ‚àÄ {X Y} ‚Üí X ‚âà‚Çò Y ‚Üí D X Y ‚â° 0
    X‚âàY‚áíD‚â°0 X‚âàY = max‚Å∫-constant (Œª i j ‚Üí x‚âày‚áíd‚â°0 (X‚âàY i j))
    
    D‚â°0‚áíX‚âàY : ‚àÄ {X Y} ‚Üí D X Y ‚â° 0 ‚Üí X ‚âà‚Çò Y
    D‚â°0‚áíX‚âàY {X} {Y} d‚â°0 i j = d‚â°0‚áíx‚âày (‚â§‚Ñï-antisym (subst (d (X i j) (Y i j) ‚â§‚Ñï_) d‚â°0 (d‚â§D X Y i j)) z‚â§n)

    D-maxTriIneq : MaxTriangleIneq ‚ÑùùïÑ‚Çõ D
    D-maxTriIneq X Y Z with max‚Å∫[M]‚ààM (zipWith d X Z)
    ... | i , j , dÀ£·∂ª‚â°ij = begin
      D X Z                                 ‚â°‚ü® dÀ£·∂ª‚â°ij ‚ü©
      d (X i j) (Z i j)                     ‚â§‚ü® d-maxTriIneq _ _ _ ‚ü©
      d (X i j) (Y i j) ‚äî d (Y i j) (Z i j) ‚â§‚ü® ‚äî-mono-‚â§ (d‚â§D X Y i j) (d‚â§D Y Z i j) ‚ü©
      D X Y ‚äî D Y Z                         ‚àé
      where open ‚Ñï‚Çö.‚â§-Reasoning


  -- Strictly contracting --

  module PostDisagreementResult 
    {X Y i j} (D‚â°d·µ¢‚±º : D (œÉ X) (œÉ Y) ‚â° d (œÉ X i j) (œÉ Y i j))
    (œÉX·µ¢‚±º<œÉY·µ¢‚±º : œÉ X i j < œÉ Y i j) 
    where 

    œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º : œÉ X i j ‚â§ œÉ Y i j
    œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º = proj‚ÇÅ œÉX·µ¢‚±º<œÉY·µ¢‚±º

    œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º : œÉ X i j ‚ââ œÉ Y i j
    œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º = proj‚ÇÇ œÉX·µ¢‚±º<œÉY·µ¢‚±º
    
    i‚â¢j : i ‚â¢ j
    i‚â¢j refl = œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º (œÉX·µ¢·µ¢‚âàœÉY·µ¢·µ¢ X Y i)

    œÉX·µ¢‚±º‚ââI·µ¢‚±º : œÉ X i j ‚ââ I i j
    œÉX·µ¢‚±º‚ââI·µ¢‚±º œÉX·µ¢‚±º‚âàI·µ¢‚±º = œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º (‚â§-antisym œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (begin
      œÉ Y i j   ‚â§‚ü® 0#-id‚Çó-‚äï _ ‚ü©
      0#        ‚âà‚ü® ‚âà-sym (‚âà-reflexive (I·µ¢‚±º‚â°0# (i‚â¢j ‚àò sym))) ‚ü©
      I i j     ‚âà‚ü® ‚âà-sym œÉX·µ¢‚±º‚âàI·µ¢‚±º ‚ü©
      œÉ X i j   ‚àé))
      where open PO-Reasoning ‚â§-poset

    X‚Çñ‚±º‚ââY‚Çñ‚±º : ‚àÄ {k} ‚Üí œÉ X i j ‚âà A i k ‚ñ∑ X k j ‚Üí X k j ‚ââ Y k j
    X‚Çñ‚±º‚ââY‚Çñ‚±º {k} œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º X‚Çñ‚±º‚âàY‚Çñ‚±º = œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º ( ‚â§-antisym œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (begin
      œÉ Y i j       ‚â§‚ü® œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y i j k ‚ü©
      A i k ‚ñ∑ Y k j ‚âà‚ü® ‚ñ∑-cong (A i k) (‚âà-sym X‚Çñ‚±º‚âàY‚Çñ‚±º) ‚ü©
      A i k ‚ñ∑ X k j ‚âà‚ü® ‚âà-sym œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º ‚ü©
      œÉ X i j       ‚àé))
      where open PO-Reasoning ‚â§-poset

    œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º : ‚àÄ k ‚Üí œÉ X i j ‚â§ A i k ‚ñ∑ Y k j
    œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º k = ‚â§-trans œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y i j k)
    
    œÉX·µ¢‚±º‚ââA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º : ‚àÄ k ‚Üí œÉ X i j ‚ââ A i k ‚ñ∑ Y k j
    œÉX·µ¢‚±º‚ââA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º k œÉX·µ¢‚±º‚âàA·µ¢‚ÇñY‚Çñ‚±º = œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º (‚â§-antisym œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (‚â§-trans (œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑X‚Çñ‚±º Y i j k) (‚â§-reflexive (‚âà-sym œÉX·µ¢‚±º‚âàA·µ¢‚ÇñY‚Çñ‚±º))))


    result : D (œÉ X) (œÉ Y) <‚Ñï D X Y
    result with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º X i j
    ... | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º           = contradiction œÉX·µ¢‚±º‚âàI·µ¢‚±º œÉX·µ¢‚±º‚ââI·µ¢‚±º
    ... | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º) = begin
      suc (D (œÉ X) (œÉ Y))                     ‚â°‚ü® cong suc D‚â°d·µ¢‚±º ‚ü© 
      suc (d (œÉ X i j) (œÉ Y i j))             ‚â§‚ü® s‚â§s (d-mono œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º k , œÉX·µ¢‚±º‚ââA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º k)) ‚ü©
      suc (d (œÉ X i j) (A i k ‚ñ∑ Y k j))       ‚â°‚ü® cong suc (d-cong œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º ‚âà-refl) ‚ü©
      suc (d (A i k ‚ñ∑ X k j) (A i k ‚ñ∑ Y k j)) ‚â§‚ü® d-strContr (A i k) (X‚Çñ‚±º‚ââY‚Çñ‚±º œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º) ‚ü©
      d (X k j) (Y k j)                       ‚â§‚ü® M‚â§max‚Å∫[M] _ k j ‚ü©
      D X Y                                   ‚àé
      where open ‚Ñï‚Çö.‚â§-Reasoning


{-

  abstract

    open PostDisagreementResult using (result)
    open import RoutingLib.Function.Distance ‚ÑùùïÑ‚Çõ using (_StrContrOver_; _StrContrOnOrbitsOver_)
    open import RoutingLib.Function.Distance.Properties using (strContr‚áístrContrOnOrbits)

    œÉ-strictlyContracting : œÉ StrContrOver D
    œÉ-strictlyContracting {X} {Y} Y‚ââX with œÉ X ‚âü‚Çò œÉ Y | D X Y ‚âü‚Ñï 0
    ... | yes œÉX‚âàœÉY | yes D‚â°0 = contradiction (D‚â°0‚áíX‚âàY D‚â°0) (Y‚ââX ‚àò ‚âà‚Çò-sym)
    ... | yes œÉX‚âàœÉY | no  D‚â¢0 rewrite X‚âàY‚áíD‚â°0 œÉX‚âàœÉY = n‚â¢0‚áí0<n D‚â¢0
    ... | no  œÉX‚ââœÉY | _       with D-findWorstDisagreement œÉX‚ââœÉY
    ...   | i , j , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º , D‚â°d·µ¢‚±º , inj‚ÇÅ d·µ¢‚±º‚â°d‚Çõ·µ§‚Çö‚à∏hœÉX·µ¢‚±º = result œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º D‚â°d·µ¢‚±º d·µ¢‚±º‚â°d‚Çõ·µ§‚Çö‚à∏hœÉX·µ¢‚±º 
    ...   | i , j , œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º , D‚â°d·µ¢‚±º , inj‚ÇÇ d·µ¢‚±º‚â°d‚Çõ·µ§‚Çö‚à∏hœÉY·µ¢‚±º = 
      subst‚ÇÇ _<‚Ñï_ (D-sym (œÉ Y) (œÉ X)) (D-sym Y X) (
        result 
          (œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º ‚àò ‚âà-sym) 
          (trans (trans (D-sym (œÉ Y) (œÉ X)) D‚â°d·µ¢‚±º) (d-sym (œÉ X i j) (œÉ Y i j))) 
          (trans (d-sym (œÉ Y i j) (œÉ X i j)) d·µ¢‚±º‚â°d‚Çõ·µ§‚Çö‚à∏hœÉY·µ¢‚±º))

    œÉ-strictlyContractingOnOrbits : œÉ StrContrOnOrbitsOver D
    œÉ-strictlyContractingOnOrbits = strContr‚áístrContrOnOrbits ‚ÑùùïÑ‚Çõ œÉ-strictlyContracting
-}




{-
    
    -----------------
    -- Ultrametric --
    -----------------
    -- We have now shown that d is an ultrametric

    D-isUltrametric : IsUltrametric ‚ÑùùïÑ‚Çõ D
    D-isUltrametric = record 
      { eq‚áí0        = X‚âàY‚áíD‚â°0 
      ; 0‚áíeq        = D‚â°0‚áíX‚âàY 
      ; sym         = D-sym 
      ; maxTriangle = D-maxTriIneq 
      }
-}
