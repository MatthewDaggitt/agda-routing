open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (_Preserves_‚ü∂_; _Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; subst‚ÇÇ; module ‚â°-Reasoning)
open import Data.List using (List; _‚à∑_)
open import Data.List.Any.Membership.Propositional using (_‚àà_)
open import Data.Nat using (‚Ñï; suc; zero; z‚â§n; s‚â§s; _‚äî_) renaming (_‚â§_ to _‚â§‚Ñï_; _‚â•_ to _‚â•‚Ñï_; _<_ to _<‚Ñï_)
open import Data.Nat.Properties using (m‚â§m‚äîn; n‚â§m‚äîn; <‚áí‚â¢; <‚áí‚â§; ‚äî-comm; ‚äî-identity ≥; ‚äî-mono-‚â§; ‚äî-mono-<; module ‚â§-Reasoning) renaming (‚â§-reflexive to ‚â§‚Ñï-reflexive; ‚â§-refl to ‚â§‚Ñï-refl; ‚â§-trans to ‚â§‚Ñï-trans; ‚â§-antisym to ‚â§‚Ñï-antisym; ‚â§-decTotalOrder to ‚â§‚Ñï-decTotalOrder)
open import Data.Product using (‚àÉ; _,_)

open import RoutingLib.Data.List.Uniqueness.Propositional using (Unique)
open import RoutingLib.Data.List.Sorting using (Sorted)
open import RoutingLib.Data.Matrix using (Matrix; zipWith; max‚Å∫)
open import RoutingLib.Data.Nat.Properties using (‚Ñï‚Çõ; m‚â§n‚áím‚â§n‚äîo; n‚â§m‚áím‚äîn‚â°m; n‚â§m√óo‚â§m‚áín‚äîo‚â§m)
open import RoutingLib.Function.Distance using (IsUltrametric; MaxTriangleIneq)

open import RoutingLib.Routing.Definitions using (RoutingProblem; RoutingAlgebra)
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions
import RoutingLib.Routing.BellmanFord.DistanceVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.DistanceVector.Step1_HeightFunction as Step1

module RoutingLib.Routing.BellmanFord.DistanceVector.Step2_RouteMetric
  {a b ‚Ñì n-1}
  {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  (ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)) 
  (ùì¢ùìí : SufficientConditions ùì°ùìê)
  where
  
  open Prelude ùì°ùìü ùì¢ùìí
  open Step1 ùì°ùìü ùì¢ùìí using
    ( h
    ; h-resp-‚âà
    ; h-resp-<
    ; 1‚â§h
    )

  abstract

    h-resp-‚â§ : h Preserves _‚â§_ ‚ü∂ _‚â•‚Ñï_
    h-resp-‚â§ {u} {v} u‚â§v with u ‚âü v
    ... | yes u‚âàv = ‚â§‚Ñï-reflexive (h-resp-‚âà (‚âà-sym u‚âàv))
    ... | no  u‚ââv = <‚áí‚â§ (h-resp-< (u‚â§v , u‚ââv))
    
    h[fx]<h[x] : ‚àÄ e {x} ‚Üí x ‚ââ 0# ‚Üí h (e ‚ñ∑ x) <‚Ñï h x
    h[fx]<h[x] e x‚ââ0 = h-resp-< (‚äï-almost-strictly-absorbs-‚ñ∑ e x‚ââ0)

    ----------------------------
    -- distance between two routes
    
    d : Route ‚Üí Route ‚Üí ‚Ñï
    d x y with x ‚âü y
    ... | yes _ = zero
    ... | no  _ = h x ‚äî h y

    d-cong : d Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
    d-cong {x} {y} {u} {v} x‚âày u‚âàv with x ‚âü u | y ‚âü v
    ... | yes _   | yes _   = refl
    ... | yes x‚âàu | no  y‚ââv = contradiction (‚âà-trans (‚âà-trans (‚âà-sym x‚âày) x‚âàu) u‚âàv) y‚ââv
    ... | no  x‚ââu | yes y‚âàv = contradiction (‚âà-trans (‚âà-trans x‚âày y‚âàv) (‚âà-sym u‚âàv)) x‚ââu
    ... | no  _   | no  _   = cong‚ÇÇ _‚äî_ (h-resp-‚âà x‚âày) (h-resp-‚âà u‚âàv)

    x‚âày‚áíd‚â°0 : ‚àÄ {x y} ‚Üí x ‚âà y ‚Üí d x y ‚â° 0
    x‚âày‚áíd‚â°0 {x} {y} x‚âày with x ‚âü y
    ... | yes _   = refl
    ... | no  x‚âây = contradiction x‚âày x‚âây

    d‚â°0‚áíx‚âày : ‚àÄ {x y} ‚Üí d x y ‚â° 0 ‚Üí x ‚âà y
    d‚â°0‚áíx‚âày {x} {y} d‚â°0 with x ‚âü y 
    ... | yes x‚âày = x‚âày
    ... | no  _   = contradiction (sym d‚â°0) (<‚áí‚â¢ (m‚â§n‚áím‚â§n‚äîo (h y) (1‚â§h x)))
    
    d-sym : ‚àÄ x y ‚Üí d x y ‚â° d y x
    d-sym x y with x ‚âü y | y ‚âü x
    ... | yes _   | yes _   = refl
    ... | no  x‚âây | yes y‚âàx = contradiction (‚âà-sym y‚âàx) x‚âây 
    ... | yes x‚âày | no  y‚ââx = contradiction (‚âà-sym x‚âày) y‚ââx 
    ... | no  _   | no  _   = ‚äî-comm (h x) (h y)

    d-maxTriIneq : MaxTriangleIneq S d
    d-maxTriIneq x y z with x ‚âü y | y ‚âü z | x ‚âü z
    ... | _       | _       | yes _  = z‚â§n
    ... | yes x‚âày | yes y‚âàz | no x‚ââz = contradiction (‚âà-trans x‚âày y‚âàz) x‚ââz
    ... | yes x‚âày | no  _   | no _   = ‚â§‚Ñï-reflexive (cong‚ÇÇ _‚äî_ (h-resp-‚âà x‚âày) (refl {x = h z}))
    ... | no  _   | no  _   | no _   = ‚äî-mono-‚â§ (m‚â§m‚äîn (h x) (h y)) (n‚â§m‚äîn (h y) (h z))
    ... | no  _   | yes y‚âàz | no _   = begin
      h x ‚äî h z     ‚â°‚ü® cong (h x ‚äî_) (h-resp-‚âà (‚âà-sym y‚âàz)) ‚ü©
      h x ‚äî h y     ‚â°‚ü® sym (‚äî-identity ≥ _) ‚ü©
      h x ‚äî h y ‚äî 0 ‚àé     
      where open ‚â§-Reasoning
    
    strIncr-lemma : ‚àÄ f {x y} ‚Üí x ‚ââ 0# ‚Üí y ‚âà 0# ‚Üí h (f ‚ñ∑ x) ‚äî h (f ‚ñ∑ y) <‚Ñï h x ‚äî h y
    strIncr-lemma f {x} {y} x‚ââ0 y‚âà0 = begin
      suc (h (f ‚ñ∑ x) ‚äî h (f ‚ñ∑ y))  ‚â°‚ü® cong (Œª v ‚Üí suc (h (f ‚ñ∑ x) ‚äî v)) (h-resp-‚âà (‚ñ∑-cong f y‚âà0)) ‚ü©
      suc (h (f ‚ñ∑ x) ‚äî h (f ‚ñ∑ 0#)) ‚â°‚ü® cong (Œª v ‚Üí suc (h (f ‚ñ∑ x) ‚äî v)) (h-resp-‚âà (0#-an-‚ñ∑ f)) ‚ü©
      suc (h (f ‚ñ∑ x) ‚äî h 0#)       ‚â°‚ü® cong suc (n‚â§m‚áím‚äîn‚â°m (h-resp-‚â§ (0#-id‚Çó-‚äï _))) ‚ü©
      suc (h (f ‚ñ∑ x))              ‚â§‚ü® h[fx]<h[x] f x‚ââ0 ‚ü©
      h x                          ‚â°‚ü® sym (n‚â§m‚áím‚äîn‚â°m (h-resp-‚â§ (0#-id‚Çó-‚äï _))) ‚ü©
      h x            ‚äî h 0#        ‚â°‚ü® cong (h x ‚äî_) (h-resp-‚âà (‚âà-sym y‚âà0)) ‚ü©
      h x            ‚äî h y         ‚àé
      where open ‚â§-Reasoning
    
    d-strContr : ‚àÄ f {x y} ‚Üí x ‚ââ y ‚Üí d (f ‚ñ∑ x) (f ‚ñ∑ y) <‚Ñï d x y
    d-strContr f {x} {y} x‚âây with x ‚âü y | f ‚ñ∑ x ‚âü f ‚ñ∑ y
    ... | yes x‚âày | _           = contradiction x‚âày x‚âây
    ... | no  _   | yes e‚ñ∑x‚âàe‚ñ∑y = m‚â§n‚áím‚â§n‚äîo (h y) (1‚â§h x)
    ... | no  _   | no  _       with x ‚âü 0# | y ‚âü 0#
    ...   | yes x‚âà0 | yes y‚âà0 = contradiction (‚âà-trans x‚âà0 (‚âà-sym y‚âà0)) x‚âây
    ...   | yes x‚âà0 | no  y‚ââ0 = subst‚ÇÇ _<‚Ñï_ (‚äî-comm (h (f ‚ñ∑ y)) (h (f ‚ñ∑ x))) (‚äî-comm (h y) (h x)) (strIncr-lemma f y‚ââ0 x‚âà0)
    ...   | no  x‚ââ0 | yes y‚âà0 = strIncr-lemma f x‚ââ0 y‚âà0
    ...   | no  x‚ââ0 | no  y‚ââ0 = ‚äî-mono-< (h[fx]<h[x] f x‚ââ0) (h[fx]<h[x] f y‚ââ0)

    d-mono : ‚àÄ {x a b} ‚Üí x ‚â§ a ‚Üí x < b ‚Üí d x a ‚â§‚Ñï d x b
    d-mono {x} {a} {b} x‚â§a (x‚â§b , x‚ââb) with x ‚âü a | x ‚âü b
    ... | yes _ | _       = z‚â§n
    ... | no  _ | yes x‚âàb = contradiction x‚âàb x‚ââb
    ... | no  _ | no  _   = ‚â§‚Ñï-reflexive (trans (n‚â§m‚áím‚äîn‚â°m (h-resp-‚â§ x‚â§a)) (sym (n‚â§m‚áím‚äîn‚â°m (h-resp-‚â§ x‚â§b))))
    
    d-isUltrametric : IsUltrametric S d
    d-isUltrametric = record 
      { eq‚áí0        = x‚âày‚áíd‚â°0 
      ; 0‚áíeq        = d‚â°0‚áíx‚âày 
      ; sym         = d-sym 
      ; maxTriangle = d-maxTriIneq 
      }
      

{-
    -----------------
    -- Ultrametric --
    -----------------
    -- We have now shown that d is an ultrametric

    D-isUltrametric : IsUltrametric ‚ÑùùïÑ‚Çõ D
    D-isUltrametric = record 
      { eq‚áí0        = X‚âàY‚áíD‚â°0 
      ; 0‚áíeq        = D‚â°0‚áíX‚âàY 
      ; sym         = D-sym 
      ; maxTriangle = D-maxTriIneq 
      }
-}
