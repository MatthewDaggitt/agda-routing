open import Level using () renaming (zero to lzero)
open import Relation.Binary using (Setoid; DecSetoid; Decidable; Total; Reflexive; Symmetric; Antisymmetric; Transitive; _Respects_; IsEquivalence; IsDecEquivalence; tri‚âà; tri<; tri>)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; sym; trans; subst; cong; cong‚ÇÇ) renaming (setoid to ‚â°-setoid)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary.List.Pointwise using ([]; _‚à∑_) renaming (setoid to listSetoid)
open import Data.Nat using (‚Ñï; suc) renaming (_‚âü_ to _‚âü‚Ñï_; _‚â§?_ to _‚â§‚Ñï?_; _<_ to _<‚Ñï_)
open import Data.Nat.Properties using (<-trans; ‚â∞‚áí>; <‚áí‚â¢; <‚áí‚âØ; ‚â§-refl; 1+n‚â∞n; _<?_; ‚â∞‚áí‚â•)
open import Data.Fin using (Fin; _<_; _‚â§?_) renaming (zero to fzero; suc to fsuc)
open import Data.Fin.Properties using (cmp; ‚â§-trans; ‚â§-antisym; ‚â§-total) renaming (_‚âü_ to _‚âüùîΩ_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Product using (_,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ)
open import Relation.Binary.Product.Pointwise using (_√ó-‚âü_)
open import Function using (_‚àò_)

open import RoutingLib.Data.Graph using (Graph; ‚àà-resp-‚â°‚Çó; _‚àà?_)
open import RoutingLib.Data.Graph.SimplePath2.NonEmpty
open import RoutingLib.Relation.Binary.RespectedBy using (_RespectedBy_)
open import RoutingLib.Data.Fin.Pigeonhole using (pigeonhole)
open import RoutingLib.Data.Maybe.Properties using (just-injective)

module RoutingLib.Data.Graph.SimplePath2.NonEmpty.Properties {n} where

  private
    _‚âüùîº_ : Decidable {A = Fin n √ó Fin n} _‚â°_
    _‚âüùîº_ = _‚âüùîΩ_ √ó-‚âü _‚âüùîΩ_
    
  -------------------
  -- Equality

  abstract

    ‚âà-refl : Reflexive (_‚âà_ {n})
    ‚âà-refl {[]}            = []
    ‚âà-refl {_ ‚à∑ _ ‚à£ _ ‚à£ _} = refl ‚à∑ ‚âà-refl

    ‚âà-sym : Symmetric (_‚âà_ {n})
    ‚âà-sym []           = []
    ‚âà-sym (refl ‚à∑ p‚âàq) = refl ‚à∑ (‚âà-sym p‚âàq)

    ‚âà-trans : Transitive (_‚âà_ {n})
    ‚âà-trans []            []           = []
    ‚âà-trans (refl ‚à∑ p‚âàq)  (refl ‚à∑ q‚âàr) = refl ‚à∑ (‚âà-trans p‚âàq q‚âàr)
{-
    _‚âü_ : Decidable (_‚âà_ {n})
    [] ‚âü [] = yes []
    [] ‚âü (k ‚à∑ q ‚à£ _ ‚à£ _) = no Œª()
    (i ‚à∑ p ‚à£ _ ‚à£ _) ‚âü [] = no Œª()
    (i ‚à∑ p ‚à£ _ ‚à£ _) ‚âü (k ‚à∑ q ‚à£ _ ‚à£ _) with i ‚âüùîº k | p ‚âü q
    ... | no  i‚â¢k | _       = no (Œª{(i‚â°k ‚à∑ _) ‚Üí i‚â¢k i‚â°k})
    ... | _       | no  p‚â¢q = no (Œª{(_ ‚à∑ p‚â°q) ‚Üí p‚â¢q p‚â°q})
    ... | yes i‚â°k | yes p‚â°q = yes (i‚â°k ‚à∑ p‚â°q)

    ‚âà-isEquivalence : IsEquivalence (_‚âà_ {n})
    ‚âà-isEquivalence = record 
      { refl  = ‚âà-refl 
      ; sym   = ‚âà-sym 
      ; trans = ‚âà-trans 
      }

    ‚âà-isDecEquivalence : IsDecEquivalence (_‚âà_ {n})
    ‚âà-isDecEquivalence = record 
      { isEquivalence = ‚âà-isEquivalence 
      ; _‚âü_           = _‚âü_ 
      }

  ‚âà-setoid : Setoid lzero lzero
  ‚âà-setoid = record 
    { Carrier       = SimplePath‚Åø·µó n 
    ; _‚âà_           = _‚âà_ 
    ; isEquivalence = ‚âà-isEquivalence 
    }

  ‚âà-decSetoid : DecSetoid lzero lzero
  ‚âà-decSetoid = record
    { Carrier          = SimplePath‚Åø·µó n 
    ; _‚âà_              = _‚âà_ 
    ; isDecEquivalence = ‚âà-isDecEquivalence 
    }


  abstract
  
    ----------------------
    -- Linking

    _‚áø?_ : Decidable (_‚áø_ {n})
    (i , j) ‚áø? [] with i ‚âüùîΩ j
    ... | yes i‚â°j = no  Œª{(start i‚â¢j) ‚Üí i‚â¢j i‚â°j}
    ... | no  i‚â¢j = yes (start i‚â¢j)
    (i , j) ‚áø? ((k , l) ‚à∑ p ‚à£ e‚áøp ‚à£ e‚àâp) with i ‚âüùîΩ j | j ‚âüùîΩ k
    ... | yes i‚â°j | _        = no Œª{(continue i‚â¢j) ‚Üí i‚â¢j i‚â°j}
    ... | no  _   | no  j‚â¢k  = no Œª{(continue _) ‚Üí j‚â¢k refl}
    ... | no  i‚â¢j | yes refl = yes (continue i‚â¢j)

    ‚áø-resp-‚âà : ‚àÄ {e : Fin n √ó Fin n} ‚Üí (e ‚áø_) Respects _‚âà_
    ‚áø-resp-‚âà []           (start i‚â¢j)    = start i‚â¢j
    ‚áø-resp-‚âà (refl ‚à∑ p‚âàq) (continue i‚â¢j) = continue i‚â¢j
-}  
    ij‚áøp‚áíi‚â¢j : ‚àÄ {n} {i j : Fin n} {p} ‚Üí (i , j) ‚áø p ‚Üí i ‚â¢ j
    ij‚áøp‚áíi‚â¢j (start    i‚â¢j) = i‚â¢j
    ij‚áøp‚áíi‚â¢j (continue i‚â¢j) = i‚â¢j
{-
  ----------------------
  -- Membership
  

    _‚àâ?_ : Decidable (_‚àâ_ {n})
    k ‚àâ? [] = yes notThere
    k ‚àâ? ((i , j) ‚à∑ p ‚à£ _ ‚à£ _) with k ‚âüùîΩ i | k ‚âüùîΩ j | k ‚àâ? p
    ... | yes k‚â°i | _       | _       = no  Œª{(notHere k‚â¢i _ _) ‚Üí k‚â¢i k‚â°i }
    ... | _       | yes k‚â°j | _       = no  Œª{(notHere _ k‚â¢j _) ‚Üí k‚â¢j k‚â°j }
    ... | _       | _       | no  i‚ààp = no  Œª{(notHere _ _ i‚àâp) ‚Üí i‚ààp i‚àâp}
    ... | no  k‚â¢i | no  k‚â¢j | yes i‚àâp = yes (notHere k‚â¢i k‚â¢j i‚àâp)

    ‚àâ-resp-‚âà : ‚àÄ {k : Fin n} ‚Üí (k ‚àâ_) Respects _‚âà_
    ‚àâ-resp-‚âà []            notThere             = notThere
    ‚àâ-resp-‚âà (refl ‚à∑ p‚âàq) (notHere k‚â¢i k‚â¢j k‚àâp) = notHere k‚â¢i k‚â¢j (‚àâ-resp-‚âà p‚âàq k‚àâp)
    
    -------------------
    -- Orderings
    
    ‚â§‚Çó‚Çë‚Çì-refl : Reflexive (_‚â§‚Çó‚Çë‚Çì_ {n})
    ‚â§‚Çó‚Çë‚Çì-refl {[]}            = stop
    ‚â§‚Çó‚Çë‚Çì-refl {i ‚à∑ p ‚à£ _ ‚à£ _} = step refl refl ‚â§‚Çó‚Çë‚Çì-refl

    ‚â§‚Çó‚Çë‚Çì-trans : Transitive (_‚â§‚Çó‚Çë‚Çì_ {n})
    ‚â§‚Çó‚Çë‚Çì-trans stop                  _                     = stop
    ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (here‚ÇÅ j<k)           = here‚ÇÅ (<-trans i<j j<k)
    ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (here‚ÇÇ refl j<k)      = here‚ÇÅ i<j
    ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÅ i<j)           (step  refl refl q‚â§r) = here‚ÇÅ i<j
    ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (here‚ÇÅ j<k)           = here‚ÇÅ j<k
    ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (here‚ÇÇ refl j<k)      = here‚ÇÇ refl (<-trans i<j j<k)
    ‚â§‚Çó‚Çë‚Çì-trans (here‚ÇÇ refl i<j)      (step  refl refl q‚â§r) = here‚ÇÇ refl i<j
    ‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (here‚ÇÅ j<k)           = here‚ÇÅ j<k
    ‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (here‚ÇÇ refl j<k)      = here‚ÇÇ refl j<k
    ‚â§‚Çó‚Çë‚Çì-trans (step  refl refl p‚â§q) (step  refl refl q‚â§r) = step refl refl (‚â§‚Çó‚Çë‚Çì-trans p‚â§q q‚â§r)

    ‚â§‚Çó‚Çë‚Çì-antisym : Antisymmetric _‚âà_ (_‚â§‚Çó‚Çë‚Çì_ {n})
    ‚â§‚Çó‚Çë‚Çì-antisym stop                  stop                  = []
    ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (here‚ÇÅ j<i)           = contradiction i<j (<‚áí‚âØ j<i)
    ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (here‚ÇÇ refl j<i)      = contradiction i<j 1+n‚â∞n
    ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÅ i<j)           (step  refl refl p‚â§q) = contradiction i<j 1+n‚â∞n
    ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (here‚ÇÅ j<i)           = contradiction j<i 1+n‚â∞n
    ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (here‚ÇÇ refl j<i)      = contradiction i<j (<‚áí‚âØ j<i)
    ‚â§‚Çó‚Çë‚Çì-antisym (here‚ÇÇ refl i<j)      (step  refl refl p‚â§q) = contradiction i<j 1+n‚â∞n
    ‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl i<j) (here‚ÇÅ j<i)           = contradiction j<i 1+n‚â∞n
    ‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl _)   (here‚ÇÇ _ j<i)         = contradiction j<i 1+n‚â∞n
    ‚â§‚Çó‚Çë‚Çì-antisym (step  refl refl p‚â§q) (step refl refl q‚â§p)  = refl ‚à∑ ‚â§‚Çó‚Çë‚Çì-antisym p‚â§q q‚â§p

    _‚â§‚Çó‚Çë‚Çì?_ : Decidable (_‚â§‚Çó‚Çë‚Çì_ {n})
    [] ‚â§‚Çó‚Çë‚Çì? _ = yes stop
    (i ‚à∑ p ‚à£ _ ‚à£ _) ‚â§‚Çó‚Çë‚Çì? []          = no Œª()
    ((i , j) ‚à∑ p ‚à£ _ ‚à£ _) ‚â§‚Çó‚Çë‚Çì? ((k , l) ‚à∑ q ‚à£ _ ‚à£ _) with cmp i k | cmp j l |  p ‚â§‚Çó‚Çë‚Çì? q
    ... | tri< i<k _   _ | _              | _       = yes (here‚ÇÅ i<k)
    ... | tri> i‚âÆk i‚â¢k _ | _              | _       = no Œª
                                                     { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
                                                     ; (here‚ÇÇ i‚â°k _)   ‚Üí i‚â¢k i‚â°k
                                                     ; (step  i‚â°k _ _) ‚Üí i‚â¢k i‚â°k
                                                     }
    ... | tri‚âà _   i‚â°k _ | tri< j<l _   _ | _       = yes (here‚ÇÇ i‚â°k j<l)
    ... | tri‚âà i‚âÆk _   _ | tri> j‚âÆl j‚â¢l _ | _       = no Œª
                                                     { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
                                                     ; (here‚ÇÇ _ j<l)   ‚Üí j‚âÆl j<l
                                                     ; (step  _ j‚â°l _) ‚Üí j‚â¢l j‚â°l
                                                     }
    ... | tri‚âà i‚âÆk _   _ | tri‚âà j‚âÆl _ _   | no  p‚â∞q = no Œª
                                                     { (here‚ÇÅ i<k)     ‚Üí i‚âÆk i<k
                                                     ; (here‚ÇÇ _ j<l)   ‚Üí j‚âÆl j<l
                                                     ; (step  _ _ p‚â§q) ‚Üí p‚â∞q p‚â§q
                                                     }
    ... | tri‚âà _   i‚â°k _ | tri‚âà _ j‚â°l _   | yes p‚â§q = yes (step i‚â°k j‚â°l p‚â§q)

    ‚â§‚Çó‚Çë‚Çì-resp-‚âà : (_‚â§‚Çó‚Çë‚Çì_ {n}) RespectedBy _‚âà_
    ‚â§‚Çó‚Çë‚Çì-resp-‚âà []            _             stop                 = stop
    ‚â§‚Çó‚Çë‚Çì-resp-‚âà (refl ‚à∑ _)    (refl ‚à∑ _)    (here‚ÇÅ i<k)          = here‚ÇÅ i<k
    ‚â§‚Çó‚Çë‚Çì-resp-‚âà (refl ‚à∑ _)    (refl ‚à∑ _)    (here‚ÇÇ i‚â°k j<l)      = here‚ÇÇ i‚â°k j<l
    ‚â§‚Çó‚Çë‚Çì-resp-‚âà (refl ‚à∑ p‚âàq)  (refl ‚à∑ r‚âàs)  (step refl refl p‚â§r) = step refl refl (‚â§‚Çó‚Çë‚Çì-resp-‚âà p‚âàq r‚âàs p‚â§r)
    
    --------------------
    -- Operations

    p‚âàq‚áí|p|‚â°|q| : ‚àÄ {p q : SimplePath‚Åø·µó n} ‚Üí p ‚âà q ‚Üí length p ‚â° length q
    p‚âàq‚áí|p|‚â°|q| []        = refl
    p‚âàq‚áí|p|‚â°|q| (_ ‚à∑ p‚âàq) = cong suc (p‚âàq‚áí|p|‚â°|q| p‚âàq)

    p‚ââi‚à∑p : ‚àÄ {e} {p : SimplePath‚Åø·µó n} {e‚áøp e‚àâp} ‚Üí ¬¨ (p ‚âà e ‚à∑ p ‚à£ e‚áøp ‚à£ e‚àâp)
    p‚ââi‚à∑p {p = []}            ()
    p‚ââi‚à∑p {p = _ ‚à∑ _ ‚à£ _ ‚à£ _} (_ ‚à∑ p‚âài‚à∑p) = p‚ââi‚à∑p p‚âài‚à∑p
-}

    ‚àâ-lookup : ‚àÄ {p : SimplePath‚Åø·µó n} (p‚Å∫ : NonEmpty p) ‚Üí
               ‚àÄ e ‚Üí e ‚àâ p ‚Üí ‚àÄ i ‚Üí e ‚â¢ lookup·µ• p‚Å∫ i
    ‚àâ-lookup = {!!}

    lookup! : ‚àÄ {p : SimplePath‚Åø·µó n} (p‚Å∫ : NonEmpty p) ‚Üí ‚àÄ k l ‚Üí k ‚â¢ l ‚Üí lookup·µ• p‚Å∫ k ‚â¢ lookup·µ• p‚Å∫ l
    lookup! (nonEmpty e p e‚áøp e‚àâp)               fzero           fzero           0‚â¢0 = contradiction refl 0‚â¢0
    lookup! (nonEmpty e p e‚áøp e‚àâp)               fzero           (fsuc fzero)    _   = ij‚áøp‚áíi‚â¢j e‚áøp ‚àò sym
    lookup! (nonEmpty e [] e‚áøp e‚àâp)              fzero           (fsuc (fsuc ()))
    lookup! (nonEmpty e (_ ‚à∑ _ ‚à£ _ ‚à£ _) e‚áøp e‚àâp) fzero           (fsuc (fsuc l)) _   = ‚àâ-lookup {!!} (proj‚ÇÇ e) {!!} l
    lookup! (nonEmpty e p e‚áøp e‚àâp)               (fsuc fzero)    fzero           _   = ij‚áøp‚áíi‚â¢j e‚áøp
    lookup! (nonEmpty e [] e‚áøp e‚àâp)              (fsuc (fsuc ())) _      
    lookup! (nonEmpty e (_ ‚à∑ _ ‚à£ _ ‚à£ _) e‚áøp e‚àâp) (fsuc (fsuc k)) fzero           _   = {!!}
    lookup! (nonEmpty e p e‚áøp e‚àâp)               (fsuc fzero)    (fsuc fzero)    1‚â¢1 = contradiction refl 1‚â¢1
    lookup! (nonEmpty e p e‚áøp e‚àâp)               (fsuc fzero)    (fsuc (fsuc l)) _   = {!!}
    lookup! (nonEmpty e p e‚áøp e‚àâp)               (fsuc (fsuc k)) (fsuc fzero)    _   = {!!}
    lookup! (nonEmpty e (_ ‚à∑ _ ‚à£ _ ‚à£ _) e‚áøp e‚àâp) (fsuc (fsuc k)) (fsuc (fsuc l)) k‚â¢l = lookup! (nonEmpty _ _ _ _) (fsuc k) (fsuc l) (k‚â¢l ‚àò cong fsuc)

    |p|<n : ‚àÄ {p : SimplePath‚Åø·µó n} ‚Üí NonEmpty p ‚Üí length p <‚Ñï n
    |p|<n q@(nonEmpty e p e‚áøp e‚àâp) with suc (length p) <? n
    ... | yes |q|<n = |q|<n
    ... | no  |q|‚âÆn with pigeonhole (‚â∞‚áí> |q|‚âÆn) (lookup·µ• q)
    ...   | i , j , i‚â¢j , p·µ¢‚â°p‚±º = contradiction p·µ¢‚â°p‚±º (lookup! q i j i‚â¢j)
