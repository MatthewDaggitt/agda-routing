open import Algebra.FunctionProperties using (Op‚ÇÇ; Congruent‚ÇÇ; Congruent‚ÇÅ)
open import Data.Fin using (Fin)
open import Data.Nat using (‚Ñï; suc)
open import Data.Product using (_√ó_; _,_)
open import Data.Maybe
open import Level using (_‚äî_) renaming (zero to lzero; suc to lsuc)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Binary using (Rel; IsDecEquivalence; Setoid; DecSetoid)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import RoutingLib.Data.Matrix using (SquareMatrix)
open import RoutingLib.Data.Table using (Table)
import RoutingLib.Data.Matrix.Relation.DecidableEquality as MatrixDecEquality
import RoutingLib.Data.Table.Relation.DecidableEquality as TableDecEquality
open import RoutingLib.Data.SimplePath
  using (SimplePath; valid; invalid; []; _‚à∑_‚à£_‚à£_)
open import RoutingLib.Data.SimplePath.Relation.Equality
import RoutingLib.Relation.Binary.NaturalOrder.Right as RightNaturalOrder

module RoutingLib.Routing.Definitions where

  ---------------------
  -- Routing algebra --
  ---------------------
  -- A routing algebra represents the underlying algebra
  -- for a set of routing problems.

  record RoutingAlgebra a b ‚Ñì : Set (lsuc (a ‚äî b ‚äî ‚Ñì)) where
    no-eta-equality -- Needed due to bug #2732 in Agda
    
    infix 7 _‚äï_
    infix 6 _‚ñ∑_
    infix 4 _‚âà_ _‚ââ_

    field
      Step  : Set a
      Route : Set b
      _‚äï_   : Op‚ÇÇ Route
      _‚ñ∑_   : Step ‚Üí Route ‚Üí Route
      0#    : Route
      1#    : Route

      _‚âà_                : Rel Route ‚Ñì
      ‚âà-isDecEquivalence : IsDecEquivalence _‚âà_
      ‚äï-cong             : Congruent‚ÇÇ _‚âà_ _‚äï_
      ‚ñ∑-cong             : ‚àÄ e ‚Üí Congruent‚ÇÅ _‚âà_ (e ‚ñ∑_)

    -- A few useful consequences of equality to export
    _‚ââ_ : Rel Route ‚Ñì
    x ‚ââ y = ¬¨ (x ‚âà y)

    open IsDecEquivalence ‚âà-isDecEquivalence renaming
      ( refl          to ‚âà-refl
      ; reflexive     to ‚âà-reflexive
      ; sym           to ‚âà-sym
      ; trans         to ‚âà-trans
      ; isEquivalence to ‚âà-isEquivalence
      ) public

    S : Setoid b ‚Ñì
    S = record { isEquivalence = ‚âà-isEquivalence }

    DS : DecSetoid b ‚Ñì
    DS = record { isDecEquivalence = ‚âà-isDecEquivalence }    
    
    open RightNaturalOrder _‚âà_ _‚äï_ public
      using () renaming
      ( _‚â§_ to _‚â§‚Çä_
      ; _‚â∞_ to _‚â∞‚Çä_
      ; _<_ to _<‚Çä_
      )
      
    
  
  ---------------------
  -- Routing problem --
  ---------------------
  -- An instantiation of a specific routing problem for a routing algebra
  -- In particular we need an adjacency matrix (representing the topology)

  record RoutingProblem
    {a b ‚Ñì} (ùì°ùìê : RoutingAlgebra a b ‚Ñì) (n-1 : ‚Ñï)
    : Set (lsuc (a ‚äî b ‚äî ‚Ñì)) where
    no-eta-equality -- Needed due to bug #2732 in Agda
    
    field
      A  : SquareMatrix (RoutingAlgebra.Step ùì°ùìê) (suc n-1)

    n : ‚Ñï
    n = suc n-1
    
    Node : Set
    Node = Fin n

    Edge : Set
    Edge = Fin n √ó Fin n
    
    open RoutingAlgebra ùì°ùìê public
    open MatrixDecEquality DS public
    open TableDecEquality DS using (ùïã‚Çõ)

    RTable : Set b
    RTable = Table Route n
    
    RMatrix : Set b
    RMatrix = SquareMatrix Route n

    ‚Ñùùïã‚Çõ : Setoid b ‚Ñì
    ‚Ñùùïã‚Çõ = ùïã‚Çõ n
    
    ‚ÑùùïÑ‚Çõ : Setoid b ‚Ñì
    ‚ÑùùïÑ‚Çõ = ùïÑ‚Çõ n n

    Dec‚ÑùùïÑ‚Çõ : DecSetoid b ‚Ñì
    Dec‚ÑùùïÑ‚Çõ = DecùïÑ‚Çõ n n
    
    weight : SimplePath n ‚Üí Route
    weight invalid                       = 0#
    weight (valid [])                    = 1#
    weight (valid ((i , j) ‚à∑ p ‚à£ _ ‚à£ _)) = A i j ‚ñ∑ weight (valid p)
    
    weight-cong : ‚àÄ {p q : SimplePath n} ‚Üí p ‚âà‚Çö q ‚Üí weight p ‚âà weight q
    weight-cong invalid              = ‚âà-refl
    weight-cong (valid [])           = ‚âà-refl
    weight-cong (valid (refl ‚à∑ p‚âàq)) = ‚ñ∑-cong _ (weight-cong (valid p‚âàq))
