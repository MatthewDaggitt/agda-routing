open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (_Preserves_‚ü∂_; _Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; subst‚ÇÇ; module ‚â°-Reasoning)
open import Data.List using (List; _‚à∑_)
open import Data.List.Any.Membership.Propositional using (_‚àà_)
open import Data.Nat using (‚Ñï; suc; zero; z‚â§n; s‚â§s; _‚äî_; _‚â§_; _‚â•_; _<_)
open import Data.Nat.Properties using (m‚â§m‚äîn; n‚â§m‚äîn; <‚áí‚â¢; <‚áí‚â§; <‚áí‚â±; ‚â§+‚â¢‚áí<; ‚äî-comm; ‚äî-identity ≥; ‚äî-mono-‚â§; ‚äî-mono-<; ‚â§-total; ‚â§-reflexive; ‚â§-refl; ‚â§-trans)
open import Data.Product using (‚àÉ; _,_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Function using (_‚àò_)

open import RoutingLib.Data.List.Uniqueness.Propositional using (Unique)
open import RoutingLib.Data.List.Sorting using (Sorted)
open import RoutingLib.Data.Matrix using (Matrix; zipWith; max‚Å∫)
open import RoutingLib.Data.Nat.Properties using (‚Ñï‚Çõ; m‚â§n‚áím‚â§n‚äîo; n‚â§m‚áím‚äîn‚â°m; n‚â§m√óo‚â§m‚áín‚äîo‚â§m; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Function.Distance using (Ultrametric; IsUltrametric; Bounded; MaxTriangleIneq)

open import RoutingLib.Routing.Definitions using (RoutingProblem; RoutingAlgebra)
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions
import RoutingLib.Routing.BellmanFord.DistanceVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.DistanceVector.Step1_HeightFunction as Step1

module RoutingLib.Routing.BellmanFord.DistanceVector.Step2_RouteMetric
  {a b ‚Ñì n-1}
  {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  (ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)) 
  (ùì¢ùìí : SufficientConditions ùì°ùìê)
  where
  
  open Prelude ùì°ùìü ùì¢ùìí
  open Step1 ùì°ùìü ùì¢ùìí using
    ( h
    ; h-resp-‚âà
    ; h-cancel-‚â°
    ; h-resp-<
    ; 1‚â§h
    ; h‚â§H
    )

  abstract

    h-resp-‚â§ : h Preserves _‚â§‚Çä_ ‚ü∂ _‚â•_
    h-resp-‚â§ {u} {v} u‚â§v with u ‚âü v
    ... | yes u‚âàv = ‚â§-reflexive (h-resp-‚âà (‚âà-sym u‚âàv))
    ... | no  u‚ââv = <‚áí‚â§ (h-resp-< (u‚â§v , u‚ââv))
    
    h[fx]<h[x] : ‚àÄ e {x} ‚Üí x ‚ââ 0# ‚Üí h (e ‚ñ∑ x) < h x
    h[fx]<h[x] e x‚ââ0 = h-resp-< (‚äï-almost-strictly-absorbs-‚ñ∑ e x‚ââ0)

    ----------------------------
    -- distance between two routes
    
    d : Route ‚Üí Route ‚Üí ‚Ñï
    d x y with x ‚âü y
    ... | yes _ = zero
    ... | no  _ = h x ‚äî h y

    d-cong : d Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
    d-cong {x} {y} {u} {v} x‚âày u‚âàv with x ‚âü u | y ‚âü v
    ... | yes _   | yes _   = refl
    ... | yes x‚âàu | no  y‚ââv = contradiction (‚âà-trans (‚âà-trans (‚âà-sym x‚âày) x‚âàu) u‚âàv) y‚ââv
    ... | no  x‚ââu | yes y‚âàv = contradiction (‚âà-trans (‚âà-trans x‚âày y‚âàv) (‚âà-sym u‚âàv)) x‚ââu
    ... | no  _   | no  _   = cong‚ÇÇ _‚äî_ (h-resp-‚âà x‚âày) (h-resp-‚âà u‚âàv)

    x‚âày‚áíd‚â°0 : ‚àÄ {x y} ‚Üí x ‚âà y ‚Üí d x y ‚â° 0
    x‚âày‚áíd‚â°0 {x} {y} x‚âày with x ‚âü y
    ... | yes _   = refl
    ... | no  x‚âây = contradiction x‚âày x‚âây

    d‚â°0‚áíx‚âày : ‚àÄ {x y} ‚Üí d x y ‚â° 0 ‚Üí x ‚âà y
    d‚â°0‚áíx‚âày {x} {y} d‚â°0 with x ‚âü y 
    ... | yes x‚âày = x‚âày
    ... | no  _   = contradiction (sym d‚â°0) (<‚áí‚â¢ (m‚â§n‚áím‚â§n‚äîo (h y) (1‚â§h x)))
    
    d-sym : ‚àÄ x y ‚Üí d x y ‚â° d y x
    d-sym x y with x ‚âü y | y ‚âü x
    ... | yes _   | yes _   = refl
    ... | no  x‚âây | yes y‚âàx = contradiction (‚âà-sym y‚âàx) x‚âây 
    ... | yes x‚âày | no  y‚ââx = contradiction (‚âà-sym x‚âày) y‚ââx 
    ... | no  _   | no  _   = ‚äî-comm (h x) (h y)

    d-maxTriIneq : MaxTriangleIneq S d
    d-maxTriIneq x y z with x ‚âü y | y ‚âü z | x ‚âü z
    ... | _       | _       | yes _  = z‚â§n
    ... | yes x‚âày | yes y‚âàz | no x‚ââz = contradiction (‚âà-trans x‚âày y‚âàz) x‚ââz
    ... | yes x‚âày | no  _   | no _   = ‚â§-reflexive (cong‚ÇÇ _‚äî_ (h-resp-‚âà x‚âày) (refl {x = h z}))
    ... | no  _   | no  _   | no _   = ‚äî-mono-‚â§ (m‚â§m‚äîn (h x) (h y)) (n‚â§m‚äîn (h y) (h z))
    ... | no  _   | yes y‚âàz | no _   = begin
      h x ‚äî h z     ‚â°‚ü® cong (h x ‚äî_) (h-resp-‚âà (‚âà-sym y‚âàz)) ‚ü©
      h x ‚äî h y     ‚â°‚ü® sym (‚äî-identity ≥ _) ‚ü©
      h x ‚äî h y ‚äî 0 ‚àé     
      where open ‚â§-Reasoning
{- 
    strIncr-lemma : ‚àÄ f {x y} ‚Üí x ‚ââ 0# ‚Üí y ‚âà 0# ‚Üí h (f ‚ñ∑ x) ‚äî h (f ‚ñ∑ y) < h x ‚äî h y
    strIncr-lemma f {x} {y} x‚ââ0 y‚âà0 = begin
      suc (h (f ‚ñ∑ x) ‚äî h (f ‚ñ∑ y))  ‚â°‚ü® cong (Œª v ‚Üí suc (h (f ‚ñ∑ x) ‚äî v)) (h-resp-‚âà (‚ñ∑-cong f y‚âà0)) ‚ü©
      suc (h (f ‚ñ∑ x) ‚äî h (f ‚ñ∑ 0#)) ‚â°‚ü® cong (Œª v ‚Üí suc (h (f ‚ñ∑ x) ‚äî v)) (h-resp-‚âà (0#-an-‚ñ∑ f)) ‚ü©
      suc (h (f ‚ñ∑ x) ‚äî h 0#)       ‚â°‚ü® cong suc (n‚â§m‚áím‚äîn‚â°m (h-resp-‚â§ (0#-id‚Çó-‚äï _))) ‚ü©
      suc (h (f ‚ñ∑ x))              ‚â§‚ü® h[fx]<h[x] f x‚ââ0 ‚ü©
      h x                          ‚â°‚ü® sym (n‚â§m‚áím‚äîn‚â°m (h-resp-‚â§ (0#-id‚Çó-‚äï _))) ‚ü©
      h x            ‚äî h 0#        ‚â°‚ü® cong (h x ‚äî_) (h-resp-‚âà (‚âà-sym y‚âà0)) ‚ü©
      h x            ‚äî h y         ‚àé
      where open ‚â§-Reasoning

    
    d-strContr : ‚àÄ f {x y} ‚Üí x ‚ââ y ‚Üí d (f ‚ñ∑ x) (f ‚ñ∑ y) < d x y
    d-strContr f {x} {y} x‚âây with x ‚âü y | f ‚ñ∑ x ‚âü f ‚ñ∑ y
    ... | yes x‚âày | _           = contradiction x‚âày x‚âây
    ... | no  _   | yes e‚ñ∑x‚âàe‚ñ∑y = m‚â§n‚áím‚â§n‚äîo (h y) (1‚â§h x)
    ... | no  _   | no  _       with x ‚âü 0# | y ‚âü 0#
    ...   | yes x‚âà0 | yes y‚âà0 = contradiction (‚âà-trans x‚âà0 (‚âà-sym y‚âà0)) x‚âây
    ...   | yes x‚âà0 | no  y‚ââ0 = subst‚ÇÇ _<_ (‚äî-comm (h (f ‚ñ∑ y)) (h (f ‚ñ∑ x))) (‚äî-comm (h y) (h x)) (strIncr-lemma f y‚ââ0 x‚âà0)
    ...   | no  x‚ââ0 | yes y‚âà0 = strIncr-lemma f x‚ââ0 y‚âà0
    ...   | no  x‚ââ0 | no  y‚ââ0 = ‚äî-mono-< (h[fx]<h[x] f x‚ââ0) (h[fx]<h[x] f y‚ââ0)

    d-mono : ‚àÄ {x a b} ‚Üí x ‚â§‚Çä a ‚Üí x <‚Çä b ‚Üí d x a ‚â§ d x b
    d-mono {x} {a} {b} x‚â§a (x‚â§b , x‚ââb) with x ‚âü a | x ‚âü b
    ... | yes _ | _       = z‚â§n
    ... | no  _ | yes x‚âàb = contradiction x‚âàb x‚ââb
    ... | no  _ | no  _   = ‚â§‚Ñï-reflexive (trans (n‚â§m‚áím‚äîn‚â°m (h-resp-‚â§ x‚â§a)) (sym (n‚â§m‚áím‚äîn‚â°m (h-resp-‚â§ x‚â§b))))

-}


    d-strContr2-lemma : ‚àÄ {X Y r s} ‚Üí
                        (‚àÄ u v ‚Üí X u v ‚ââ Y u v ‚Üí d (X u v) (Y u v) ‚â§ h (X r s) ‚äî h (Y r s)) ‚Üí
                        ‚àÄ {i j} ‚Üí h (œÉ Y i j) < h (œÉ X i j) ‚Üí
                        h (œÉ X i j) ‚äî h (œÉ Y i j) < h (X r s) ‚äî h (Y r s)
    d-strContr2-lemma {X} {Y} {r} {s} d‚â§hX·µ£‚Çõ‚äîhY·µ£‚Çõ {i} {j} hœÉX·µ¢‚±º<hœÉY·µ¢‚±º with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º X i j
    ... | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º = contradiction (h-resp-‚â§ {!!}) (<‚áí‚â± hœÉX·µ¢‚±º<hœÉY·µ¢‚±º)
    ... | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º) = begin
      h (œÉ X i j) ‚äî h (œÉ Y i j)   ‚â°‚ü® {!m‚â§n‚áín‚äîm‚â°m ?!} ‚ü©
      h (œÉ X i j)                 <‚ü® {!!} ‚ü©
      h (A i k ‚ñ∑ X k j)           ‚â°‚ü® {!!} ‚ü©
      h (X k j)                   ‚â§‚ü® {!!} ‚ü©
      h (X k j)                   ‚â§‚ü® {!!} ‚ü©
      d (X k j) (Y k j)           ‚â§‚ü® {!!} ‚ü©
      h (X r s)   ‚äî h (Y r s)     ‚àé
      where open ‚â§-Reasoning
{-
    d-strContr : ‚àÄ {X Y r s} ‚Üí X r s ‚ââ Y r s ‚Üí
                  (‚àÄ u v ‚Üí X u v ‚ââ Y u v ‚Üí d (X u v) (Y u v) ‚â§ d (X r s) (Y r s)) ‚Üí
                  ‚àÄ i j ‚Üí d (œÉ X i j) (œÉ Y i j) < d (X r s) (Y r s) 
    d-strContr {X} {Y} {r} {s} X·µ£‚Çõ‚ââY·µ£‚Çõ d‚â§dX·µ£‚ÇõY·µ£‚Çõ i j with X r s ‚âü Y r s | œÉ X i j ‚âü œÉ Y i j
    ... | yes X·µ£‚Çõ‚âàY·µ£‚Çõ | _            = contradiction X·µ£‚Çõ‚âàY·µ£‚Çõ X·µ£‚Çõ‚ââY·µ£‚Çõ
    ... | no  _      | yes œÉX·µ¢‚±º‚âàœÉY·µ¢‚±º = m‚â§n‚áím‚â§n‚äîo (h (Y r s)) (1‚â§h (X r s))
    ... | no  _      | no  œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º with ‚â§-total (h (œÉ Y i j)) (h (œÉ X i j))
    ...   | inj‚ÇÅ hœÉY·µ¢‚±º‚â§hœÉX·µ¢‚±º = d-strContr2-lemma d‚â§dX·µ£‚ÇõY·µ£‚Çõ (‚â§+‚â¢‚áí< hœÉY·µ¢‚±º‚â§hœÉX·µ¢‚±º (œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º ‚àò h-cancel-‚â° ‚àò sym))
    ...   | inj‚ÇÇ hœÉX·µ¢‚±º‚â§hœÉY·µ¢‚±º = begin
      h (œÉ X i j) ‚äî h (œÉ Y i j) ‚â°‚ü® ‚äî-comm (h (œÉ X i j)) (h (œÉ Y i j)) ‚ü©
      h (œÉ Y i j) ‚äî h (œÉ X i j) <‚ü® d-strContr2-lemma d‚â§dY·µ£‚ÇõX·µ£‚Çõ (‚â§+‚â¢‚áí< hœÉX·µ¢‚±º‚â§hœÉY·µ¢‚±º (œÉX·µ¢‚±º‚ââœÉY·µ¢‚±º ‚àò h-cancel-‚â°)) ‚ü©
      h (Y r s)   ‚äî h (X r s)   ‚â°‚ü® ‚äî-comm (h (Y r s)) (h (X r s)) ‚ü©
      h (X r s)   ‚äî h (Y r s)   ‚àé
      where
      open ‚â§-Reasoning

      d‚â§dY·µ£‚ÇõX·µ£‚Çõ : ‚àÄ u v ‚Üí Y u v ‚ââ X u v ‚Üí d (Y u v) (X u v) ‚â§ h (Y r s) ‚äî h (X r s)
      d‚â§dY·µ£‚ÇõX·µ£‚Çõ u v Y·µ§·µ•‚ââX·µ§·µ•
        rewrite d-sym (Y u v) (X u v) | ‚äî-comm (h (Y r s)) (h (X r s))
        = d‚â§dX·µ£‚ÇõY·µ£‚Çõ u v (Y·µ§·µ•‚ââX·µ§·µ• ‚àò ‚âà-sym) 


    d‚â§H : ‚àÄ x y ‚Üí d x y ‚â§ H
    d‚â§H x y with x ‚âü y
    ... | yes _ = z‚â§n
    ... | no  _ = n‚â§m√óo‚â§m‚áín‚äîo‚â§m (h‚â§H x) (h‚â§H y)

    d-bounded : Bounded S d
    d-bounded = H , d‚â§H
    
    d-isUltrametric : IsUltrametric S d
    d-isUltrametric = record 
      { eq‚áí0        = x‚âày‚áíd‚â°0 
      ; 0‚áíeq        = d‚â°0‚áíx‚âày 
      ; sym         = d-sym 
      ; maxTriangle = d-maxTriIneq
      ; cong        = d-cong
      }

  d-ultrametric : Ultrametric S
  d-ultrametric = record
    { d             = d
    ; isUltrametric = d-isUltrametric
    }
-}
