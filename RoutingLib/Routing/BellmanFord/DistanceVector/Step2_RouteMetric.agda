open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; module ‚â°-Reasoning)
open import Data.List using (List; _‚à∑_)
open import Data.List.Any.Membership.Propositional using (_‚àà_)
open import Data.Nat using (‚Ñï; suc; zero; z‚â§n; s‚â§s; _‚äî_) renaming (_‚â§_ to _‚â§‚Ñï_)
open import Data.Nat.Properties using (m‚â§m‚äîn; n‚â§m‚äîn; <‚áí‚â¢; ‚äî-comm; ‚äî-identity ≥; ‚äî-mono-‚â§; module ‚â§-Reasoning) renaming (‚â§-reflexive to ‚â§‚Ñï-reflexive; ‚â§-refl to ‚â§‚Ñï-refl; ‚â§-trans to ‚â§‚Ñï-trans; ‚â§-antisym to ‚â§‚Ñï-antisym; ‚â§-decTotalOrder to ‚â§‚Ñï-decTotalOrder)
open import Data.Product using (‚àÉ)

open import RoutingLib.Data.List.Uniqueness.Propositional using (Unique)
open import RoutingLib.Data.List.Sorting using (Sorted)
open import RoutingLib.Data.Matrix using (Matrix; zipWith; max‚Å∫)
open import RoutingLib.Data.Nat.Properties using (‚Ñï‚Çõ; m‚â§n‚áím‚â§n‚äîo)
open import RoutingLib.Function.Distance using (IsUltrametric; MaxTriangleIneq)

open import RoutingLib.Routing.Definitions using (RoutingProblem; RoutingAlgebra)
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions
import RoutingLib.Routing.BellmanFord.DistanceVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.DistanceVector.Step1_HeightFunction as Step1

module RoutingLib.Routing.BellmanFord.DistanceVector.Step2_RouteMetric
  {a b ‚Ñì n-1}
  {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  (ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)) 
  (ùì¢ùìí : SufficientConditions ùì°ùìê)
  where
  
  open Prelude ùì°ùìü ùì¢ùìí
  open Step1 ùì°ùìü ùì¢ùìí using
    ( h
    ; h-resp-‚âà
    ; 1‚â§h
    ; h-image
    ; h-image!
    ; h-image-complete
    ; h-image-sound
    ; h-image‚Üó
    )

  abstract
  
    ----------------------------
    -- distance between two routes
    
    d : Route ‚Üí Route ‚Üí ‚Ñï
    d x y with x ‚âü y
    ... | yes _ = zero
    ... | no  _ = h x ‚äî h y

    d-cong : d Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
    d-cong {x} {y} {u} {v} x‚âày u‚âàv with x ‚âü u | y ‚âü v
    ... | yes _   | yes _   = refl
    ... | yes x‚âàu | no  y‚ââv = contradiction (‚âà-trans (‚âà-trans (‚âà-sym x‚âày) x‚âàu) u‚âàv) y‚ââv
    ... | no  x‚ââu | yes y‚âàv = contradiction (‚âà-trans (‚âà-trans x‚âày y‚âàv) (‚âà-sym u‚âàv)) x‚ââu
    ... | no  _   | no  _   = cong‚ÇÇ _‚äî_ (h-resp-‚âà x‚âày) (h-resp-‚âà u‚âàv)

    x‚âày‚áíd‚â°0 : ‚àÄ {x y} ‚Üí x ‚âà y ‚Üí d x y ‚â° 0
    x‚âày‚áíd‚â°0 {x} {y} x‚âày with x ‚âü y
    ... | yes _   = refl
    ... | no  x‚âây = contradiction x‚âày x‚âây

    d‚â°0‚áíx‚âày : ‚àÄ {x y} ‚Üí d x y ‚â° 0 ‚Üí x ‚âà y
    d‚â°0‚áíx‚âày {x} {y} d‚â°0 with x ‚âü y 
    ... | yes x‚âày = x‚âày
    ... | no  _   = contradiction (sym d‚â°0) (<‚áí‚â¢ (m‚â§n‚áím‚â§n‚äîo (h y) (1‚â§h x)))
    
    d-sym : ‚àÄ x y ‚Üí d x y ‚â° d y x
    d-sym x y with x ‚âü y | y ‚âü x
    ... | yes _   | yes _   = refl
    ... | no  x‚âây | yes y‚âàx = contradiction (‚âà-sym y‚âàx) x‚âây 
    ... | yes x‚âày | no  y‚ââx = contradiction (‚âà-sym x‚âày) y‚ââx 
    ... | no  _   | no  _   = ‚äî-comm (h x) (h y)

    d-maxTriIneq : MaxTriangleIneq S d
    d-maxTriIneq x y z with x ‚âü y | y ‚âü z | x ‚âü z
    ... | _       | _       | yes _  = z‚â§n
    ... | yes x‚âày | yes y‚âàz | no x‚ââz = contradiction (‚âà-trans x‚âày y‚âàz) x‚ââz
    ... | yes x‚âày | no  _   | no _   = ‚â§‚Ñï-reflexive (cong‚ÇÇ _‚äî_ (h-resp-‚âà x‚âày) (refl {x = h z}))
    ... | no  _   | no  _   | no _   = ‚äî-mono-‚â§ (m‚â§m‚äîn (h x) (h y)) (n‚â§m‚äîn (h y) (h z))
    ... | no  _   | yes y‚âàz | no _   = begin
      h x ‚äî h z     ‚â°‚ü® cong (h x ‚äî_) (h-resp-‚âà (‚âà-sym y‚âàz)) ‚ü©
      h x ‚äî h y     ‚â°‚ü® sym (‚äî-identity ≥ _) ‚ü©
      h x ‚äî h y ‚äî 0 ‚àé     
      where open ‚â§-Reasoning





    -- We can therefore reconstruct the image of d

    postulate d-image : List ‚Ñï
    --d-image = 0 ‚à∑ h-image
    
    postulate d-image! : Unique d-image
    --d-image! = {!!}

    postulate d-image-complete : ‚àÄ x y ‚Üí d x y ‚àà d-image
    --d-image-complete x = {!!}

    postulate d-image-sound : ‚àÄ {i} ‚Üí i ‚àà d-image ‚Üí ‚àÉ Œª x ‚Üí h x ‚â° i
    --d-image-sound {i} i‚ààbetw = {!!}

    postulate d-image‚Üó : Sorted ‚â§‚Ñï-decTotalOrder d-image
    --d-image‚Üó = {!!}
    

{-
    d-strContr : ‚àÄ {x y} e ‚Üí e ‚ñ∑ x ‚ââ e ‚ñ∑ y ‚Üí d (e ‚ñ∑ x) (e ‚ñ∑ y) <‚Ñï d x y
    d-strContr {x} {y} e e‚ñ∑x‚ââe‚ñ∑y with x ‚âü y | e ‚ñ∑ x ‚âü e ‚ñ∑ y
    ... | yes x‚âày | _           = contradiction {!!} e‚ñ∑x‚ââe‚ñ∑y
    ... | no  _   | yes e‚ñ∑x‚âàe‚ñ∑y = contradiction e‚ñ∑x‚âàe‚ñ∑y e‚ñ∑x‚ââe‚ñ∑y
    ... | no  _   | no  _       = {!‚äî-mono-< ? ?!}
-}

{-
    d‚â§H : ‚àÄ x y ‚Üí d x y ‚â§‚Ñï H
    d‚â§H x y with x ‚âü y
    ... | yes _ = z‚â§n
    ... | no  _ = {!!} --invert<d‚Çò‚Çê‚Çì x y

    x‚âây‚áíd‚â°invert : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí d x y ‚â° h x ‚äî h y
    x‚âây‚áíd‚â°invert {x} {y} x‚âây with x ‚âü y
    ... | yes x‚âày = contradiction x‚âày x‚âây
    ... | no  _   = refl

    d‚â¢1 : ‚àÄ x y ‚Üí d x y ‚â¢ 1
    d‚â¢1 x y d‚â°1 with x ‚âü y
    ... | yes x‚âày = contradiction d‚â°1 Œª()
    ... | no  x‚âây = contradiction {!!} x‚âây --(invert‚â°1‚áíx‚âày d‚â°1) x‚âây

    D‚Çõ·µ§‚Çö‚à∏hx‚â§d : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí D‚Çõ·µ§‚Çö ‚à∏ h x ‚â§‚Ñï d x y
    D‚Çõ·µ§‚Çö‚à∏hx‚â§d {x} {y} x‚âây with x ‚âü y
    ... | yes x‚âày = contradiction x‚âày x‚âây
    ... | no  _   = m‚â§m‚äîn (D‚Çõ·µ§‚Çö ‚à∏ h x) (D‚Çõ·µ§‚Çö ‚à∏ h y)

    D‚Çõ·µ§‚Çö‚à∏hy‚â§d : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí D‚Çõ·µ§‚Çö ‚à∏ h y ‚â§‚Ñï d x y
    D‚Çõ·µ§‚Çö‚à∏hy‚â§d {x} {y} x‚âây with x ‚âü y
    ... | yes x‚âày = contradiction x‚âày x‚âây
    ... | no  _   = n‚â§m‚äîn (D‚Çõ·µ§‚Çö ‚à∏ h x) (D‚Çõ·µ§‚Çö ‚à∏ h y)
    
    d‚â°D‚Çõ·µ§‚Çö‚à∏hx‚áíhx‚â§hy : ‚àÄ {x y} ‚Üí d x y ‚â° D‚Çõ·µ§‚Çö ‚à∏ h x ‚Üí h x ‚â§‚Ñï h y
    d‚â°D‚Çõ·µ§‚Çö‚à∏hx‚áíhx‚â§hy {x} {y} d‚â°d‚Çò‚Çê‚Çì‚à∏hx with x ‚âü y
    ... | yes x‚âày = contradiction (trans d‚â°d‚Çò‚Çê‚Çì‚à∏hx (+-‚à∏-assoc 1 h‚â§h‚Çò‚Çê‚Çì)) Œª()
    ... | no  x‚âây = o‚à∏n‚â§o‚à∏m‚àßm‚â§o‚áím‚â§n (m‚äîn‚â°m‚áín‚â§m d‚â°d‚Çò‚Çê‚Çì‚à∏hx) h‚â§D‚Çõ·µ§‚Çö

    d‚â°D‚Çõ·µ§‚Çö‚à∏hx : ‚àÄ {x y} ‚Üí h x <‚Ñï h y ‚Üí d x y ‚â° D‚Çõ·µ§‚Çö ‚à∏ h x
    d‚â°D‚Çõ·µ§‚Çö‚à∏hx {x} {y} hx<hy with x ‚âü y
    ... | yes x‚âày = contradiction (h-resp-‚âà x‚âày) (<‚áí‚â¢ hx<hy)
    ... | no  x‚âây = n‚â§m‚áím‚äîn‚â°m (‚à∏-mono (‚â§‚Ñï-refl {D‚Çõ·µ§‚Çö}) (<‚áí‚â§ hx<hy))

    d‚â°D‚Çõ·µ§‚Çö‚à∏hy : ‚àÄ {x y} ‚Üí h y <‚Ñï h x ‚Üí d x y ‚â° D‚Çõ·µ§‚Çö ‚à∏ h y
    d‚â°D‚Çõ·µ§‚Çö‚à∏hy {x} {y} hy<hx with x ‚âü y
    ... | yes x‚âày = contradiction (h-resp-‚âà (‚âà-sym x‚âày)) (<‚áí‚â¢ hy<hx)
    ... | no  x‚âây = m‚â§n‚áím‚äîn‚â°n (‚à∏-mono (‚â§‚Ñï-refl {D‚Çõ·µ§‚Çö}) (<‚áí‚â§ hy<hx))
    
    dxy=hx‚äéhy : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí (d x y ‚â° D‚Çõ·µ§‚Çö ‚à∏ h x) ‚äé (d x y ‚â° D‚Çõ·µ§‚Çö ‚à∏ h y)
    dxy=hx‚äéhy {x} {y} x‚âây with x ‚âü y
    ... | yes x‚âày = contradiction x‚âày x‚âây
    ... | no  _   = ‚äî-sel (D‚Çõ·µ§‚Çö ‚à∏ h x) (D‚Çõ·µ§‚Çö ‚à∏ h y)

    x‚âây‚áí0<d : ‚àÄ {x y} ‚Üí x ‚ââ y ‚Üí 0 <‚Ñï d x y
    x‚âây‚áí0<d {x} {y} x‚âây with x ‚âü y
    ... | yes x‚âày = contradiction x‚âày x‚âây
    ... | no  _   = ‚äî-mono-‚â§ 0<D‚Çõ·µ§‚Çö‚à∏h 0<D‚Çõ·µ§‚Çö‚à∏h
    
    0<d‚áíx‚âây : ‚àÄ {x y} ‚Üí 0 <‚Ñï d x y ‚Üí x ‚ââ y
    0<d‚áíx‚âây {x} {y} 0<d with x ‚âü y 
    ... | yes x‚âày‚±º = contradiction 0<d 1+n‚â∞n 
    ... | no  x‚âây = x‚âây

    

    
    -}
{-
    -----------------
    -- Ultrametric --
    -----------------
    -- We have now shown that d is an ultrametric

    D-isUltrametric : IsUltrametric ‚ÑùùïÑ‚Çõ D
    D-isUltrametric = record 
      { eq‚áí0        = X‚âàY‚áíD‚â°0 
      ; 0‚áíeq        = D‚â°0‚áíX‚âàY 
      ; sym         = D-sym 
      ; maxTriangle = D-maxTriIneq 
      }
-}
