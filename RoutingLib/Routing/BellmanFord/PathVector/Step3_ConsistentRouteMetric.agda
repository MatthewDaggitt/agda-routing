open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (‚â§-trans; ‚â§-refl; ‚â§-reflexive; m‚â§m+n; m+n‚à∏m‚â°n; +-mono-‚â§; ‚à∏-mono;  ‚äì-mono-<; m‚â§m‚äîn; m‚äìn‚â§m; ‚â∞‚áí‚â•; n‚â§m‚äîn; m‚äìn‚â§n; <-transÀ°; <-trans ≥; +-distribÀ°-‚äî)
open import Data.Fin using (Fin)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; subst; subst‚ÇÇ; cong‚ÇÇ)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_)

open import RoutingLib.Routing.Definitions
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Data.Graph
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions using () renaming (SufficientConditions to GeneralSufficientConditions)
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; n<m‚áín‚äìo<m; n‚â§m‚áín‚äìo‚â§m; m<n‚áín‚â¢0; ‚â§-steps ≥; +-mono ≥-‚â§; +-mono ≥-<; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Data.Matrix using (Any; map; min‚Å∫)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫[M]<min‚Å∫[N])
open import RoutingLib.Data.Table using (Table)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
open import RoutingLib.Function.Distance using (Ultrametric; IsUltrametric; Bounded; MaxTriangleIneq)
import RoutingLib.Function.Distance.MaxLift as MaxLift

import RoutingLib.Routing.BellmanFord as BellmanFord

import RoutingLib.Routing.BellmanFord.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.Step2_InconsistentRouteMetric as Step2

import RoutingLib.Routing.BellmanFord.DistanceVector.Prelude as Prelude·∂ú
import RoutingLib.Routing.BellmanFord.DistanceVector.Step2_RouteMetric as Step2·∂ú

module RoutingLib.Routing.BellmanFord.PathVector.Step3_ConsistentRouteMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
  open BellmanFord ùì°ùìü·∂ú using () renaming (œÉ to œÉ·∂ú)
  open RoutingProblem ùì°ùìü·∂ú using () renaming (‚âà-refl to ‚âà·∂ú-refl; ‚âà-sym to ‚âà·∂ú-sym)

  open Step2·∂ú ùì°ùìü·∂ú ùì¢ùìí
  open Prelude·∂ú ùì°ùìü·∂ú ùì¢ùìí using () renaming
    ( H    to H·∂ú
    ; 1‚â§H  to 1‚â§H·∂ú
    )

  -------------------------------------------
  -- An ultrametric over consistent tables --
  -------------------------------------------

  abstract
  
    d·µ£·∂ú : ‚àÄ {x y} ‚Üí ùë™ x ‚Üí ùë™ y ‚Üí ‚Ñï
    d·µ£·∂ú x·∂ú y·∂ú = d (toCRoute x·∂ú) (toCRoute y·∂ú)
  
    d·µ£·∂ú-cong : ‚àÄ {x y w z} (w·∂ú : ùë™ w) (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) (z·∂ú : ùë™ z) ‚Üí
               w ‚âà y ‚Üí x ‚âà z ‚Üí d·µ£·∂ú w·∂ú x·∂ú ‚â° d·µ£·∂ú y·∂ú z·∂ú
    d·µ£·∂ú-cong w·∂ú x·∂ú y·∂ú z·∂ú w‚âày x‚âàz = d-cong
      {x = toCRoute w·∂ú} {y = toCRoute y·∂ú}
      {u = toCRoute x·∂ú} {v = toCRoute z·∂ú} w‚âày x‚âàz
    
    d·µ£·∂ú-sym : ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí d·µ£·∂ú x·∂ú y·∂ú ‚â° d·µ£·∂ú y·∂ú x·∂ú
    d·µ£·∂ú-sym x·∂ú y·∂ú = d-sym (toCRoute x·∂ú) (toCRoute y·∂ú)
    
    x‚âày‚áíd·µ£·∂ú‚â°0 : ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí x ‚âà y ‚Üí d·µ£·∂ú x·∂ú y·∂ú ‚â° 0
    x‚âày‚áíd·µ£·∂ú‚â°0 x·∂ú y·∂ú x‚âày = x‚âày‚áíd‚â°0 {toCRoute x·∂ú} {toCRoute y·∂ú} x‚âày
    
    d·µ£·∂ú‚â°0‚áíx‚âày : ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí d·µ£·∂ú x·∂ú y·∂ú ‚â° 0 ‚Üí x ‚âà y
    d·µ£·∂ú‚â°0‚áíx‚âày x·∂ú y·∂ú d‚â°0 = d‚â°0‚áíx‚âày {toCRoute x·∂ú} {toCRoute y·∂ú} d‚â°0
  
    d·µ£·∂ú-maxTriIneq : ‚àÄ {x y z} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) (z·∂ú : ùë™ z) ‚Üí
                    d·µ£·∂ú x·∂ú z·∂ú ‚â§ d·µ£·∂ú x·∂ú y·∂ú ‚äî d·µ£·∂ú y·∂ú z·∂ú
    d·µ£·∂ú-maxTriIneq x·∂ú y·∂ú z·∂ú = d-maxTriIneq (toCRoute x·∂ú) (toCRoute y·∂ú) (toCRoute z·∂ú)

    d·µ£·∂ú-bounded : ‚àÉ Œª n ‚Üí ‚àÄ {x y} (x·∂ú : ùë™ x) (y·∂ú : ùë™ y) ‚Üí d·µ£·∂ú x·∂ú y·∂ú ‚â§ n
    d·µ£·∂ú-bounded = H·∂ú , Œª x·∂ú y·∂ú ‚Üí d‚â§H (toCRoute x·∂ú) (toCRoute y·∂ú)

    d·µ£·∂ú-strContrOrbits : ‚àÄ {X r s} ‚Üí X r s ‚ââ œÉ X r s ‚Üí
                        (X·∂ú : ùë™‚Çò X) (œÉX·∂ú : ùë™‚Çò (œÉ X)) (œÉ¬≤X·∂ú : ùë™‚Çò (œÉ (œÉ X))) ‚Üí
                        (‚àÄ {u v} ‚Üí X u v ‚ââ œÉ X u v ‚Üí d·µ£·∂ú (X·∂ú u v) (œÉX·∂ú u v) ‚â§ d·µ£·∂ú (X·∂ú r s) (œÉX·∂ú r s)) ‚Üí
                        ‚àÄ i j ‚Üí d·µ£·∂ú (œÉX·∂ú i j) (œÉ¬≤X·∂ú i j) < d·µ£·∂ú (X·∂ú r s) (œÉX·∂ú r s)
    d·µ£·∂ú-strContrOrbits {X} {r} {s} X·µ£‚Çõ‚ââœÉX·µ£‚Çõ X·∂ú œÉX·∂ú œÉ¬≤X·∂ú d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ i j = begin
      d (toCMatrix œÉX·∂ú i j) (toCMatrix œÉ¬≤X·∂ú i j) ‚â°‚ü® d-cong toMœÉX·∂ú·µ¢‚±º‚âàœÉ·∂úX'·µ¢‚±º toMœÉ¬≤X·∂ú·µ¢‚±º‚âàœÉ·∂úœÉX'·µ¢‚±º ‚ü©
      d (œÉ·∂ú X' i j)         (œÉ·∂ú œÉX' i j)         <‚ü® d-strContr X·µ£‚Çõ‚ââœÉX·µ£‚Çõ less i j ‚ü©
      d (X' r s)            (œÉX' r s)           ‚â°‚ü®‚ü©
      d (toCMatrix X·∂ú r s)  (toCMatrix œÉX·∂ú r s) ‚àé
      where
      
      open ‚â§-Reasoning
      
      X'  = toCMatrix X·∂ú
      œÉX' = toCMatrix œÉX·∂ú
      
      toMœÉX·∂ú·µ¢‚±º‚âàœÉ·∂úX'·µ¢‚±º : toCMatrix œÉX·∂ú i j ‚âà·∂ú œÉ·∂ú X' i j
      toMœÉX·∂ú·µ¢‚±º‚âàœÉ·∂úX'·µ¢‚±º = œÉ-toCMatrix-commute X·∂ú œÉX·∂ú i j

      toMœÉ¬≤X·∂ú·µ¢‚±º‚âàœÉ·∂úœÉX'·µ¢‚±º : toCMatrix œÉ¬≤X·∂ú i j ‚âà·∂ú œÉ·∂ú œÉX' i j
      toMœÉ¬≤X·∂ú·µ¢‚±º‚âàœÉ·∂úœÉX'·µ¢‚±º = œÉ-toCMatrix-commute œÉX·∂ú œÉ¬≤X·∂ú i j
      
      less : ‚àÄ u v ‚Üí X' u v ‚ââ·∂ú œÉX' u v ‚Üí d (X' u v) (œÉX' u v) ‚â§ d (X' r s) (œÉX' r s)
      less u v X'·µ§·µ•‚ââœÉX'·µ§·µ• = d·µ£·∂ú‚â§d·µ£·∂úX·µ£‚ÇõœÉX·µ£‚Çõ X'·µ§·µ•‚ââœÉX'·µ§·µ•
