open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (‚â§-trans; ‚â§-refl; ‚â§-reflexive; m‚â§m+n; m+n‚à∏m‚â°n; +-mono-‚â§; ‚à∏-mono;  ‚äì-mono-<; m‚â§m‚äîn; m‚äìn‚â§m; ‚â∞‚áí‚â•; n‚â§m‚äîn; m‚äìn‚â§n; <-transÀ°; <-trans ≥; +-distribÀ°-‚äî)
open import Data.Fin using (Fin)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; subst; subst‚ÇÇ; cong‚ÇÇ)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_)

open import RoutingLib.Routing.Definitions
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Data.Graph
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions using () renaming (SufficientConditions to GeneralSufficientConditions)
open import RoutingLib.Data.Nat.Properties using (‚Ñï‚Çõ; m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; n<m‚áín‚äìo<m; n‚â§m‚áín‚äìo‚â§m; m<n‚áín‚â¢0; ‚â§-steps ≥; +-mono ≥-‚â§; +-mono ≥-<; n‚â¢0‚áí0<n; n‚â§0‚áín‚â°0; module ‚â§-Reasoning)
open import RoutingLib.Data.Matrix using (Any; map; min‚Å∫)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫[M]<min‚Å∫[N])
open import RoutingLib.Data.Table using (Table)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
open import RoutingLib.Function.Distance using (Ultrametric; IsUltrametric; Bounded; MaxTriangleIneq)
import RoutingLib.Function.Distance.MaxLift as MaxLift
open import RoutingLib.Function.Image using (FiniteImage)

import RoutingLib.Routing.BellmanFord.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.DistanceVector.Prelude as Prelude·∂ú
--import RoutingLib.Routing.BellmanFord.DistanceVector.Step2_Ultrametric as Step2·∂ú
import RoutingLib.Routing.BellmanFord.DistanceVector.Step3_StateMetric as Step3·∂ú
import RoutingLib.Routing.BellmanFord.PathVector.Step5_TableMetric as Step5

module RoutingLib.Routing.BellmanFord.PathVector.Step6_StateMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
  open Step5 ùìüùì¢ùìí

  ------------
  -- Metric --
  ------------
  
  open import RoutingLib.Function.Distance ‚ÑùùïÑ‚Çõ using (_StrContrOver_)

  d‚Çò-ultrametric : Ultrametric _
  d‚Çò-ultrametric = MaxLift.ultrametric {n = n} (Œª _ ‚Üí _) (Œª _ ‚Üí d‚Çú-ultrametric)

  open Ultrametric d‚Çò-ultrametric public using ()
    renaming
    ( d to d‚Çò
    ; 0‚áíeq to d‚Çò‚â°0‚áíX‚âàY
    ; eq‚áí0 to X‚âàY‚áíd‚Çò‚â°0
    ; sym to d‚Çò-sym
    )


  d‚Çò-bounded : Bounded ‚ÑùùïÑ‚Çõ d‚Çò  
  d‚Çò-bounded = MaxLift.bounded (Œª _ ‚Üí ‚Ñùùïã‚Çõ) d‚Çú d‚Çú-bounded

  -- Strictly contracting
  
  d‚Çò-eqStrContracting : ‚àÄ {X Y} ‚Üí Y ‚ââ‚Çò X ‚Üí d‚Çò (œÉ X) (œÉ Y) ‚â° 0 ‚Üí d‚Çò (œÉ X) (œÉ Y) < d‚Çò X Y
  d‚Çò-eqStrContracting {X} {Y} Y‚ââX d[œÉX,œÉY]‚â°0 = begin
    d‚Çò (œÉ X) (œÉ Y) ‚â°‚ü® d[œÉX,œÉY]‚â°0 ‚ü©
    0              <‚ü® n‚â¢0‚áí0<n (Y‚ââX ‚àò ‚âà‚Çò-sym ‚àò d‚Çò‚â°0‚áíX‚âàY) ‚ü©
    d‚Çò X Y         ‚àé
    where open ‚â§-Reasoning
    
  d‚Çò-strContracting : œÉ StrContrOver d‚Çò
  d‚Çò-strContracting {X} {Y} Y‚ââX with max[t]‚ààt 0 (Œª i ‚Üí d‚Çú (X i) (Y i)) | max[t]‚ààt 0 (Œª i ‚Üí d‚Çú (œÉ X i) (œÉ Y i))
  ...   | inj‚ÇÅ dXY‚â°0             | _                          = contradiction (‚âà‚Çò-sym (d‚Çò‚â°0‚áíX‚âàY dXY‚â°0)) Y‚ââX
  ...   | inj‚ÇÇ _                 | inj‚ÇÅ d[œÉX,œÉY]‚â°0            = d‚Çò-eqStrContracting Y‚ââX d[œÉX,œÉY]‚â°0
  ...   | inj‚ÇÇ (k , d‚ÇòXY‚â°d‚ÇúX‚ÇñY‚Çñ) | inj‚ÇÇ (l , d‚ÇòœÉXœÉY‚â°d‚ÇúœÉX‚ÇóœÉY‚Çó) = begin
    d‚Çò (œÉ X) (œÉ Y)     ‚â°‚ü® d‚ÇòœÉXœÉY‚â°d‚ÇúœÉX‚ÇóœÉY‚Çó ‚ü©
    d‚Çú (œÉ X l) (œÉ Y l) <‚ü® d‚Çú-strContracting X‚Çñ‚ââY‚Çñ d‚Çú‚â§d‚ÇúœÉX‚ÇóœÉY‚Çó d‚Çú‚â§d‚ÇúX‚ÇñY‚Çñ ‚ü©
    d‚Çú (X k) (Y k)     ‚â°‚ü® sym d‚ÇòXY‚â°d‚ÇúX‚ÇñY‚Çñ ‚ü©
    d‚Çò X Y             ‚àé
    where

    open ‚â§-Reasoning

    X‚Çñ‚ââY‚Çñ : X k ‚ââ‚Çú Y k
    X‚Çñ‚ââY‚Çñ X‚Çñ‚âàY‚Çñ = Y‚ââX (‚âà‚Çò-sym (d‚Çò‚â°0‚áíX‚âàY (trans d‚ÇòXY‚â°d‚ÇúX‚ÇñY‚Çñ (x‚âày‚áíd‚Çú‚â°0 X‚Çñ‚âàY‚Çñ))))

    d‚Çú‚â§d‚ÇúœÉX‚ÇóœÉY‚Çó : ‚àÄ i ‚Üí d‚Çú (œÉ X i) (œÉ Y i) ‚â§ d‚Çú (œÉ X l) (œÉ Y l)
    d‚Çú‚â§d‚ÇúœÉX‚ÇóœÉY‚Çó i = subst (d‚Çú (œÉ X i) (œÉ Y i) ‚â§_) d‚ÇòœÉXœÉY‚â°d‚ÇúœÉX‚ÇóœÉY‚Çó (MaxLift.d·µ¢‚â§d (Œª _ ‚Üí ‚Ñùùïã‚Çõ) d‚Çú (œÉ X) (œÉ Y) i)

    d‚Çú‚â§d‚ÇúX‚ÇñY‚Çñ : ‚àÄ i ‚Üí d‚Çú (X i) (Y i) ‚â§ d‚Çú (X k) (Y k)
    d‚Çú‚â§d‚ÇúX‚ÇñY‚Çñ i = subst (d‚Çú (X i) (Y i) ‚â§_) d‚ÇòXY‚â°d‚ÇúX‚ÇñY‚Çñ (MaxLift.d·µ¢‚â§d (Œª _ ‚Üí ‚Ñùùïã‚Çõ) d‚Çú X Y i)
