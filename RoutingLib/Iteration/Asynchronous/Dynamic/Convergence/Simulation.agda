--------------------------------------------------------------------------------
-- This module proofs that if I‚à• simulates J‚à• then if I‚à• converges so does J‚à•
--------------------------------------------------------------------------------

open import RoutingLib.Iteration.Asynchronous.Dynamic

module RoutingLib.Iteration.Asynchronous.Dynamic.Convergence.Simulation
  {a‚ÇÅ a‚ÇÇ ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ n}
  {I‚à• : AsyncIterable a‚ÇÅ ‚Ñì‚ÇÅ n}
  {J‚à• : AsyncIterable a‚ÇÇ ‚Ñì‚ÇÇ n}
  (I‚à•‚áâJ‚à• : Simulates I‚à• J‚à•)
  where

open import Data.Nat using (zero; suc; _<_; _+_)
open import Data.Nat.Properties using (‚â§-refl)
open import Data.Fin.Subset using (Subset)
open import Data.Fin.Subset.Properties using (_‚àà?_)
open import Data.Product using (‚àÉ; _,_)
open import Data.Unit using (tt)
open import Induction.WellFounded using (Acc; acc)
open import Induction.Nat using (<-wellFounded)
import Relation.Binary.EqReasoning as EqReasoning
open import Relation.Nullary using (yes; no)
open import Relation.Unary

open import RoutingLib.Relation.Unary.Indexed using (IPred; _‚àà·µ¢_; U·µ¢)

open import RoutingLib.Iteration.Asynchronous.Dynamic.Schedule
open import RoutingLib.Iteration.Asynchronous.Dynamic.Schedule.Pseudoperiod

open Simulates I‚à•‚áâJ‚à•

private
  module I = AsyncIterable I‚à•
  module J = AsyncIterable J‚à•

--------------------------------------------------------------------------------
-- Proof

module _ {‚Ñì‚ÇÉ ‚Ñì‚ÇÑ ‚Ñì‚ÇÖ} {B‚ÇÄ : IPred I.S·µ¢ ‚Ñì‚ÇÉ} {C‚ÇÄ : IPred J.S·µ¢ ‚Ñì‚ÇÑ}
         (C‚ÇÄ‚äÜB‚ÇÄ : ‚àÄ {x} ‚Üí x ‚àà·µ¢ C‚ÇÄ ‚Üí from x ‚àà·µ¢ B‚ÇÄ)
         {Q  : Pred (Subset n) ‚Ñì‚ÇÖ}
         (I-convergent : PartiallyConvergent I‚à• B‚ÇÄ Q)
         where

  open Schedule
  open PartiallyConvergent I-convergent
    renaming
    ( x*         to y*
    ; x*-fixed   to y*-fixed
    ; x*-reached to y*-reached
    )

  asyncIter-eq : ‚àÄ s x‚ÇÄ ‚Üí ‚àÄ {t} (tAcc : Acc _<_ t) ‚Üí
                 to (asyncIter' I‚à• s (from x‚ÇÄ) tAcc) J.‚âà asyncIter' J‚à• s x‚ÇÄ tAcc
  asyncIter-eq s x‚ÇÄ {zero} _ i with i ‚àà? œÅ s 0
  ... | no  _ = to·µ¢-‚ä•
  ... | yes _ = to·µ¢-from·µ¢ (x‚ÇÄ i)
  asyncIter-eq s x‚ÇÄ {suc t} (acc tAcc) i with i ‚àà? œÅ s (suc t) | i ‚àà? œÅ s t | i ‚àà? Œ± s (suc t)
  ... | no  _      | _     | _     = to·µ¢-‚ä•
  ... | yes _      | no  _ | _     = to·µ¢-from·µ¢ (x‚ÇÄ i)
  ... | yes _      | yes _ | no  _ = asyncIter-eq s x‚ÇÄ (tAcc _ ‚â§-refl) i
  ... | yes i‚ààœÅ‚ÇÅ‚Çä‚Çú | yes _ | yes _ = J.‚âà·µ¢-trans (to·µ¢-F _) (J.F-cong (Œ∑ s (suc t)) (œÅ s (suc t))
    (Œª j ‚Üí asyncIter-eq s x‚ÇÄ (tAcc (Œ≤ s (suc t) i j) _) j) i‚ààœÅ‚ÇÅ‚Çä‚Çú)

  x* : Epoch ‚Üí {p : Subset n} ‚Üí p ‚àà Q ‚Üí J.S
  x* e {p} p‚ààQ = to (y* e {p} p‚ààQ)

  x*-fixed : ‚àÄ e {p} (p‚ààQ : p ‚àà Q) ‚Üí J.F e p (x* e p‚ààQ) J.‚âà x* e p‚ààQ
  x*-fixed e {p} p‚ààQ = begin
    J.F e p (x* e p‚ààQ)      ‚âà‚ü® J.‚âà-sym (to-F (y* e p‚ààQ)) ‚ü©
    to (I.F e p (y* e p‚ààQ)) ‚âà‚ü® to-cong (y*-fixed e p‚ààQ) ‚ü©
    to (y* e p‚ààQ)           ‚â°‚ü®‚ü©
    x* e p‚ààQ                ‚àé
    where open EqReasoning J.‚âà-setoid

  x*-reached : ‚àÄ {x‚ÇÄ} ‚Üí x‚ÇÄ ‚àà·µ¢ C‚ÇÄ ‚Üí {ùì¢ : Schedule n} (œÅ‚ààQ : ùì¢ satisfies Q) ‚Üí
               ‚àÄ {s m : ùïã} ‚Üí MultiPseudocycle ùì¢ (k* (Œ∑ ùì¢ s) (œÅ‚ààQ s)) [ s , m ] ‚Üí
               ‚àÄ {e : ùïã} ‚Üí SubEpoch ùì¢ [ m , e ] ‚Üí
               asyncIter J‚à• ùì¢ x‚ÇÄ e J.‚âà x* (Œ∑ ùì¢ s) (œÅ‚ààQ s)
  x*-reached {x‚ÇÄ} x‚ÇÄ‚ààC‚ÇÄ {S} œÅ‚ààQ {s} {m} pp‚Çñ {e} Œ∑[m,e] i = J.‚âà·µ¢-trans
    (J.‚âà-sym (asyncIter-eq S x‚ÇÄ (<-wellFounded e)) i)
    (to·µ¢-cong (y*-reached (C‚ÇÄ‚äÜB‚ÇÄ x‚ÇÄ‚ààC‚ÇÄ) œÅ‚ààQ pp‚Çñ Œ∑[m,e] i))

  simulate : PartiallyConvergent J‚à• C‚ÇÄ Q
  simulate = record
    { x*         = x*
    ; k*         = k*
    ; x*-fixed   = x*-fixed
    ; x*-reached = x*-reached
    }
