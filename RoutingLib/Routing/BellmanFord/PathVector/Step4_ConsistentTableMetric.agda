open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat using (‚Ñï; zero; suc; _+_; z‚â§n; s‚â§s; _<_; _‚â§_; _‚â§?_; _‚à∏_; _‚äî_; _‚äì_; ‚â§-pred) renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.Nat.Properties using (‚â§-trans; ‚â§-refl; ‚â§-reflexive; m‚â§m+n; m+n‚à∏m‚â°n; +-mono-‚â§; ‚à∏-mono;  ‚äì-mono-<; m‚â§m‚äîn; m‚äìn‚â§m; ‚â∞‚áí‚â•; n‚â§m‚äîn; m‚äìn‚â§n; <-transÀ°; <-trans ≥; +-distribÀ°-‚äî)
open import Data.Fin using (Fin)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; subst; subst‚ÇÇ; cong‚ÇÇ)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_)

open import RoutingLib.Routing.Definitions
open import RoutingLib.Algebra.FunctionProperties
open import RoutingLib.Data.Graph
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
open import RoutingLib.Routing.BellmanFord.DistanceVector.SufficientConditions using () renaming (SufficientConditions to GeneralSufficientConditions)
open import RoutingLib.Data.Nat.Properties using (m‚â§n‚áím‚â§n‚äîo; m‚â§o‚áím‚â§n‚äîo; n<m‚áín‚äìo<m; n‚â§m‚áín‚äìo‚â§m; m<n‚áín‚â¢0; ‚â§-steps ≥; +-mono ≥-‚â§; +-mono ≥-<; n‚â¢0‚áí0<n; module ‚â§-Reasoning)
open import RoutingLib.Data.Matrix using (Any; map; min‚Å∫)
open import RoutingLib.Data.Matrix.Properties using (min‚Å∫[M]<min‚Å∫[N])
open import RoutingLib.Data.Table using (Table)
open import RoutingLib.Data.Table.Membership.Propositional.Properties using (max[t]‚ààt)
open import RoutingLib.Function.Distance using (Ultrametric; IsUltrametric; Bounded; MaxTriangleIneq)
import RoutingLib.Function.Distance.MaxLift as MaxLift

import RoutingLib.Routing.BellmanFord.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.Step3_InconsistentTableMetric as Step3

import RoutingLib.Routing.BellmanFord.DistanceVector.Prelude as Prelude·∂ú
import RoutingLib.Routing.BellmanFord.DistanceVector.Step3_StateMetric as Step3·∂ú

module RoutingLib.Routing.BellmanFord.PathVector.Step4_ConsistentTableMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
    
  open Step3·∂ú ùì°ùìü·∂ú ùì¢ùìí
  open Prelude·∂ú ùì°ùìü·∂ú ùì¢ùìí using () renaming
    ( H    to H·∂ú
    ; 1‚â§H  to 1‚â§H·∂ú
    ; ‚Ñùùïã‚Çõ to ‚Ñùùïã‚Çõ·∂ú
    )

  -------------------------------------------
  -- An ultrametric over consistent tables --
  -------------------------------------------

  d‚Çú·∂ú : ‚àÄ {x y} ‚Üí ùë™‚Çú x ‚Üí ùë™‚Çú y ‚Üí ‚Ñï
  d‚Çú·∂ú x·∂ú y·∂ú = d·µ¢ (toCTable x·∂ú) (toCTable y·∂ú)
  
  d‚Çú·∂ú-cong : ‚àÄ {x y w z} (w·∂ú : ùë™‚Çú w) (x·∂ú : ùë™‚Çú x) (y·∂ú : ùë™‚Çú y) (z·∂ú : ùë™‚Çú z) ‚Üí
             w ‚âà‚Çú y ‚Üí x ‚âà‚Çú z ‚Üí d‚Çú·∂ú w·∂ú x·∂ú ‚â° d‚Çú·∂ú y·∂ú z·∂ú
  d‚Çú·∂ú-cong w·∂ú x·∂ú y·∂ú z·∂ú w‚âày x‚âàz = d·µ¢-cong {x = toCTable w·∂ú} {y = toCTable y·∂ú} {u = toCTable x·∂ú} {v = toCTable z·∂ú} w‚âày x‚âàz
  
  d‚Çú·∂ú-sym : ‚àÄ {x y} (x·∂ú : ùë™‚Çú x) (y·∂ú : ùë™‚Çú y) ‚Üí d‚Çú·∂ú x·∂ú y·∂ú ‚â° d‚Çú·∂ú y·∂ú x·∂ú
  d‚Çú·∂ú-sym x·∂ú y·∂ú = d·µ¢-sym (toCTable x·∂ú) (toCTable y·∂ú)
  
  x‚âày‚áíd‚Çú·∂ú‚â°0 : ‚àÄ {x y} (x·∂ú : ùë™‚Çú x) (y·∂ú : ùë™‚Çú y) ‚Üí x ‚âà‚Çú y ‚Üí d‚Çú·∂ú x·∂ú y·∂ú ‚â° 0
  x‚âày‚áíd‚Çú·∂ú‚â°0 x·∂ú y·∂ú x‚âày = x‚âày‚áíd·µ¢‚â°0 {toCTable x·∂ú} {toCTable y·∂ú} x‚âày
  
  d‚Çú·∂ú‚â°0‚áíx‚âày : ‚àÄ {x y} (x·∂ú : ùë™‚Çú x) (y·∂ú : ùë™‚Çú y) ‚Üí d‚Çú·∂ú x·∂ú y·∂ú ‚â° 0 ‚Üí x ‚âà‚Çú y
  d‚Çú·∂ú‚â°0‚áíx‚âày x·∂ú y·∂ú d‚â°0 = d·µ¢‚â°0‚áíx‚âày {toCTable x·∂ú} {toCTable y·∂ú} d‚â°0

  postulate d‚Çú·∂ú-strContr : ‚àÄ {k l X Y} ‚Üí X l ‚ââ‚Çú Y l ‚Üí
                           (X·∂ú : ùë™‚Çò X) (Y·∂ú : ùë™‚Çò Y) (œÉX·∂ú : ùë™‚Çò (œÉ X)) (œÉY·∂ú : ùë™‚Çò (œÉ Y)) ‚Üí
                           (‚àÄ i ‚Üí d‚Çú·∂ú (œÉX·∂ú i) (œÉY·∂ú i) ‚â§ d‚Çú·∂ú (œÉX·∂ú k) (œÉY·∂ú k)) ‚Üí
                           (‚àÄ i ‚Üí d‚Çú·∂ú (X·∂ú i)  (Y·∂ú i)  ‚â§ d‚Çú·∂ú (X·∂ú l)  (Y·∂ú l)) ‚Üí
                           d‚Çú·∂ú (œÉX·∂ú k) (œÉY·∂ú k) < d‚Çú·∂ú (X·∂ú l) (Y·∂ú l)


  postulate d‚Çú·∂ú-maxTriIneq : ‚àÄ {x y z} (x·∂ú : ùë™‚Çú x) (y·∂ú : ùë™‚Çú y) (z·∂ú : ùë™‚Çú z) ‚Üí
                             d‚Çú·∂ú x·∂ú z·∂ú ‚â§ d‚Çú·∂ú x·∂ú y·∂ú ‚äî d‚Çú·∂ú y·∂ú z·∂ú

  postulate d‚Çú·∂ú-bounded : ‚àÉ Œª n ‚Üí ‚àÄ {x y} (x·∂ú : ùë™‚Çú x) (y·∂ú : ùë™‚Çú y) ‚Üí d‚Çú·∂ú x·∂ú y·∂ú ‚â§ n
