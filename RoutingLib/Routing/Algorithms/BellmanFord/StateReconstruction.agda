open import Algebra.FunctionProperties using (Selective)
open import Data.List.Any using (here; there)
open import Data.List using (List; []; _‚à∑_; _++_; sum; map; foldr; concat)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _‚à∏_; _<_; _‚â§_; _‚â§?_; z‚â§n; s‚â§s; module ‚â§-Reasoning; ‚â§-pred)
open import Data.Nat.Properties using (_+-mono_; n‚à∏n‚â°0; +-‚à∏-assoc; ‚à∏-+-assoc; ‚â§-step; n‚â§m+n; m‚â§m+n; ‚â∞‚áí>)
open import Data.Nat.Properties.Simple using (+-suc; +-right-identity; +-assoc; +-comm)
open import Data.Fin using (Fin) renaming (zero to fzero; suc to fsuc)
open import Data.Fin.Properties using (_‚âü_)
open import Data.Fin.Subset using (‚ÅÖ_‚ÅÜ; ‚ä§)
open import Data.Product using (‚àÉ; ‚àÉ‚ÇÇ; _,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ)
open import Relation.Binary using (tri<; tri>; tri‚âà)
open import Relation.Binary.PropositionalEquality using (_‚â°_; cong; cong‚ÇÇ; module ‚â°-Reasoning; inspect; [_]; subst) renaming (refl to ‚â°-refl; sym to ‚â°-sym; trans to ‚â°-trans)
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_; id)

open import RoutingLib.Asynchronous using (Parallelisation)
open import RoutingLib.Asynchronous.Schedule
open import RoutingLib.Data.Graph using (Graph)
open import RoutingLib.Data.Graph.SimplePath using (SimplePath; []; [_]; _‚à∑_‚à£_; _‚à∫_‚à£_; source; destination; edge-‚à∑)
open import RoutingLib.Data.Graph.SimplePath.NonEmpty using (SimplePath‚Åø·µó; length)
open import RoutingLib.Data.Nat.Properties using (‚â§-refl; ‚â§-trans; ‚â§-reflexive; cmp; m‚à∏n‚â°0‚áím‚â§n; m‚â§n‚áím‚à∏n‚â°0; m<n‚áín‚à∏m‚â°1+o; <‚áí‚â§)
open import RoutingLib.Routing.Definitions using (RoutingAlgebra; RoutingProblem)
open import RoutingLib.Data.List using (tabulate)

module RoutingLib.Routing.Algorithms.BellmanFord.StateReconstruction
  {a b ‚Ñì n-1} (ra : RoutingAlgebra a b ‚Ñì)
  (‚äï-sel : Selective (RoutingAlgebra._‚âà_ ra) (RoutingAlgebra._‚äï_ ra))
  (G : Graph (RoutingAlgebra.Step ra) (suc n-1))
  (ùï§ : Schedule (suc n-1))
  where

  private

    n : ‚Ñï
    n = suc n-1

  abstract

    open import RoutingLib.Routing.Algorithms.BellmanFord.StateReconstruction.Core ra ‚äï-sel G
    open import RoutingLib.Routing.Algorithms.BellmanFord.StateReconstruction.Activation ra ‚äï-sel G
    open import RoutingLib.Routing.Algorithms.BellmanFord.StateReconstruction.DataFlow ra ‚äï-sel G
    open import RoutingLib.Routing.AlgebraicPaths.Consistent ra ‚äï-sel G

    open import RoutingLib.Routing.Algorithms.BellmanFord crp using (œÉ‚à•; I; Œ¥)
    open import RoutingLib.Asynchronous.Snapshot œÉ‚à• using (Snapshot; _‚âà‚Çõ_; snapshot)
    open RoutingProblem crp using (RMatrix)
    open Parallelisation œÉ‚à• using (_‚âà‚Çò_)
    open Schedule ùï§


    -- The final reconstructed schedule
    ùï§ ≥ : ‚àÄ {t‚Çõ} ‚Üí RMatrix ‚Üí Snapshot Œ≤ t‚Çõ ‚Üí Schedule n
    ùï§ ≥ {t‚Çõ} X sn = record
      { Œ±              = finalùî∏ ùï§ t‚Çõ X sn
      ; Œ≤              = finalùîπ ùï§ t‚Çõ X sn
      ; starvationFree = finalùî∏-starvationFree ùï§ t‚Çõ X sn
      ; causal         = finalùîπ-causal ùï§ t‚Çõ X sn
      ; dynamic        = finalùîπ-dynamic ùï§ t‚Çõ X sn
      }

    -- We need to show that when the new schedule ùï§ ≥ merges that the state (Œ¥ ùï§ ≥ buildùïã I) matches up with the provided state (X)
    postulate X‚âàŒ¥·µó ≥I : ‚àÄ X {t‚Çõ} (sn : Snapshot Œ≤ t‚Çõ) ‚Üí X ‚âà‚Çò Œ¥ (ùï§ ≥ X sn) (buildùïã X dynamic sn) I

    -- After merging, the reconstructed schedule ùï§ ≥ must be equal to the original schedule ùï§
    postulate ùï§‚âàùï§ ≥ : ‚àÄ X {t‚Çõ} (sn : Snapshot Œ≤ t‚Çõ) ‚Üí  ùï§ ‚ü¶ t‚Çõ ‚üß‚âà‚ü¶ buildùïã X dynamic sn ‚üß ùï§ ≥ X sn
    
    -- We also need to show that the messages in flight at the merge time are the same for both schedules
    postulate sn‚âàsn ≥ : ‚àÄ X {t‚Çõ} (sn : Snapshot Œ≤ t‚Çõ) ‚Üí sn ‚âà‚Çõ snapshot (ùï§ ≥ X sn) (buildùïã X dynamic sn) I


    reconstructionAll : ‚àÄ X {t‚Çõ} (sn : Snapshot Œ≤ t‚Çõ) ‚Üí 
                          ‚àÉ‚ÇÇ Œª ùï§ ≥ t ≥ ‚Üí 
                            X ‚âà‚Çò Œ¥ ùï§ ≥ t ≥ I √ó 
                            ùï§ ‚ü¶ t‚Çõ ‚üß‚âà‚ü¶ t ≥ ‚üß ùï§ ≥ √ó 
                            sn ‚âà‚Çõ snapshot ùï§ ≥ t ≥ I
    reconstructionAll X sn = ùï§ ≥ X sn , buildùïã X dynamic sn , X‚âàŒ¥·µó ≥I X sn , ùï§‚âàùï§ ≥ X sn , sn‚âàsn ≥ X sn
