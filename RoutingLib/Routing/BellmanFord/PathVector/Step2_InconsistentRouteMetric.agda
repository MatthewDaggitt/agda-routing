open import Data.Product using (‚àÉ; _,_; _√ó_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_]‚Ä≤; map)
open import Data.Nat using (‚Ñï; zero; suc; z‚â§n; s‚â§s; _<_; _‚â§_; _‚äî_)
open import Data.Nat.Properties
  using (‚â§-reflexive; ‚â§-total; ‚äî-comm; ‚äî-identity ≥; m‚â§m‚äîn)
open import Relation.Binary using (_Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; subst‚ÇÇ)
open import Relation.Nullary using (¬¨_; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Function using (_‚àò_; id)

open import RoutingLib.Data.Nat.Properties
  using (‚äî-monoÀ°-‚â§; ‚äî-triangulate; m‚â§o‚áím‚â§n‚äîo; m<n‚áín‚â¢0; n‚â§m√óo‚â§m‚áín‚äîo‚â§m; m<n‚äém<o‚áím<n‚äîo; n‚â§m‚áím‚äîn‚â°m;
        module ‚â§-Reasoning; ‚â§‚áí‚âØ)
import RoutingLib.Function.Distance as Distance

open import RoutingLib.Data.Sum using (flip)
open import RoutingLib.Routing.Definitions
open import RoutingLib.Routing.BellmanFord.PathVector.SufficientConditions
import RoutingLib.Routing.BellmanFord.PathVector.Prelude as Prelude
import RoutingLib.Routing.BellmanFord.PathVector.Step1_InconsistentHeightFunction as Step1

module RoutingLib.Routing.BellmanFord.PathVector.Step2_InconsistentRouteMetric
  {a b ‚Ñì} {ùì°ùìê : RoutingAlgebra a b ‚Ñì}
  {n-1} {ùì°ùìü : RoutingProblem ùì°ùìê (suc n-1)}
  (ùìüùì¢ùìí : PathSufficientConditions ùì°ùìü)
  where

  open Prelude ùìüùì¢ùìí
  open Step1 ùìüùì¢ùìí using
    ( h‚Å± ; H‚Å± ; h‚Å±-cong ; 1‚â§h‚Å±; h‚Å±‚â§H‚Å± ; h‚Å±-decr ; h[s·∂ú]<h[r‚Å±] )
 
  open Distance S using (Ultrametric; IsUltrametric; MaxTriangleIneq; Bounded)

  private

    h-force-ùë∞ : ‚àÄ {x y} ‚Üí ùë∞ x ‚äé ùë∞ y ‚Üí h‚Å± x ‚â§ h‚Å± y ‚Üí ùë∞ y
    h-force-ùë∞ (inj‚ÇÇ y‚Å±) hx‚â§hy y·∂ú = y‚Å± y·∂ú
    h-force-ùë∞ (inj‚ÇÅ x‚Å±) hx‚â§hy y·∂ú = contradiction (h[s·∂ú]<h[r‚Å±] y·∂ú x‚Å±) (‚â§‚áí‚âØ hx‚â§hy)
    
  abstract
  
    d·µ£‚Å± : Route ‚Üí Route ‚Üí ‚Ñï
    d·µ£‚Å± x y = h‚Å± x ‚äî h‚Å± y

    d·µ£‚Å±-cong : d·µ£‚Å± Preserves‚ÇÇ _‚âà_ ‚ü∂ _‚âà_ ‚ü∂ _‚â°_
    d·µ£‚Å±-cong {x} {y} {u} {v} x‚âày u‚âàv = cong‚ÇÇ _‚äî_ (h‚Å±-cong x‚âày) (h‚Å±-cong u‚âàv)
  
    d·µ£‚Å±-sym : ‚àÄ x y ‚Üí d·µ£‚Å± x y ‚â° d·µ£‚Å± y x
    d·µ£‚Å±-sym x y = ‚äî-comm (h‚Å± x) (h‚Å± y)

    d·µ£‚Å±‚â°0‚áíx‚âày : ‚àÄ {x y} ‚Üí d·µ£‚Å± x y ‚â° 0 ‚Üí x ‚âà y
    d·µ£‚Å±‚â°0‚áíx‚âày {x} {y} d·µ£‚Å±‚â°0 = contradiction d·µ£‚Å±‚â°0 (m<n‚áín‚â¢0 (m‚â§o‚áím‚â§n‚äîo (h‚Å± x) (1‚â§h‚Å± y)))
    
    d·µ£‚Å±-maxTriIneq : MaxTriangleIneq d·µ£‚Å±
    d·µ£‚Å±-maxTriIneq x y z = begin
      h‚Å± x ‚äî h‚Å± z                   ‚â§‚ü® ‚äî-monoÀ°-‚â§ (h‚Å± z) (m‚â§m‚äîn (h‚Å± x) (h‚Å± y)) ‚ü©
      h‚Å± x ‚äî h‚Å± y ‚äî h‚Å± z            ‚â°‚ü® ‚äî-triangulate (h‚Å± x) (h‚Å± y) (h‚Å± z) ‚ü©
      (h‚Å± x ‚äî h‚Å± y) ‚äî (h‚Å± y ‚äî h‚Å± z) ‚àé
      where open ‚â§-Reasoning

    d·µ£‚Å±‚â§H‚Å± : ‚àÄ x y ‚Üí d·µ£‚Å± x y ‚â§ H‚Å±
    d·µ£‚Å±‚â§H‚Å± x y = n‚â§m√óo‚â§m‚áín‚äîo‚â§m (h‚Å±‚â§H‚Å± x) (h‚Å±‚â§H‚Å± y)
  
    d·µ£‚Å±-bounded : Bounded d·µ£‚Å±
    d·µ£‚Å±-bounded = H‚Å± , d·µ£‚Å±‚â§H‚Å±

    d·µ£‚Å±-mono-ùë∞ùë™ : ‚àÄ {w x y z} ‚Üí ùë™ w ‚Üí ùë™ x ‚Üí ùë∞ y ‚äé ùë∞ z ‚Üí d·µ£‚Å± w x < d·µ£‚Å± y z
    d·µ£‚Å±-mono-ùë∞ùë™ {w} {x} {y} {z} w·∂ú x·∂ú y‚Å±‚äéz‚Å± =
      m<n‚äém<o‚áím<n‚äîo (h‚Å± y) (h‚Å± z)
        (map
        (Œª y‚Å± ‚Üí n‚â§m√óo‚â§m‚áín‚äîo‚â§m (h[s·∂ú]<h[r‚Å±] w·∂ú y‚Å±) (h[s·∂ú]<h[r‚Å±] x·∂ú y‚Å±))
        (Œª z‚Å± ‚Üí n‚â§m√óo‚â§m‚áín‚äîo‚â§m (h[s·∂ú]<h[r‚Å±] w·∂ú z‚Å±) (h[s·∂ú]<h[r‚Å±] x·∂ú z‚Å±))
        y‚Å±‚äéz‚Å±)
      
    flip-< : ‚àÄ {w x y z} ‚Üí d·µ£‚Å± w x < d·µ£‚Å± y z ‚Üí d·µ£‚Å± x w < d·µ£‚Å± z y
    flip-< d·µ£‚Å±wx‚â§d·µ£‚Å±yz = subst‚ÇÇ _<_ (d·µ£‚Å±-sym _ _) (d·µ£‚Å±-sym _ _) d·µ£‚Å±wx‚â§d·µ£‚Å±yz 

    flip-‚â§ : ‚àÄ {w x y z} ‚Üí d·µ£‚Å± w x ‚â§ d·µ£‚Å± y z ‚Üí d·µ£‚Å± x w ‚â§ d·µ£‚Å± z y
    flip-‚â§ d·µ£‚Å±wx‚â§d·µ£‚Å±yz = subst‚ÇÇ _‚â§_ (d·µ£‚Å±-sym _ _) (d·µ£‚Å±-sym _ _) d·µ£‚Å±wx‚â§d·µ£‚Å±yz

    
    
    d·µ£‚Å±-strContr-lem : ‚àÄ {i j r s} {X Y : RMatrix} ‚Üí ùë∞ (œÉ X i j) ‚Üí
                        h‚Å± (œÉ Y i j) ‚â§ h‚Å± (œÉ X i j) ‚Üí
                        (‚àÄ k l ‚Üí ùë∞ (X k l) ‚äé ùë∞ (Y k l) ‚Üí d·µ£‚Å± (X k l) (Y k l) ‚â§ d·µ£‚Å± (X r s) (Y r s)) ‚Üí
                        h‚Å± (œÉ X i j) ‚äî h‚Å± (œÉ Y i j) < h‚Å± (X r s) ‚äî h‚Å± (Y r s)
    d·µ£‚Å±-strContr-lem {i} {j} {r} {s} {X} {Y} œÉX·µ¢‚±º‚Å± hœÉY·µ¢‚±º‚â§hœÉX·µ¢‚±º less
      with œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º‚äéI·µ¢‚±º X i j
    ... | inj‚ÇÇ œÉX·µ¢‚±º‚âàI·µ¢‚±º          = contradiction (ùë™-cong (‚âà-sym œÉX·µ¢‚±º‚âàI·µ¢‚±º) (I·∂ú i j)) œÉX·µ¢‚±º‚Å±
    ... | inj‚ÇÅ (k , œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º) = begin
      h‚Å± (œÉ X i j) ‚äî h‚Å± (œÉ Y i j) ‚â°‚ü® n‚â§m‚áím‚äîn‚â°m hœÉY·µ¢‚±º‚â§hœÉX·µ¢‚±º ‚ü©
      h‚Å± (œÉ X i j)                ‚â°‚ü® h‚Å±-cong œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º ‚ü©
      h‚Å± (A i k ‚ñ∑ X k j)          <‚ü® h‚Å±-decr (ùë∞-cong œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º œÉX·µ¢‚±º‚Å±) ‚ü©
      h‚Å± (X k j)                  ‚â§‚ü® m‚â§m‚äîn (h‚Å± (X k j)) (h‚Å± (Y k j)) ‚ü©
      h‚Å± (X k j) ‚äî h‚Å± (Y k j)     ‚â§‚ü® less k j (inj‚ÇÅ (‚ñ∑-forces-ùë∞ (ùë∞-cong œÉX·µ¢‚±º‚âàA·µ¢‚ÇñX‚Çñ‚±º œÉX·µ¢‚±º‚Å±))) ‚ü©
      h‚Å± (X r s) ‚äî h‚Å± (Y r s)     ‚àé
      where open ‚â§-Reasoning

{-
      D (œÉ X) (œÉ Y)                      ‚â°‚ü® D‚â°d·µ¢‚±º ‚ü© 
      d (œÉ X i j) (œÉ Y i j)              ‚â§‚ü® d-mono œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º (œÉX·µ¢‚±º‚â§A·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º k , œÉX·µ¢‚±º‚ââA·µ¢‚Çñ‚ñ∑Y‚Çñ‚±º k) ‚ü©
      d (œÉ X i j) (A i k ‚ñ∑ Y k j)        ‚â°‚ü® d-cong œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º ‚âà-refl ‚ü©
      d (A i k ‚ñ∑ X k j) (A i k ‚ñ∑ Y k j)  <‚ü® d-strContr (A i k) (X‚Çñ‚±º‚ââY‚Çñ‚±º œÉX·µ¢‚±º‚âàA·µ¢‚Çñ‚ñ∑X‚Çñ‚±º) ‚ü©
      d (X k j) (Y k j)                  ‚â§‚ü® d‚â§D X Y k j ‚ü©
      D X Y                              ‚àé
      -}
      
    d·µ£‚Å±-strContr : ‚àÄ {i j r s X Y} ‚Üí ùë∞ (œÉ X i j) ‚äé ùë∞ (œÉ Y i j) ‚Üí
                   (‚àÄ k l ‚Üí ùë∞ (X k l) ‚äé ùë∞ (Y k l) ‚Üí d·µ£‚Å± (X k l) (Y k l) ‚â§ d·µ£‚Å± (X r s) (Y r s)) ‚Üí 
                   d·µ£‚Å± (œÉ X i j) (œÉ Y i j) < d·µ£‚Å± (X r s) (Y r s)
    d·µ£‚Å±-strContr {i} {j} {r} {s} {X} {Y} œÉX·µ¢‚±º‚Å±‚äéœÉY·µ¢‚±º‚Å± less
      with ‚â§-total (h‚Å± (œÉ X i j)) (h‚Å± (œÉ Y i j))
    ...   | inj‚ÇÇ œÉY·µ¢‚±º‚â§œÉX·µ¢‚±º = d·µ£‚Å±-strContr-lem (h-force-ùë∞ (flip œÉX·µ¢‚±º‚Å±‚äéœÉY·µ¢‚±º‚Å±) œÉY·µ¢‚±º‚â§œÉX·µ¢‚±º) œÉY·µ¢‚±º‚â§œÉX·µ¢‚±º less
    ...   | inj‚ÇÅ œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º =
      flip-< (d·µ£‚Å±-strContr-lem (h-force-ùë∞ œÉX·µ¢‚±º‚Å±‚äéœÉY·µ¢‚±º‚Å± œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º) œÉX·µ¢‚±º‚â§œÉY·µ¢‚±º Œª k l v ‚Üí flip-‚â§ (less k l (flip v)))
  
