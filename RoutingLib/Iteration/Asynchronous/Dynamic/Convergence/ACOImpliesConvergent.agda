--------------------------------------------------------------------------
-- Agda routing library
--
-- A proof that F being a dynamic ACO implies that the iteration is
-- convergent over the initial box.
--------------------------------------------------------------------------

open import Data.Fin using (Fin)
open import Data.Fin.Subset
  using (Subset; ‚ä§) renaming (_‚àà_ to _‚àà‚Çõ_; _‚àâ_ to _‚àâ‚Çõ_)
open import Data.Fin.Subset.Properties using (_‚àà?_)
open import Data.Maybe using (just; nothing)
open import Data.Nat renaming (_‚âü_ to _‚âü‚Ñï_) hiding (_‚äî_)
open import Data.Nat.Properties hiding (_‚âü_)
open import Data.Nat.Induction using (Acc; acc; <-wellFounded)
open import Data.Product as Prod using (‚àÉ; proj‚ÇÇ; proj‚ÇÅ; _,_; _√ó_; map)
open import Function using (id; _‚àò_; _$_)
open import Level using (_‚äî_)
open import Relation.Binary using (tri<; tri‚âà; tri>)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; subst; subst‚ÇÇ; cong; cong‚ÇÇ; refl; sym; trans)
open import Relation.Nullary using (yes; no; ¬¨_)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Unary using (Pred; _‚äÜ_; _‚àà_)

open import RoutingLib.Relation.Unary.Indexed
open import RoutingLib.Relation.Binary.Indexed.Homogeneous
open import RoutingLib.Relation.Unary.Properties
open import RoutingLib.Function.Reasoning

open import RoutingLib.Iteration.Asynchronous.Dynamic
open import RoutingLib.Iteration.Asynchronous.Dynamic.Convergence.Conditions
open import RoutingLib.Iteration.Asynchronous.Dynamic.Properties
import RoutingLib.Iteration.Asynchronous.Dynamic.Convergence.Properties.ACO
  as ACOProperties
open import RoutingLib.Iteration.Asynchronous.Dynamic.Schedule
import RoutingLib.Iteration.Asynchronous.Dynamic.Schedule.Pseudocycle
  as Pseudocycles

module RoutingLib.Iteration.Asynchronous.Dynamic.Convergence.ACOImpliesConvergent
  {a ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ n}
  (I‚à•  : AsyncIterable a ‚Ñì n) (open AsyncIterable I‚à•)
  {X‚ÇÄ  : IPred S·µ¢ ‚Ñì‚ÇÅ}
  {Q   : Pred (Epoch √ó Subset n) ‚Ñì‚ÇÇ}
  (partialACO : PartialACO I‚à• X‚ÇÄ Q ‚Ñì‚ÇÉ)
  where

open PartialACO partialACO
open ACOProperties I‚à• partialACO

module _ {e p} .(ep‚ààQ : (e , p) ‚àà Q) where
  open LocalACO (localACO ep‚ààQ) public

------------------------------------------------------------------------
-- Notation

module _ (œà : Schedule n)
         {x : S} (x‚ààX‚ÇÄ : x ‚àà·µ¢ X‚ÇÄ)               -- Initial state
         where

  open Schedule œà
  open Pseudocycles œà

  -- Some shorthand notation where the epoch and participant indices are
  -- replaced with a time index.

  F‚Çú : ùïã ‚Üí S ‚Üí S
  F‚Çú t = F (Œ∑ t) (œÅ t)

  c : ùïã ‚Üí Epoch √ó Subset n
  c t = (Œ∑ t , œÅ t)
  
  Œ¥' : S ‚Üí ‚àÄ {t} ‚Üí Acc _<_ t ‚Üí S
  Œ¥' = asyncIter' I‚à• œà

  Œ¥ : S ‚Üí ùïã ‚Üí S
  Œ¥ = asyncIter I‚à• œà

  Œ∑-pres-‚ààQ : ‚àÄ {s e : ùïã} ‚Üí Œ∑ s ‚â° Œ∑ e ‚Üí c e ‚àà Q ‚Üí c s ‚àà Q
  Œ∑-pres-‚ààQ Œ∑‚Çõ‚â°Œ∑‚Çë c‚Çë‚ààQ rewrite Œ∑‚Çõ‚â°Œ∑‚Çë = c‚Çë‚ààQ

  Œ∑-inRange‚Ä≤ : ‚àÄ {s m e : ùïã} ‚Üí Œ∑ s ‚â° Œ∑ e ‚Üí m ‚àà‚Çú [ s , e ] ‚Üí c e ‚àà Q ‚Üí Œ∑ s ‚â° Œ∑ m √ó Œ∑ m ‚â° Œ∑ e √ó c s ‚àà Q √ó c m ‚àà Q
  Œ∑-inRange‚Ä≤ Œ∑‚Çõ‚â°Œ∑‚Çë m‚àà[s,e] c‚Çë‚ààQ with Œ∑-inRange Œ∑‚Çõ‚â°Œ∑‚Çë m‚àà[s,e]
  ... | (Œ∑‚Çõ‚â°Œ∑‚Çò , Œ∑‚Çò‚â°Œ∑‚Çë) = Œ∑‚Çõ‚â°Œ∑‚Çò , Œ∑‚Çò‚â°Œ∑‚Çë , Œ∑-pres-‚ààQ Œ∑‚Çõ‚â°Œ∑‚Çë c‚Çë‚ààQ , Œ∑-pres-‚ààQ Œ∑‚Çò‚â°Œ∑‚Çë c‚Çë‚ààQ

  -- Membership substitution for equal times

  Œ¥'‚àà-resp-B‚Çú·µ¢ : ‚àÄ t {s e} (c‚Çõ‚ààQ : c s ‚àà Q) (c‚Çë‚ààQ : c e ‚àà Q) {rec : Acc _<_ t} ‚Üí Œ∑ s ‚â° Œ∑ e ‚Üí
                 ‚àÄ {k i} ‚Üí Œ¥' x rec i ‚àà B c‚Çõ‚ààQ k i ‚Üí Œ¥' x rec i ‚àà B c‚Çë‚ààQ k i
  Œ¥'‚àà-resp-B‚Çú·µ¢ t {s} {e} c‚Çõ‚ààQ c‚Çë‚ààQ {rec} Œ∑‚Çõ‚â°Œ∑‚Çë {k} {i} =
    subst (Œª v ‚Üí Œ¥' x rec i ‚àà v k i) (B-subst c‚Çõ‚ààQ c‚Çë‚ààQ Œ∑‚Çõ‚â°Œ∑‚Çë (cong œÄ Œ∑‚Çõ‚â°Œ∑‚Çë))

  -- The concept of being locally safe

  StateOfNode_InBox_AtTime_ : Fin n ‚Üí ‚Ñï ‚Üí ùïã ‚Üí Set _
  StateOfNode i InBox k AtTime t = (c‚Çú‚ààQ : c t ‚àà Q) (acc : Acc _<_ t) ‚Üí Œ¥' x acc i ‚àà B c‚Çú‚ààQ k i

  StateInBox_AtTime_ : ‚Ñï ‚Üí ùïã ‚Üí Set _
  StateInBox k AtTime t = ‚àÄ i ‚Üí StateOfNode i InBox k AtTime t

  MessagesToNode_InBox_AtTime_ : Fin n ‚Üí ‚Ñï ‚Üí ùïã ‚Üí Set _
  MessagesToNode i InBox k AtTime t = (c‚Çú‚ààQ : c t ‚àà Q) ‚Üí ‚àÄ {s} ‚Üí t < s ‚Üí SubEpoch [ t , s ] ‚Üí
                                      ‚àÄ {j} {acc : Acc _<_ (Œ≤ s i j)} ‚Üí 
                                      Œ¥' x acc j ‚àà B c‚Çú‚ààQ k j

  MessagesInBox_AtTime_ : ‚Ñï ‚Üí ùïã ‚Üí Set _
  MessagesInBox k AtTime t = ‚àÄ i ‚Üí MessagesToNode i InBox k AtTime t

  -- Concept of all messages being the current epoch
  MessagesToNode_WellFormedAtTime_ : Fin n ‚Üí ùïã ‚Üí Set ‚Ñì
  MessagesToNode i WellFormedAtTime t = ‚àÄ {s} ‚Üí t < s ‚Üí SubEpoch [ t , s ] ‚Üí
                                        ‚àÄ {j} {accŒ≤ : Acc _<_ (Œ≤ s i j)} ‚Üí
                                        j ‚àâ‚Çõ œÅ s ‚Üí Œ¥' x accŒ≤ j ‚âà·µ¢ ‚ä• j

  ComputationAtNode_InBox_AtTime_ : Fin n ‚Üí ‚Ñï ‚Üí ùïã ‚Üí Set _
  ComputationAtNode i InBox k AtTime t =
      MessagesToNode i WellFormedAtTime t
    √ó MessagesToNode i InBox (k ‚à∏ 1) AtTime t
    √ó StateOfNode i InBox k AtTime t

  ComputationInBox_AtTime_ : ‚Ñï ‚Üí ùïã ‚Üí Set _
  ComputationInBox k AtTime t = ‚àÄ i ‚Üí i ‚àà‚Çõ œÅ t ‚Üí ComputationAtNode i InBox k AtTime t

--------------------------------------------------------------------------
-- Actual proofs
--------------------------------------------------------------------------
-- Not participating
  
  expiry‚áíwellFormed : ‚àÄ {s e i} ‚Üí MessagesTo i ExpireIn [ s , e ] ‚Üí
                      MessagesToNode i WellFormedAtTime e
  expiry‚áíwellFormed {s} {e} {i} (mk‚Çë (mk‚Çõ‚Çë s‚â§e Œ∑‚Çõ‚â°Œ∑‚Çë) exp·µ¢) {t} e<t (mk‚Çõ‚Çë _ Œ∑‚Çë‚â°Œ∑‚Çú) {j} {accŒ≤} j‚àâœÅ‚Çú
    with trans Œ∑‚Çõ‚â°Œ∑‚Çë Œ∑‚Çë‚â°Œ∑‚Çú | Œ≤-decreasing i j (<-trans ≥ z‚â§n e<t) 
  ... | Œ∑‚Çõ‚â°Œ∑‚Çú | Œ≤t‚â§t = begin‚ü® exp·µ¢ e<t j , Œ≤t‚â§t ‚ü©
    ‚à¥ Œ≤ t i j ‚àà‚Çú [ s , t ] $‚ü® Œ∑-inRange‚Çë Œ∑‚Çõ‚â°Œ∑‚Çú ‚ü©
    ‚à¥ Œ∑ (Œ≤ t i j) ‚â° Œ∑ t    $‚ü® (Œª prf ‚Üí j‚àâœÅ‚Çú ‚àò ‚ààœÅ-subst prf) ‚ü©
    ‚à¥ j ‚àâ‚Çõ œÅ (Œ≤ t i j)     $‚ü® asyncIter-inactive I‚à• œà x accŒ≤ ‚ü©
    ‚à¥ Œ¥' x accŒ≤ j ‚â° ‚ä• j    $‚ü® ‚âà·µ¢-reflexive ‚ü©
    ‚à¥ Œ¥' x accŒ≤ j ‚âà·µ¢ ‚ä• j   ‚àé

  i‚àâœÅ‚áístate‚ààB‚Çñ : ‚àÄ {i t k} ‚Üí i ‚àâ‚Çõ œÅ t ‚Üí StateOfNode i InBox k AtTime t
  i‚àâœÅ‚áístate‚ààB‚Çñ {i} {t} {k} i‚àâœÅ‚Çú c‚Çú‚ààQ rec‚Çë = begin‚ü® B-null c‚Çú‚ààQ i‚àâœÅ‚Çú ‚ü©
    ‚à¥ ‚ä• i          ‚àà B c‚Çú‚ààQ k i $‚ü® B·µ¢-cong c‚Çú‚ààQ (‚âà·µ¢-sym (‚âà·µ¢-reflexive (asyncIter-inactive I‚à• œà x rec‚Çë i‚àâœÅ‚Çú))) ‚ü©
    ‚à¥ Œ¥' x {t} _ i ‚àà B c‚Çú‚ààQ k i ‚àé

--------------------------------------------------------------------------
-- Base case: the asynchronous iteration is always in the initial box

  state‚ààX‚ÇÄ : ‚àÄ t {acc‚Çú : Acc _<_ t} ‚Üí Œ¥' x acc‚Çú ‚àà·µ¢ X‚ÇÄ
  state‚ààX‚ÇÄ zero    {acc rec} i with i ‚àà? œÅ 0
  ... | no  i‚àâœÅ‚ÇÄ = ‚ä•‚ààX‚ÇÄ i
  ... | yes _    = x‚ààX‚ÇÄ i
  state‚ààX‚ÇÄ (suc t) {acc rec} i with i ‚àà? œÅ (suc t) | i ‚àà? œÅ t | i ‚àà? Œ± (suc t)
  ... | no  i‚àâœÅ‚ÇÅ‚Çä‚Çú  | _     | _     = ‚ä•‚ààX‚ÇÄ i
  ... | yes _       | no  _ | _     = x‚ààX‚ÇÄ i
  ... | yes _       | yes _ | no  _ = state‚ààX‚ÇÄ t i
  ... | yes _       | yes _ | yes _ = F-pres-X‚ÇÄ (Œª j ‚Üí state‚ààX‚ÇÄ (Œ≤ (suc t) i j) j) i
  
  state‚ààB‚ÇÄ : ‚àÄ t ‚Üí StateInBox 0 AtTime t
  state‚ààB‚ÇÄ t i c‚Çú‚ààQ rec = X‚ÇÄ‚äÜB‚ÇÄ c‚Çú‚ààQ (state‚ààX‚ÇÄ t i)
  
  messages‚ààB‚ÇÄ : ‚àÄ t ‚Üí MessagesInBox 0 AtTime t
  messages‚ààB‚ÇÄ t i c‚Çú‚ààQ {s} t<s Œ∑[t,s] {j} {accŒ≤} = X‚ÇÄ‚äÜB‚ÇÄ c‚Çú‚ààQ (state‚ààX‚ÇÄ (Œ≤ s i j) j)

--------------------------------------------------------------------------
-- Preservation: if the asynchronous iteration is in a box and
-- information recieved is in that box then assuming the epoch is the
-- same, it will still be in that box in the future.
  
  wellFormed-stability : ‚àÄ {s e i} ‚Üí SubEpoch [ s , e ] ‚Üí
                         MessagesToNode i WellFormedAtTime s ‚Üí
                         MessagesToNode i WellFormedAtTime e
  wellFormed-stability {s} {e} {i} Œ∑[s,e]@(mk‚Çõ‚Çë s‚â§e _) wf e<t Œ∑[e,t] =
    wf (<-trans ≥ s‚â§e e<t) (Œ∑[s,e] ++‚Çõ‚Çë Œ∑[e,t])

  state-stability : ‚àÄ {k s e i} ‚Üí SubEpoch [ s , e ] ‚Üí
                    ComputationAtNode i InBox k AtTime s ‚Üí
                    StateOfNode i InBox k AtTime e
  state-stability {k}     {s} {zero}  {i} Œ∑[s,1+e]@(mk‚Çõ‚Çë z‚â§n   _)       (_ , _ , s‚ààB‚Çñ)                     = s‚ààB‚Çñ
  state-stability {zero}  {s} {suc e} {i} Œ∑[s,1+e]                      (_ , _ , _)        c‚ÇÅ‚Çä‚Çë‚ààQ (acc rec) =
    state‚ààB‚ÇÄ (suc e) i c‚ÇÅ‚Çä‚Çë‚ààQ (acc rec)
  state-stability {suc k} {s} {suc e} {i} Œ∑[s,1+e]@(mk‚Çõ‚Çë s‚â§1+e Œ∑‚Çõ‚â°Œ∑‚ÇÅ‚Çä‚Çë) (wf , m‚ààB‚Çñ , s‚ààB‚Çñ) c‚ÇÅ‚Çä‚Çë‚ààQ (acc rec)
    with <-cmp s (suc e)
  ... | tri‚âà _ refl _      = s‚ààB‚Çñ c‚ÇÅ‚Çä‚Çë‚ààQ (acc rec)
  ... | tri> _ _ s>1+e     = contradiction s‚â§1+e (<‚áí‚â± s>1+e)
  ... | tri< (s‚â§s s‚â§e) _ _ with Œ∑-inRange‚Ä≤ Œ∑‚Çõ‚â°Œ∑‚ÇÅ‚Çä‚Çë (s‚â§e , n‚â§1+n _) c‚ÇÅ‚Çä‚Çë‚ààQ
  ...   | Œ∑‚Çõ‚â°Œ∑‚Çë , Œ∑‚Çë‚â°Œ∑‚ÇÅ‚Çä‚Çë , c‚Çõ‚ààQ , c‚Çë‚ààQ with i ‚àà? œÅ (suc e) | i ‚àà? œÅ e | i ‚àà? Œ± (suc e)
  ...     | no  i‚àâœÅ‚ÇÅ‚Çä‚Çë | _       | _     = B-null c‚ÇÅ‚Çä‚Çë‚ààQ i‚àâœÅ‚ÇÅ‚Çä‚Çë
  ...     | yes i‚ààœÅ‚ÇÅ‚Çä‚Çë | no i‚àâœÅ‚Çë | _     = contradiction (‚ààœÅ-subst (sym Œ∑‚Çë‚â°Œ∑‚ÇÅ‚Çä‚Çë) i‚ààœÅ‚ÇÅ‚Çä‚Çë) i‚àâœÅ‚Çë
  ...     | yes _      | yes _   | no  _ = begin‚ü® state-stability (mk‚Çõ‚Çë s‚â§e Œ∑‚Çõ‚â°Œ∑‚Çë) (wf , m‚ààB‚Çñ , s‚ààB‚Çñ) c‚Çë‚ààQ (rec e ‚â§-refl) ‚ü©
    ‚à¥ Œ¥' x {e} _ i ‚àà B c‚Çë‚ààQ   (suc k) i  $‚ü® Œ¥'‚àà-resp-B‚Çú·µ¢ e c‚Çë‚ààQ c‚ÇÅ‚Çä‚Çë‚ààQ Œ∑‚Çë‚â°Œ∑‚ÇÅ‚Çä‚Çë ‚ü©
    ‚à¥ Œ¥' x {e} _ i ‚àà B c‚ÇÅ‚Çä‚Çë‚ààQ (suc k) i  ‚àé
  ...     | yes i‚ààœÅ‚ÇÅ‚Çä‚Çë | yes _   | yes _ = begin‚ü® (Œª j ‚Üí m‚ààB‚Çñ c‚Çõ‚ààQ (s‚â§s s‚â§e) Œ∑[s,1+e]) ‚ü©
    ‚à¥ (‚àÄ j ‚Üí Œ¥' x {Œ≤ (suc e) i j} _ j ‚àà B c‚Çõ‚ààQ   k      j)  $‚ü® (Œª prf j ‚Üí Œ¥'‚àà-resp-B‚Çú·µ¢ (Œ≤ (suc e) i j) c‚Çõ‚ààQ c‚ÇÅ‚Çä‚Çë‚ààQ Œ∑‚Çõ‚â°Œ∑‚ÇÅ‚Çä‚Çë (prf j)) ‚ü©
    ‚à¥ (‚àÄ j ‚Üí Œ¥' x {Œ≤ (suc e) i j} _ j ‚àà B c‚ÇÅ‚Çä‚Çë‚ààQ k      j)  $‚ü® (Œª prf ‚Üí F-mono-B c‚ÇÅ‚Çä‚Çë‚ààQ (Œª j ‚Üí state‚ààX‚ÇÄ (Œ≤ (suc e) i j) j) (wf (s‚â§s s‚â§e) Œ∑[s,1+e]) prf i) ‚ü©
    ‚à¥ F‚Çú (suc e) _ i                  ‚àà B c‚ÇÅ‚Çä‚Çë‚ààQ (suc k) i  ‚àé

  state-stability‚Ä≤ : ‚àÄ {k s e} ‚Üí SubEpoch [ s , e ] ‚Üí
                    ComputationInBox k AtTime s ‚Üí
                    StateInBox k AtTime e
  state-stability‚Ä≤ {_} {s} Œ∑[s,e]@(mk‚Çõ‚Çë _ Œ∑‚Çõ‚â°Œ∑‚Çë) c‚ààB‚Çñ i with i ‚àà? œÅ s
  ... | yes i‚ààœÅ‚Çõ = state-stability Œ∑[s,e] (c‚ààB‚Çñ i i‚ààœÅ‚Çõ)
  ... | no  i‚àâœÅ‚Çõ = i‚àâœÅ‚áístate‚ààB‚Çñ (i‚àâœÅ‚Çõ ‚àò ‚ààœÅ-subst (sym Œ∑‚Çõ‚â°Œ∑‚Çë))
  
  message-stability : ‚àÄ {k s e i} ‚Üí SubEpoch [ s , e ] ‚Üí
                      MessagesToNode i InBox k AtTime s ‚Üí
                      MessagesToNode i InBox k AtTime e
  message-stability Œ∑[s,e]@(mk‚Çõ‚Çë s‚â§e Œ∑‚Çõ‚â°Œ∑‚Çë) m‚ààb c‚Çë‚ààQ e<t Œ∑[e,t] {j} {recŒ≤} =
    Œ¥'‚àà-resp-B‚Çú·µ¢ (Œ≤ _ _ _) c‚Çõ‚ààQ c‚Çë‚ààQ Œ∑‚Çõ‚â°Œ∑‚Çë (m‚ààb c‚Çõ‚ààQ (<-trans ≥ s‚â§e e<t) (Œ∑[s,e] ++‚Çõ‚Çë Œ∑[e,t]))
    where c‚Çõ‚ààQ = Œ∑-pres-‚ààQ Œ∑‚Çõ‚â°Œ∑‚Çë c‚Çë‚ààQ

--------------------------------------------------------------------------
-- Step: after one pseudocycle the node is guaranteed to have
-- advanced at least one box

  advance-state : ‚àÄ {s e i k} ‚Üí
                  i IsActiveIn [ s , e ] ‚Üí
                  MessagesToNode i WellFormedAtTime s ‚Üí
                  MessagesToNode i InBox k AtTime s ‚Üí
                  StateOfNode i InBox (suc k) AtTime e
  advance-state {s} {zero}  {i} (mk‚Çê·µ¢ Œ∑‚Çõ‚â°Œ∑‚ÇÅ‚Çä‚Çë m ()  z‚â§n   i‚ààŒ±‚Çò)
  advance-state {s} {suc e} {i} (mk‚Çê·µ¢ Œ∑‚Çõ‚â°Œ∑‚ÇÅ‚Çä‚Çë m s<m m‚â§1+e i‚ààŒ±‚Çò) wf m‚ààB‚Çñ c‚ÇÅ‚Çä‚Çë‚ààQ (acc rec‚Çë)
    with Œ∑-inRange‚Ä≤ Œ∑‚Çõ‚â°Œ∑‚ÇÅ‚Çä‚Çë (‚â§-pred (‚â§-trans s<m m‚â§1+e) , n‚â§1+n _) c‚ÇÅ‚Çä‚Çë‚ààQ
  ... | Œ∑‚Çõ‚â°Œ∑‚Çë , Œ∑‚Çë‚â°Œ∑‚ÇÅ‚Çä‚Çë , c‚Çõ‚ààQ , c‚Çë‚ààQ with i ‚àà? œÅ (suc e) | i ‚àà? œÅ e | i ‚àà? Œ± (suc e)
  ...   | no  i‚àâœÅ‚ÇÅ‚Çä‚Çë | _       | _     = B-null c‚ÇÅ‚Çä‚Çë‚ààQ i‚àâœÅ‚ÇÅ‚Çä‚Çë
  ...   | yes i‚ààœÅ‚ÇÅ‚Çä‚Çë | no i‚àâœÅ‚Çë | _     = contradiction (‚ààœÅ-subst (sym Œ∑‚Çë‚â°Œ∑‚ÇÅ‚Çä‚Çë) i‚ààœÅ‚ÇÅ‚Çä‚Çë) i‚àâœÅ‚Çë
  ...   | yes i‚ààœÅ‚ÇÅ‚Çä‚Çë | yes _   | yes _ = F-mono-B c‚ÇÅ‚Çä‚Çë‚ààQ (Œª j ‚Üí state‚ààX‚ÇÄ (Œ≤ (suc e) i j) j) (wf s<1+e (mk‚Çõ‚Çë s‚â§1+e Œ∑‚Çõ‚â°Œ∑‚ÇÅ‚Çä‚Çë)) (Œª j ‚Üí Œ¥'‚àà-resp-B‚Çú·µ¢ (Œ≤ (suc e) i j) c‚Çõ‚ààQ c‚ÇÅ‚Çä‚Çë‚ààQ Œ∑‚Çõ‚â°Œ∑‚ÇÅ‚Çä‚Çë (m‚ààB‚Çñ c‚Çõ‚ààQ s<1+e (mk‚Çõ‚Çë s‚â§1+e Œ∑‚Çõ‚â°Œ∑‚ÇÅ‚Çä‚Çë))) i
    where s<1+e = ‚â§-trans s<m m‚â§1+e; s‚â§1+e = ‚â§-trans (n‚â§1+n s) s<1+e
  ...   | yes _       | yes _   | no  i‚àâŒ±‚ÇÅ‚Çä‚Çë with m ‚âü‚Ñï suc e
  ...     | yes refl  = contradiction i‚ààŒ±‚Çò i‚àâŒ±‚ÇÅ‚Çä‚Çë
  ...     | no  m‚â¢1+e = Œ¥'‚àà-resp-B‚Çú·µ¢ e c‚Çë‚ààQ c‚ÇÅ‚Çä‚Çë‚ààQ Œ∑‚Çë‚â°Œ∑‚ÇÅ‚Çä‚Çë (advance-state (mk‚Çê·µ¢ Œ∑‚Çõ‚â°Œ∑‚Çë m s<m m‚â§e i‚ààŒ±‚Çò) wf m‚ààB‚Çñ c‚Çë‚ààQ _)
    where m‚â§e = ‚â§-pred (‚â§‚àß‚â¢‚áí< m‚â§1+e m‚â¢1+e)
 
  advance-messages : ‚àÄ {s e k i} ‚Üí MessagesTo i ExpireIn [ s , e ] ‚Üí
                     ComputationInBox k AtTime s ‚Üí
                     MessagesToNode i InBox k AtTime e
  advance-messages {s} {e} {k} {i} (mk‚Çë (mk‚Çõ‚Çë _ Œ∑‚Çõ‚â°Œ∑‚Çë) expiry·µ¢) c‚ààB‚Çñ c‚Çë‚ààQ e<t (mk‚Çõ‚Çë _ Œ∑‚Çë‚â°Œ∑‚Çú) {j} {recŒ≤}
    with expiry·µ¢ e<t j
  ... | s‚â§Œ≤ with Œ∑-inRange (trans Œ∑‚Çõ‚â°Œ∑‚Çë Œ∑‚Çë‚â°Œ∑‚Çú) (s‚â§Œ≤ , (Œ≤-decreasing i j (<-trans ≥ z‚â§n e<t)))
  ...   | (Œ∑‚Çõ‚â°Œ∑Œ≤ , Œ∑Œ≤‚â°Œ∑‚Çú) with trans Œ∑Œ≤‚â°Œ∑‚Çú (sym Œ∑‚Çë‚â°Œ∑‚Çú)
  ...     | Œ∑Œ≤‚â°Œ∑‚Çë with Œ∑-pres-‚ààQ Œ∑Œ≤‚â°Œ∑‚Çë c‚Çë‚ààQ
  ...       | Œ≤‚ààQ with j ‚àà? œÅ s
  ...         | yes j‚ààœÅ‚Çõ = Œ¥'‚àà-resp-B‚Çú·µ¢ (Œ≤ _ _ _) Œ≤‚ààQ c‚Çë‚ààQ Œ∑Œ≤‚â°Œ∑‚Çë (state-stability (mk‚Çõ‚Çë s‚â§Œ≤ Œ∑‚Çõ‚â°Œ∑Œ≤) (c‚ààB‚Çñ j j‚ààœÅ‚Çõ) Œ≤‚ààQ recŒ≤)
  ...         | no  j‚àâœÅ‚Çõ = Œ¥'‚àà-resp-B‚Çú·µ¢ (Œ≤ _ _ _) Œ≤‚ààQ c‚Çë‚ààQ Œ∑Œ≤‚â°Œ∑‚Çë (i‚àâœÅ‚áístate‚ààB‚Çñ (j‚àâœÅ‚Çõ ‚àò ‚ààœÅ-subst (sym Œ∑‚Çõ‚â°Œ∑Œ≤)) Œ≤‚ààQ recŒ≤)

  advance-computation‚ÇÅ : ‚àÄ {s e k} ‚Üí Pseudocycle [ s , e ] ‚Üí
                         ComputationInBox k       AtTime s ‚Üí
                         ComputationInBox (suc k) AtTime e
  advance-computation‚ÇÅ {s} {e} {k} pp c‚ààB‚Çñ i i‚ààœÅ‚Çë = m‚ààwf·µâ , m‚ààB‚Çñ·µâ , s‚ààB‚ÇÅ‚Çä‚Çñ
    where
    open Pseudocycle pp
    i‚ààœÅ‚Çõ   = ‚ààœÅ-subst (sym Œ∑‚Çõ‚â°Œ∑‚Çë) i‚ààœÅ‚Çë
    m‚ààwf·µê  = expiry‚áíwellFormed (Œ≤[s,m] i‚ààœÅ‚Çõ)
    m‚ààwf·µâ  = wellFormed-stability (Œ∑[m,e] i) m‚ààwf·µê
    m‚ààB‚Çñ·µê  = advance-messages (Œ≤[s,m] i‚ààœÅ‚Çõ) c‚ààB‚Çñ
    m‚ààB‚Çñ·µâ  = message-stability (Œ∑[m,e] i) m‚ààB‚Çñ·µê
    s‚ààB‚ÇÅ‚Çä‚Çñ = advance-state (Œ±[m,e] i‚ààœÅ‚Çõ) m‚ààwf·µê m‚ààB‚Çñ·µê

  advance-computation‚Çô : ‚àÄ {s e k n} ‚Üí
                         MultiPseudocycle n [ s , e ] ‚Üí
                         ComputationInBox k       AtTime s ‚Üí
                         ComputationInBox (k + n) AtTime e
  advance-computation‚Çô {_} {_} {k} {_}     none            c‚ààB‚Çñ rewrite +-identity ≥ k = c‚ààB‚Çñ
  advance-computation‚Çô {s} {e} {k} {suc n} (next m pp mpp) c‚ààB‚Çñ = begin‚ü® c‚ààB‚Çñ ‚ü©
    ‚à¥ ComputationInBox k           AtTime s $‚ü® advance-computation‚ÇÅ pp ‚ü©
    ‚à¥ ComputationInBox (suc k)     AtTime m $‚ü® advance-computation‚Çô mpp ‚ü©
    ‚à¥ ComputationInBox (suc k + n) AtTime e $‚ü® subst (ComputationInBox_AtTime e) (sym (+-suc k n)) ‚ü©
    ‚à¥ ComputationInBox (k + suc n) AtTime e ‚àé

--------------------------------------------------------------------------
-- Convergence

  computation‚ààB‚ÇÅ : ‚àÄ {s e} ‚Üí Pseudocycle [ s , e ] ‚Üí ComputationInBox 1 AtTime e
  computation‚ààB‚ÇÅ {s} {e} pp i i‚ààœÅ‚Çë = m‚ààwf·µâ , messages‚ààB‚ÇÄ e i , s‚ààB‚ÇÅ
    where
    open Pseudocycle pp
    i‚ààœÅ‚Çõ   = ‚ààœÅ-subst (sym Œ∑‚Çõ‚â°Œ∑‚Çë) i‚ààœÅ‚Çë
    m‚ààwf·µê  = expiry‚áíwellFormed (Œ≤[s,m] i‚ààœÅ‚Çõ)
    m‚ààwf·µâ  = wellFormed-stability (Œ∑[m,e] i) m‚ààwf·µê
    s‚ààB‚ÇÅ   = advance-state (Œ±[m,e] i‚ààœÅ‚Çõ) m‚ààwf·µê (messages‚ààB‚ÇÄ (m i) i)

  module _ {s : ùïã} (c‚Çõ‚ààQ : c s ‚àà Q)  where

    k*' : ‚Ñï
    k*' = k* c‚Çõ‚ààQ

    x*' : S
    x*' = x* c‚Çõ‚ààQ

    private
      mpp+e‚áíŒ∑‚Çú‚â°Œ∑‚Çõ : ‚àÄ {e k} ‚Üí MultiPseudocycle k [ s , e ] ‚Üí ‚àÄ {t} ‚Üí SubEpoch [ e , t ] ‚Üí Œ∑ t ‚â° Œ∑ s
      mpp+e‚áíŒ∑‚Çú‚â°Œ∑‚Çõ mpp Œ∑[e,t] = sym (trans (Œ∑‚Çõ‚â°Œ∑‚Çë-mpp mpp) (SubEpoch.Œ∑‚Çõ‚â°Œ∑‚Çë Œ∑[e,t]))

      mpp+e‚áíc‚Çú‚ààQ : ‚àÄ {e k} ‚Üí MultiPseudocycle k [ s , e ] ‚Üí ‚àÄ {t} ‚Üí SubEpoch [ e , t ] ‚Üí c t ‚àà Q
      mpp+e‚áíc‚Çú‚ààQ mpp Œ∑[e,t] = Œ∑-pres-‚ààQ (mpp+e‚áíŒ∑‚Çú‚â°Œ∑‚Çõ mpp Œ∑[e,t]) c‚Çõ‚ààQ
      
    B[k*]-reached : ‚àÄ {e k} (mpp : MultiPseudocycle k [ s , e ]) ‚Üí
                    ‚àÄ {t} ‚Üí (se : SubEpoch [ e , t ]) ‚Üí
                    Œ¥ x t ‚àà·µ¢ B (mpp+e‚áíc‚Çú‚ààQ mpp se) k
    B[k*]-reached {e} {zero}  mpp                   {t} se = Œª i ‚Üí state‚ààB‚ÇÄ t i (mpp+e‚áíc‚Çú‚ààQ mpp se) (<-wellFounded t)
    B[k*]-reached {e} {suc k} mpp@(next m pp' mpp') {t} se = begin‚ü® computation‚ààB‚ÇÅ pp' ‚ü©
      ‚à¥ ComputationInBox 1       AtTime m  $‚ü® advance-computation‚Çô mpp' ‚ü©
      ‚à¥ ComputationInBox (suc k) AtTime e  $‚ü® (Œª prf i ‚Üí state-stability‚Ä≤ se prf i c‚Çú‚ààQ (<-wellFounded t)) ‚ü©
      ‚à¥ Œ¥ x t ‚àà·µ¢ B _ (suc k)               ‚àé
      where c‚Çú‚ààQ = mpp+e‚áíc‚Çú‚ààQ mpp se
      
    reachesFP : ‚àÄ {e} ‚Üí MultiPseudocycle k*' [ s , e ] ‚Üí
                ‚àÄ {t} ‚Üí SubEpoch [ e , t ] ‚Üí
                Œ¥ x t ‚âà x*'
    reachesFP mpp {t} Œ∑[e,t] = begin‚ü® B[k*]-reached mpp Œ∑[e,t] ‚ü©
      ‚à¥ Œ¥ x t ‚àà·µ¢ B c‚Çú‚ààQ k*'  $‚ü® Œ¥'‚àà-resp-B‚Çú·µ¢ t c‚Çú‚ààQ c‚Çõ‚ààQ Œ∑‚Çõ‚â°Œ∑‚Çú ‚àò_ ‚ü©
      ‚à¥ Œ¥ x t ‚àà·µ¢ B c‚Çõ‚ààQ k*'  $‚ü® k*‚â§k‚àßx‚ààB‚Çñ‚áíx‚âàx* c‚Çõ‚ààQ ‚â§-refl ‚ü©
      ‚à¥ Œ¥ x t ‚âà x*'          ‚àé
      where
      Œ∑‚Çõ‚â°Œ∑‚Çú = mpp+e‚áíŒ∑‚Çú‚â°Œ∑‚Çõ mpp Œ∑[e,t]
      c‚Çú‚ààQ   = Œ∑-pres-‚ààQ Œ∑‚Çõ‚â°Œ∑‚Çú c‚Çõ‚ààQ

convergent : PartiallyConvergent I‚à• X‚ÇÄ Q
convergent = record
  { localFP   = localFP
  ; reachesFP = reachesFP
  }
